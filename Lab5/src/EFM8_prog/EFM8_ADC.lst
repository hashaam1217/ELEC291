0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 07 03:52:21 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _get_period
0000             30            public _Get_ADC
0000             31            public _Volts_at_Pin
0000             32            public _ADC_at_Pin
0000             33            public _InitPinADC
0000             34            public _waitms
0000             35            public _Timer3us
0000             36            public _InitADC
0000             37            public __c51_external_startup
0000             38   ;--------------------------------------------------------
0000             39   ; Special Function Registers
0000             40   ;--------------------------------------------------------
0000             41   _ACC            DATA 0xe0
0000             42   _ADC0ASAH       DATA 0xb6
0000             43   _ADC0ASAL       DATA 0xb5
0000             44   _ADC0ASCF       DATA 0xa1
0000             45   _ADC0ASCT       DATA 0xc7
0000             46   _ADC0CF0        DATA 0xbc
0000             47   _ADC0CF1        DATA 0xb9
0000             48   _ADC0CF2        DATA 0xdf
0000             49   _ADC0CN0        DATA 0xe8
0000             50   _ADC0CN1        DATA 0xb2
0000             51   _ADC0CN2        DATA 0xb3
0000             52   _ADC0GTH        DATA 0xc4
0000             53   _ADC0GTL        DATA 0xc3
0000             54   _ADC0H          DATA 0xbe
0000             55   _ADC0L          DATA 0xbd
0000             56   _ADC0LTH        DATA 0xc6
0000             57   _ADC0LTL        DATA 0xc5
0000             58   _ADC0MX         DATA 0xbb
0000             59   _B              DATA 0xf0
0000             60   _CKCON0         DATA 0x8e
0000             61   _CKCON1         DATA 0xa6
0000             62   _CLEN0          DATA 0xc6
0000             63   _CLIE0          DATA 0xc7
0000             64   _CLIF0          DATA 0xe8
0000             65   _CLKSEL         DATA 0xa9
0000             66   _CLOUT0         DATA 0xd1
0000             67   _CLU0CF         DATA 0xb1
0000             68   _CLU0FN         DATA 0xaf
0000             69   _CLU0MX         DATA 0x84
0000             70   _CLU1CF         DATA 0xb3
0000             71   _CLU1FN         DATA 0xb2
0000             72   _CLU1MX         DATA 0x85
0000             73   _CLU2CF         DATA 0xb6
0000             74   _CLU2FN         DATA 0xb5
0000             75   _CLU2MX         DATA 0x91
0000             76   _CLU3CF         DATA 0xbf
0000             77   _CLU3FN         DATA 0xbe
0000             78   _CLU3MX         DATA 0xae
0000             79   _CMP0CN0        DATA 0x9b
0000             80   _CMP0CN1        DATA 0x99
0000             81   _CMP0MD         DATA 0x9d
0000             82   _CMP0MX         DATA 0x9f
0000             83   _CMP1CN0        DATA 0xbf
0000             84   _CMP1CN1        DATA 0xac
0000             85   _CMP1MD         DATA 0xab
0000             86   _CMP1MX         DATA 0xaa
0000             87   _CRC0CN0        DATA 0xce
0000             88   _CRC0CN1        DATA 0x86
0000             89   _CRC0CNT        DATA 0xd3
0000             90   _CRC0DAT        DATA 0xcb
0000             91   _CRC0FLIP       DATA 0xcf
0000             92   _CRC0IN         DATA 0xca
0000             93   _CRC0ST         DATA 0xd2
0000             94   _DAC0CF0        DATA 0x91
0000             95   _DAC0CF1        DATA 0x92
0000             96   _DAC0H          DATA 0x85
0000             97   _DAC0L          DATA 0x84
0000             98   _DAC1CF0        DATA 0x93
0000             99   _DAC1CF1        DATA 0x94
0000            100   _DAC1H          DATA 0x8a
0000            101   _DAC1L          DATA 0x89
0000            102   _DAC2CF0        DATA 0x95
0000            103   _DAC2CF1        DATA 0x96
0000            104   _DAC2H          DATA 0x8c
0000            105   _DAC2L          DATA 0x8b
0000            106   _DAC3CF0        DATA 0x9a
0000            107   _DAC3CF1        DATA 0x9c
0000            108   _DAC3H          DATA 0x8e
0000            109   _DAC3L          DATA 0x8d
0000            110   _DACGCF0        DATA 0x88
0000            111   _DACGCF1        DATA 0x98
0000            112   _DACGCF2        DATA 0xa2
0000            113   _DERIVID        DATA 0xad
0000            114   _DEVICEID       DATA 0xb5
0000            115   _DPH            DATA 0x83
0000            116   _DPL            DATA 0x82
0000            117   _EIE1           DATA 0xe6
0000            118   _EIE2           DATA 0xf3
0000            119   _EIP1           DATA 0xbb
0000            120   _EIP1H          DATA 0xee
0000            121   _EIP2           DATA 0xed
0000            122   _EIP2H          DATA 0xf6
0000            123   _EMI0CN         DATA 0xe7
0000            124   _FLKEY          DATA 0xb7
0000            125   _HFO0CAL        DATA 0xc7
0000            126   _HFO1CAL        DATA 0xd6
0000            127   _HFOCN          DATA 0xef
0000            128   _I2C0ADM        DATA 0xff
0000            129   _I2C0CN0        DATA 0xba
0000            130   _I2C0DIN        DATA 0xbc
0000            131   _I2C0DOUT       DATA 0xbb
0000            132   _I2C0FCN0       DATA 0xad
0000            133   _I2C0FCN1       DATA 0xab
0000            134   _I2C0FCT        DATA 0xf5
0000            135   _I2C0SLAD       DATA 0xbd
0000            136   _I2C0STAT       DATA 0xb9
0000            137   _IE             DATA 0xa8
0000            138   _IP             DATA 0xb8
0000            139   _IPH            DATA 0xf2
0000            140   _IT01CF         DATA 0xe4
0000            141   _LFO0CN         DATA 0xb1
0000            142   _P0             DATA 0x80
0000            143   _P0MASK         DATA 0xfe
0000            144   _P0MAT          DATA 0xfd
0000            145   _P0MDIN         DATA 0xf1
0000            146   _P0MDOUT        DATA 0xa4
0000            147   _P0SKIP         DATA 0xd4
0000            148   _P1             DATA 0x90
0000            149   _P1MASK         DATA 0xee
0000            150   _P1MAT          DATA 0xed
0000            151   _P1MDIN         DATA 0xf2
0000            152   _P1MDOUT        DATA 0xa5
0000            153   _P1SKIP         DATA 0xd5
0000            154   _P2             DATA 0xa0
0000            155   _P2MASK         DATA 0xfc
0000            156   _P2MAT          DATA 0xfb
0000            157   _P2MDIN         DATA 0xf3
0000            158   _P2MDOUT        DATA 0xa6
0000            159   _P2SKIP         DATA 0xcc
0000            160   _P3             DATA 0xb0
0000            161   _P3MDIN         DATA 0xf4
0000            162   _P3MDOUT        DATA 0x9c
0000            163   _PCA0CENT       DATA 0x9e
0000            164   _PCA0CLR        DATA 0x9c
0000            165   _PCA0CN0        DATA 0xd8
0000            166   _PCA0CPH0       DATA 0xfc
0000            167   _PCA0CPH1       DATA 0xea
0000            168   _PCA0CPH2       DATA 0xec
0000            169   _PCA0CPH3       DATA 0xf5
0000            170   _PCA0CPH4       DATA 0x85
0000            171   _PCA0CPH5       DATA 0xde
0000            172   _PCA0CPL0       DATA 0xfb
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPL2       DATA 0xeb
0000            175   _PCA0CPL3       DATA 0xf4
0000            176   _PCA0CPL4       DATA 0x84
0000            177   _PCA0CPL5       DATA 0xdd
0000            178   _PCA0CPM0       DATA 0xda
0000            179   _PCA0CPM1       DATA 0xdb
0000            180   _PCA0CPM2       DATA 0xdc
0000            181   _PCA0CPM3       DATA 0xae
0000            182   _PCA0CPM4       DATA 0xaf
0000            183   _PCA0CPM5       DATA 0xcc
0000            184   _PCA0H          DATA 0xfa
0000            185   _PCA0L          DATA 0xf9
0000            186   _PCA0MD         DATA 0xd9
0000            187   _PCA0POL        DATA 0x96
0000            188   _PCA0PWM        DATA 0xf7
0000            189   _PCON0          DATA 0x87
0000            190   _PCON1          DATA 0xcd
0000            191   _PFE0CN         DATA 0xc1
0000            192   _PRTDRV         DATA 0xf6
0000            193   _PSCTL          DATA 0x8f
0000            194   _PSTAT0         DATA 0xaa
0000            195   _PSW            DATA 0xd0
0000            196   _REF0CN         DATA 0xd1
0000            197   _REG0CN         DATA 0xc9
0000            198   _REVID          DATA 0xb6
0000            199   _RSTSRC         DATA 0xef
0000            200   _SBCON1         DATA 0x94
0000            201   _SBRLH1         DATA 0x96
0000            202   _SBRLL1         DATA 0x95
0000            203   _SBUF           DATA 0x99
0000            204   _SBUF0          DATA 0x99
0000            205   _SBUF1          DATA 0x92
0000            206   _SCON           DATA 0x98
0000            207   _SCON0          DATA 0x98
0000            208   _SCON1          DATA 0xc8
0000            209   _SFRPAGE        DATA 0xa7
0000            210   _SFRPGCN        DATA 0xbc
0000            211   _SFRSTACK       DATA 0xd7
0000            212   _SMB0ADM        DATA 0xd6
0000            213   _SMB0ADR        DATA 0xd7
0000            214   _SMB0CF         DATA 0xc1
0000            215   _SMB0CN0        DATA 0xc0
0000            216   _SMB0DAT        DATA 0xc2
0000            217   _SMB0FCN0       DATA 0xc3
0000            218   _SMB0FCN1       DATA 0xc4
0000            219   _SMB0FCT        DATA 0xef
0000            220   _SMB0RXLN       DATA 0xc5
0000            221   _SMB0TC         DATA 0xac
0000            222   _SMOD1          DATA 0x93
0000            223   _SP             DATA 0x81
0000            224   _SPI0CFG        DATA 0xa1
0000            225   _SPI0CKR        DATA 0xa2
0000            226   _SPI0CN0        DATA 0xf8
0000            227   _SPI0DAT        DATA 0xa3
0000            228   _SPI0FCN0       DATA 0x9a
0000            229   _SPI0FCN1       DATA 0x9b
0000            230   _SPI0FCT        DATA 0xf7
0000            231   _SPI0PCF        DATA 0xdf
0000            232   _TCON           DATA 0x88
0000            233   _TH0            DATA 0x8c
0000            234   _TH1            DATA 0x8d
0000            235   _TL0            DATA 0x8a
0000            236   _TL1            DATA 0x8b
0000            237   _TMOD           DATA 0x89
0000            238   _TMR2CN0        DATA 0xc8
0000            239   _TMR2CN1        DATA 0xfd
0000            240   _TMR2H          DATA 0xcf
0000            241   _TMR2L          DATA 0xce
0000            242   _TMR2RLH        DATA 0xcb
0000            243   _TMR2RLL        DATA 0xca
0000            244   _TMR3CN0        DATA 0x91
0000            245   _TMR3CN1        DATA 0xfe
0000            246   _TMR3H          DATA 0x95
0000            247   _TMR3L          DATA 0x94
0000            248   _TMR3RLH        DATA 0x93
0000            249   _TMR3RLL        DATA 0x92
0000            250   _TMR4CN0        DATA 0x98
0000            251   _TMR4CN1        DATA 0xff
0000            252   _TMR4H          DATA 0xa5
0000            253   _TMR4L          DATA 0xa4
0000            254   _TMR4RLH        DATA 0xa3
0000            255   _TMR4RLL        DATA 0xa2
0000            256   _TMR5CN0        DATA 0xc0
0000            257   _TMR5CN1        DATA 0xf1
0000            258   _TMR5H          DATA 0xd5
0000            259   _TMR5L          DATA 0xd4
0000            260   _TMR5RLH        DATA 0xd3
0000            261   _TMR5RLL        DATA 0xd2
0000            262   _UART0PCF       DATA 0xd9
0000            263   _UART1FCN0      DATA 0x9d
0000            264   _UART1FCN1      DATA 0xd8
0000            265   _UART1FCT       DATA 0xfa
0000            266   _UART1LIN       DATA 0x9e
0000            267   _UART1PCF       DATA 0xda
0000            268   _VDM0CN         DATA 0xff
0000            269   _WDTCN          DATA 0x97
0000            270   _XBR0           DATA 0xe1
0000            271   _XBR1           DATA 0xe2
0000            272   _XBR2           DATA 0xe3
0000            273   _XOSC0CN        DATA 0x86
0000            274   _DPTR           DATA 0x8382
0000            275   _TMR2RL         DATA 0xcbca
0000            276   _TMR3RL         DATA 0x9392
0000            277   _TMR4RL         DATA 0xa3a2
0000            278   _TMR5RL         DATA 0xd3d2
0000            279   _TMR0           DATA 0x8c8a
0000            280   _TMR1           DATA 0x8d8b
0000            281   _TMR2           DATA 0xcfce
0000            282   _TMR3           DATA 0x9594
0000            283   _TMR4           DATA 0xa5a4
0000            284   _TMR5           DATA 0xd5d4
0000            285   _SBRL1          DATA 0x9695
0000            286   _PCA0           DATA 0xfaf9
0000            287   _PCA0CP0        DATA 0xfcfb
0000            288   _PCA0CP1        DATA 0xeae9
0000            289   _PCA0CP2        DATA 0xeceb
0000            290   _PCA0CP3        DATA 0xf5f4
0000            291   _PCA0CP4        DATA 0x8584
0000            292   _PCA0CP5        DATA 0xdedd
0000            293   _ADC0ASA        DATA 0xb6b5
0000            294   _ADC0GT         DATA 0xc4c3
0000            295   _ADC0           DATA 0xbebd
0000            296   _ADC0LT         DATA 0xc6c5
0000            297   _DAC0           DATA 0x8584
0000            298   _DAC1           DATA 0x8a89
0000            299   _DAC2           DATA 0x8c8b
0000            300   _DAC3           DATA 0x8e8d
0000            301   ;--------------------------------------------------------
0000            302   ; special function bits
0000            303   ;--------------------------------------------------------
0000            304   _ACC_0          BIT 0xe0
0000            305   _ACC_1          BIT 0xe1
0000            306   _ACC_2          BIT 0xe2
0000            307   _ACC_3          BIT 0xe3
0000            308   _ACC_4          BIT 0xe4
0000            309   _ACC_5          BIT 0xe5
0000            310   _ACC_6          BIT 0xe6
0000            311   _ACC_7          BIT 0xe7
0000            312   _TEMPE          BIT 0xe8
0000            313   _ADGN0          BIT 0xe9
0000            314   _ADGN1          BIT 0xea
0000            315   _ADWINT         BIT 0xeb
0000            316   _ADBUSY         BIT 0xec
0000            317   _ADINT          BIT 0xed
0000            318   _IPOEN          BIT 0xee
0000            319   _ADEN           BIT 0xef
0000            320   _B_0            BIT 0xf0
0000            321   _B_1            BIT 0xf1
0000            322   _B_2            BIT 0xf2
0000            323   _B_3            BIT 0xf3
0000            324   _B_4            BIT 0xf4
0000            325   _B_5            BIT 0xf5
0000            326   _B_6            BIT 0xf6
0000            327   _B_7            BIT 0xf7
0000            328   _C0FIF          BIT 0xe8
0000            329   _C0RIF          BIT 0xe9
0000            330   _C1FIF          BIT 0xea
0000            331   _C1RIF          BIT 0xeb
0000            332   _C2FIF          BIT 0xec
0000            333   _C2RIF          BIT 0xed
0000            334   _C3FIF          BIT 0xee
0000            335   _C3RIF          BIT 0xef
0000            336   _D1SRC0         BIT 0x88
0000            337   _D1SRC1         BIT 0x89
0000            338   _D1AMEN         BIT 0x8a
0000            339   _D01REFSL       BIT 0x8b
0000            340   _D3SRC0         BIT 0x8c
0000            341   _D3SRC1         BIT 0x8d
0000            342   _D3AMEN         BIT 0x8e
0000            343   _D23REFSL       BIT 0x8f
0000            344   _D0UDIS         BIT 0x98
0000            345   _D1UDIS         BIT 0x99
0000            346   _D2UDIS         BIT 0x9a
0000            347   _D3UDIS         BIT 0x9b
0000            348   _EX0            BIT 0xa8
0000            349   _ET0            BIT 0xa9
0000            350   _EX1            BIT 0xaa
0000            351   _ET1            BIT 0xab
0000            352   _ES0            BIT 0xac
0000            353   _ET2            BIT 0xad
0000            354   _ESPI0          BIT 0xae
0000            355   _EA             BIT 0xaf
0000            356   _PX0            BIT 0xb8
0000            357   _PT0            BIT 0xb9
0000            358   _PX1            BIT 0xba
0000            359   _PT1            BIT 0xbb
0000            360   _PS0            BIT 0xbc
0000            361   _PT2            BIT 0xbd
0000            362   _PSPI0          BIT 0xbe
0000            363   _P0_0           BIT 0x80
0000            364   _P0_1           BIT 0x81
0000            365   _P0_2           BIT 0x82
0000            366   _P0_3           BIT 0x83
0000            367   _P0_4           BIT 0x84
0000            368   _P0_5           BIT 0x85
0000            369   _P0_6           BIT 0x86
0000            370   _P0_7           BIT 0x87
0000            371   _P1_0           BIT 0x90
0000            372   _P1_1           BIT 0x91
0000            373   _P1_2           BIT 0x92
0000            374   _P1_3           BIT 0x93
0000            375   _P1_4           BIT 0x94
0000            376   _P1_5           BIT 0x95
0000            377   _P1_6           BIT 0x96
0000            378   _P1_7           BIT 0x97
0000            379   _P2_0           BIT 0xa0
0000            380   _P2_1           BIT 0xa1
0000            381   _P2_2           BIT 0xa2
0000            382   _P2_3           BIT 0xa3
0000            383   _P2_4           BIT 0xa4
0000            384   _P2_5           BIT 0xa5
0000            385   _P2_6           BIT 0xa6
0000            386   _P3_0           BIT 0xb0
0000            387   _P3_1           BIT 0xb1
0000            388   _P3_2           BIT 0xb2
0000            389   _P3_3           BIT 0xb3
0000            390   _P3_4           BIT 0xb4
0000            391   _P3_7           BIT 0xb7
0000            392   _CCF0           BIT 0xd8
0000            393   _CCF1           BIT 0xd9
0000            394   _CCF2           BIT 0xda
0000            395   _CCF3           BIT 0xdb
0000            396   _CCF4           BIT 0xdc
0000            397   _CCF5           BIT 0xdd
0000            398   _CR             BIT 0xde
0000            399   _CF             BIT 0xdf
0000            400   _PARITY         BIT 0xd0
0000            401   _F1             BIT 0xd1
0000            402   _OV             BIT 0xd2
0000            403   _RS0            BIT 0xd3
0000            404   _RS1            BIT 0xd4
0000            405   _F0             BIT 0xd5
0000            406   _AC             BIT 0xd6
0000            407   _CY             BIT 0xd7
0000            408   _RI             BIT 0x98
0000            409   _TI             BIT 0x99
0000            410   _RB8            BIT 0x9a
0000            411   _TB8            BIT 0x9b
0000            412   _REN            BIT 0x9c
0000            413   _CE             BIT 0x9d
0000            414   _SMODE          BIT 0x9e
0000            415   _RI1            BIT 0xc8
0000            416   _TI1            BIT 0xc9
0000            417   _RBX1           BIT 0xca
0000            418   _TBX1           BIT 0xcb
0000            419   _REN1           BIT 0xcc
0000            420   _PERR1          BIT 0xcd
0000            421   _OVR1           BIT 0xce
0000            422   _SI             BIT 0xc0
0000            423   _ACK            BIT 0xc1
0000            424   _ARBLOST        BIT 0xc2
0000            425   _ACKRQ          BIT 0xc3
0000            426   _STO            BIT 0xc4
0000            427   _STA            BIT 0xc5
0000            428   _TXMODE         BIT 0xc6
0000            429   _MASTER         BIT 0xc7
0000            430   _SPIEN          BIT 0xf8
0000            431   _TXNF           BIT 0xf9
0000            432   _NSSMD0         BIT 0xfa
0000            433   _NSSMD1         BIT 0xfb
0000            434   _RXOVRN         BIT 0xfc
0000            435   _MODF           BIT 0xfd
0000            436   _WCOL           BIT 0xfe
0000            437   _SPIF           BIT 0xff
0000            438   _IT0            BIT 0x88
0000            439   _IE0            BIT 0x89
0000            440   _IT1            BIT 0x8a
0000            441   _IE1            BIT 0x8b
0000            442   _TR0            BIT 0x8c
0000            443   _TF0            BIT 0x8d
0000            444   _TR1            BIT 0x8e
0000            445   _TF1            BIT 0x8f
0000            446   _T2XCLK0        BIT 0xc8
0000            447   _T2XCLK1        BIT 0xc9
0000            448   _TR2            BIT 0xca
0000            449   _T2SPLIT        BIT 0xcb
0000            450   _TF2CEN         BIT 0xcc
0000            451   _TF2LEN         BIT 0xcd
0000            452   _TF2L           BIT 0xce
0000            453   _TF2H           BIT 0xcf
0000            454   _T4XCLK0        BIT 0x98
0000            455   _T4XCLK1        BIT 0x99
0000            456   _TR4            BIT 0x9a
0000            457   _T4SPLIT        BIT 0x9b
0000            458   _TF4CEN         BIT 0x9c
0000            459   _TF4LEN         BIT 0x9d
0000            460   _TF4L           BIT 0x9e
0000            461   _TF4H           BIT 0x9f
0000            462   _T5XCLK0        BIT 0xc0
0000            463   _T5XCLK1        BIT 0xc1
0000            464   _TR5            BIT 0xc2
0000            465   _T5SPLIT        BIT 0xc3
0000            466   _TF5CEN         BIT 0xc4
0000            467   _TF5LEN         BIT 0xc5
0000            468   _TF5L           BIT 0xc6
0000            469   _TF5H           BIT 0xc7
0000            470   _RIE            BIT 0xd8
0000            471   _RXTO0          BIT 0xd9
0000            472   _RXTO1          BIT 0xda
0000            473   _RFRQ           BIT 0xdb
0000            474   _TIE            BIT 0xdc
0000            475   _TXHOLD         BIT 0xdd
0000            476   _TXNF1          BIT 0xde
0000            477   _TFRQ           BIT 0xdf
0000            478   ;--------------------------------------------------------
0000            479   ; overlayable register banks
0000            480   ;--------------------------------------------------------
0000            481            rbank0 segment data overlay
0000            482   ;--------------------------------------------------------
0000            483   ; internal ram data
0000            484   ;--------------------------------------------------------
0000            485            rseg R_DSEG
0000            486   _main_v_1_63:
0000            487            ds 8
0008            488   _main_hello_1_63:
0008            489            ds 4
000C            490   ;--------------------------------------------------------
000C            491   ; overlayable items in internal ram 
000C            492   ;--------------------------------------------------------
0000            493            rseg    R_OSEG
0000            494            rseg    R_OSEG
0000            495   _InitPinADC_PARM_2:
0000            496            ds 1
0001            497            rseg    R_OSEG
0001            498   ;--------------------------------------------------------
0001            499   ; indirectly addressable internal ram data
0001            500   ;--------------------------------------------------------
0000            501            rseg R_ISEG
0000            502   ;--------------------------------------------------------
0000            503   ; absolute internal ram data
0000            504   ;--------------------------------------------------------
0000            505            DSEG
0000            506   ;--------------------------------------------------------
0000            507   ; bit data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_BSEG
0000            510   ;--------------------------------------------------------
0000            511   ; paged external ram data
0000            512   ;--------------------------------------------------------
0000            513            rseg R_PSEG
0000            514   ;--------------------------------------------------------
0000            515   ; external ram data
0000            516   ;--------------------------------------------------------
0000            517            rseg R_XSEG
0000            518   ;--------------------------------------------------------
0000            519   ; absolute external ram data
0000            520   ;--------------------------------------------------------
0000            521            XSEG
0000            522   ;--------------------------------------------------------
0000            523   ; external initialized ram data
0000            524   ;--------------------------------------------------------
0000            525            rseg R_IXSEG
0000            526            rseg R_HOME
0000            527            rseg R_GSINIT
0000            528            rseg R_CSEG
0000            529   ;--------------------------------------------------------
0000            530   ; Reset entry point and interrupt vectors
0000            531   ;--------------------------------------------------------
0000            532            CSEG at 0x0000
0000 020000     533            ljmp    _crt0
0003            534   ;--------------------------------------------------------
0003            535   ; global & static initialisations
0003            536   ;--------------------------------------------------------
0000            537            rseg R_HOME
0000            538            rseg R_GSINIT
0000            539            rseg R_GSINIT
0000            540   ;--------------------------------------------------------
0000            541   ; data variables initialization
0000            542   ;--------------------------------------------------------
0000            543            rseg R_DINIT
0000            544            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            545   ;--------------------------------------------------------
0000            546   ; code
0000            547   ;--------------------------------------------------------
0000            548            rseg R_CSEG
0000            549   ;------------------------------------------------------------
0000            550   ;Allocation info for local variables in function '_c51_external_startup'
0000            551   ;------------------------------------------------------------
0000            552   ;------------------------------------------------------------
0000            553   ;        EFM8_ADC.c:20: char _c51_external_startup (void)
0000            554   ;        -----------------------------------------
0000            555   ;         function _c51_external_startup
0000            556   ;        -----------------------------------------
0000            557   __c51_external_startup:
0000            558            using   0
0000            559   ;        EFM8_ADC.c:23: SFRPAGE = 0x00;
0000 75A700     560            mov     _SFRPAGE,#0x00
0003            561   ;        EFM8_ADC.c:24: WDTCN = 0xDE; //First key
0003 7597DE     562            mov     _WDTCN,#0xDE
0006            563   ;        EFM8_ADC.c:25: WDTCN = 0xAD; //Second key
0006 7597AD     564            mov     _WDTCN,#0xAD
0009            565   ;        EFM8_ADC.c:27: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     566            mov     _VDM0CN,#0x80
000C            567   ;        EFM8_ADC.c:28: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     568            mov     _RSTSRC,#0x06
000F            569   ;        EFM8_ADC.c:35: SFRPAGE = 0x10;
000F 75A710     570            mov     _SFRPAGE,#0x10
0012            571   ;        EFM8_ADC.c:36: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     572            mov     _PFE0CN,#0x20
0015            573   ;        EFM8_ADC.c:37: SFRPAGE = 0x00;
0015 75A700     574            mov     _SFRPAGE,#0x00
0018            575   ;        EFM8_ADC.c:58: CLKSEL = 0x00;
0018 75A900     576            mov     _CLKSEL,#0x00
001B            577   ;        EFM8_ADC.c:59: CLKSEL = 0x00;
001B 75A900     578            mov     _CLKSEL,#0x00
001E            579   ;        EFM8_ADC.c:60: while ((CLKSEL & 0x80) == 0);
001E            580   L002001?:
001E E5A9       581            mov     a,_CLKSEL
0020 30E7F0     582            jnb     acc.7,L002001?
0023            583   ;        EFM8_ADC.c:61: CLKSEL = 0x03;
0023 75A903     584            mov     _CLKSEL,#0x03
0026            585   ;        EFM8_ADC.c:62: CLKSEL = 0x03;
0026 75A903     586            mov     _CLKSEL,#0x03
0029            587   ;        EFM8_ADC.c:63: while ((CLKSEL & 0x80) == 0);
0029            588   L002004?:
0029 E5A9       589            mov     a,_CLKSEL
002B 30E770     590            jnb     acc.7,L002004?
002E            591   ;        EFM8_ADC.c:68: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     592            orl     _P0MDOUT,#0x10
0031            593   ;        EFM8_ADC.c:69: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     594            mov     _XBR0,#0x01
0034            595   ;        EFM8_ADC.c:70: XBR1     = 0X00;
0034 75E200     596            mov     _XBR1,#0x00
0037            597   ;        EFM8_ADC.c:71: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     598            mov     _XBR2,#0x40
003A            599   ;        EFM8_ADC.c:77: SCON0 = 0x10;
003A 759810     600            mov     _SCON0,#0x10
003D            601   ;        EFM8_ADC.c:78: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     602            mov     _TH1,#0xE6
0040            603   ;        EFM8_ADC.c:79: TL1 = TH1;      // Init Timer1
0040 858D8B     604            mov     _TL1,_TH1
0043            605   ;        EFM8_ADC.c:80: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     606            anl     _TMOD,#0x0F
0046            607   ;        EFM8_ADC.c:81: TMOD |=  0x21;
0046 438921     608            orl     _TMOD,#0x21
0049            609   ;        EFM8_ADC.c:82: TR1 = 1; // START Timer1
0049 D28E       610            setb    _TR1
004B            611   ;        EFM8_ADC.c:83: TI = 1;  // Indicate TX0 ready
004B D299       612            setb    _TI
004D            613   ;        EFM8_ADC.c:85: return 0;
004D 758200     614            mov     dpl,#0x00
0050 22         615            ret
0051            616   ;------------------------------------------------------------
0051            617   ;Allocation info for local variables in function 'InitADC'
0051            618   ;------------------------------------------------------------
0051            619   ;------------------------------------------------------------
0051            620   ;        EFM8_ADC.c:90: void InitADC (void)
0051            621   ;        -----------------------------------------
0051            622   ;         function InitADC
0051            623   ;        -----------------------------------------
0051            624   _InitADC:
0051            625   ;        EFM8_ADC.c:92: SFRPAGE = 0x00;
0051 75A700     626            mov     _SFRPAGE,#0x00
0054            627   ;        EFM8_ADC.c:93: ADEN=0; // Disable ADC
0054 C2EF       628            clr     _ADEN
0056            629   ;        EFM8_ADC.c:98: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     630            mov     _ADC0CN1,#0x80
0059            631   ;        EFM8_ADC.c:102: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     632            mov     _ADC0CF0,#0x20
005C            633   ;        EFM8_ADC.c:106: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     634            mov     _ADC0CF1,#0x1E
005F            635   ;        EFM8_ADC.c:115: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     636            mov     _ADC0CN0,#0x00
0062            637   ;        EFM8_ADC.c:120: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     638            mov     _ADC0CF2,#0x3F
0065            639   ;        EFM8_ADC.c:124: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     640            mov     _ADC0CN2,#0x00
0068            641   ;        EFM8_ADC.c:126: ADEN=1; // Enable ADC
0068 D2EF       642            setb    _ADEN
006A 22         643            ret
006B            644   ;------------------------------------------------------------
006B            645   ;Allocation info for local variables in function 'Timer3us'
006B            646   ;------------------------------------------------------------
006B            647   ;us                        Allocated to registers r2 
006B            648   ;i                         Allocated to registers r3 
006B            649   ;------------------------------------------------------------
006B            650   ;        EFM8_ADC.c:130: void Timer3us(unsigned char us)
006B            651   ;        -----------------------------------------
006B            652   ;         function Timer3us
006B            653   ;        -----------------------------------------
006B            654   _Timer3us:
006B AA82       655            mov     r2,dpl
006D            656   ;        EFM8_ADC.c:135: CKCON0|=0b_0100_0000;
006D 438E40     657            orl     _CKCON0,#0x40
0070            658   ;        EFM8_ADC.c:137: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     659            mov     _TMR3RL,#0xB8
0073 7593FF     660            mov     (_TMR3RL >> 8),#0xFF
0076            661   ;        EFM8_ADC.c:138: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     662            mov     _TMR3,_TMR3RL
0079 859395     663            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            664   ;        EFM8_ADC.c:140: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     665            mov     _TMR3CN0,#0x04
007F            666   ;        EFM8_ADC.c:141: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       667            mov     r3,#0x00
0081            668   L004004?:
0081 C3         669            clr     c
0082 EB         670            mov     a,r3
0083 9A         671            subb    a,r2
0084 5000       672            jnc     L004007?
0086            673   ;        EFM8_ADC.c:143: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            674   L004001?:
0086 E591       675            mov     a,_TMR3CN0
0088 30E770     676            jnb     acc.7,L004001?
008B            677   ;        EFM8_ADC.c:144: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     678            anl     _TMR3CN0,#0x7F
008E            679   ;        EFM8_ADC.c:141: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         680            inc     r3
008F 8000       681            sjmp    L004004?
0091            682   L004007?:
0091            683   ;        EFM8_ADC.c:146: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     684            mov     _TMR3CN0,#0x00
0094 22         685            ret
0095            686   ;------------------------------------------------------------
0095            687   ;Allocation info for local variables in function 'waitms'
0095            688   ;------------------------------------------------------------
0095            689   ;ms                        Allocated to registers r2 r3 
0095            690   ;j                         Allocated to registers r4 r5 
0095            691   ;k                         Allocated to registers r6 
0095            692   ;------------------------------------------------------------
0095            693   ;        EFM8_ADC.c:149: void waitms (unsigned int ms)
0095            694   ;        -----------------------------------------
0095            695   ;         function waitms
0095            696   ;        -----------------------------------------
0095            697   _waitms:
0095 AA82       698            mov     r2,dpl
0097 AB83       699            mov     r3,dph
0099            700   ;        EFM8_ADC.c:153: for(j=0; j<ms; j++)
0099 7C00       701            mov     r4,#0x00
009B 7D00       702            mov     r5,#0x00
009D            703   L005005?:
009D C3         704            clr     c
009E EC         705            mov     a,r4
009F 9A         706            subb    a,r2
00A0 ED         707            mov     a,r5
00A1 9B         708            subb    a,r3
00A2 5000       709            jnc     L005009?
00A4            710   ;        EFM8_ADC.c:154: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       711            mov     r6,#0x00
00A6            712   L005001?:
00A6 BE04B0     713            cjne    r6,#0x04,L005018?
00A9            714   L005018?:
00A9 5000       715            jnc     L005007?
00AB 7582FA     716            mov     dpl,#0xFA
00AE C002       717            push    ar2
00B0 C003       718            push    ar3
00B2 C004       719            push    ar4
00B4 C005       720            push    ar5
00B6 C006       721            push    ar6
00B8 120000     722            lcall   _Timer3us
00BB D006       723            pop     ar6
00BD D005       724            pop     ar5
00BF D004       725            pop     ar4
00C1 D003       726            pop     ar3
00C3 D002       727            pop     ar2
00C5 0E         728            inc     r6
00C6 8000       729            sjmp    L005001?
00C8            730   L005007?:
00C8            731   ;        EFM8_ADC.c:153: for(j=0; j<ms; j++)
00C8 0C         732            inc     r4
00C9 BC00F0     733            cjne    r4,#0x00,L005005?
00CC 0D         734            inc     r5
00CD 8000       735            sjmp    L005005?
00CF            736   L005009?:
00CF 22         737            ret
00D0            738   ;------------------------------------------------------------
00D0            739   ;Allocation info for local variables in function 'InitPinADC'
00D0            740   ;------------------------------------------------------------
00D0            741   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            742   ;portno                    Allocated to registers r2 
00D0            743   ;mask                      Allocated to registers r3 
00D0            744   ;------------------------------------------------------------
00D0            745   ;        EFM8_ADC.c:159: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            746   ;        -----------------------------------------
00D0            747   ;         function InitPinADC
00D0            748   ;        -----------------------------------------
00D0            749   _InitPinADC:
00D0 AA82       750            mov     r2,dpl
00D2            751   ;        EFM8_ADC.c:163: mask=1<<pinno;
00D2 8590F0     752            mov     b,_InitPinADC_PARM_2
00D5 05F0       753            inc     b
00D7 7401       754            mov     a,#0x01
00D9 8000       755            sjmp    L006013?
00DB            756   L006011?:
00DB 25E0       757            add     a,acc
00DD            758   L006013?:
00DD D5F0B0     759            djnz    b,L006011?
00E0 FB         760            mov     r3,a
00E1            761   ;        EFM8_ADC.c:165: SFRPAGE = 0x20;
00E1 75A720     762            mov     _SFRPAGE,#0x20
00E4            763   ;        EFM8_ADC.c:166: switch (portno)
00E4 BA00F0     764            cjne    r2,#0x00,L006014?
00E7 8000       765            sjmp    L006001?
00E9            766   L006014?:
00E9 BA0170     767            cjne    r2,#0x01,L006015?
00EC 8000       768            sjmp    L006002?
00EE            769   L006015?:
00EE            770   ;        EFM8_ADC.c:168: case 0:
00EE BA02F0     771            cjne    r2,#0x02,L006005?
00F1 8000       772            sjmp    L006003?
00F3            773   L006001?:
00F3            774   ;        EFM8_ADC.c:169: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         775            mov     a,r3
00F4 F4         776            cpl     a
00F5 FA         777            mov     r2,a
00F6 52F1       778            anl     _P0MDIN,a
00F8            779   ;        EFM8_ADC.c:170: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         780            mov     a,r3
00F9 42D4       781            orl     _P0SKIP,a
00FB            782   ;        EFM8_ADC.c:171: break;
00FB            783   ;        EFM8_ADC.c:172: case 1:
00FB 8000       784            sjmp    L006005?
00FD            785   L006002?:
00FD            786   ;        EFM8_ADC.c:173: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         787            mov     a,r3
00FE F4         788            cpl     a
00FF FA         789            mov     r2,a
0100 52F2       790            anl     _P1MDIN,a
0102            791   ;        EFM8_ADC.c:174: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         792            mov     a,r3
0103 42D5       793            orl     _P1SKIP,a
0105            794   ;        EFM8_ADC.c:175: break;
0105            795   ;        EFM8_ADC.c:176: case 2:
0105 8000       796            sjmp    L006005?
0107            797   L006003?:
0107            798   ;        EFM8_ADC.c:177: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         799            mov     a,r3
0108 F4         800            cpl     a
0109 FA         801            mov     r2,a
010A 52F3       802            anl     _P2MDIN,a
010C            803   ;        EFM8_ADC.c:178: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         804            mov     a,r3
010D 42CC       805            orl     _P2SKIP,a
010F            806   ;        EFM8_ADC.c:182: }
010F            807   L006005?:
010F            808   ;        EFM8_ADC.c:183: SFRPAGE = 0x00;
010F 75A700     809            mov     _SFRPAGE,#0x00
0112 22         810            ret
0113            811   ;------------------------------------------------------------
0113            812   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            813   ;------------------------------------------------------------
0113            814   ;pin                       Allocated to registers 
0113            815   ;------------------------------------------------------------
0113            816   ;        EFM8_ADC.c:186: unsigned int ADC_at_Pin(unsigned char pin)
0113            817   ;        -----------------------------------------
0113            818   ;         function ADC_at_Pin
0113            819   ;        -----------------------------------------
0113            820   _ADC_at_Pin:
0113 8582BB     821            mov     _ADC0MX,dpl
0116            822   ;        EFM8_ADC.c:189: ADINT = 0;
0116 C2ED       823            clr     _ADINT
0118            824   ;        EFM8_ADC.c:190: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       825            setb    _ADBUSY
011A            826   ;        EFM8_ADC.c:191: while (!ADINT); // Wait for conversion to complete
011A            827   L007001?:
011A 30ED70     828            jnb     _ADINT,L007001?
011D            829   ;        EFM8_ADC.c:192: return (ADC0);
011D 85BD82     830            mov     dpl,_ADC0
0120 85BE83     831            mov     dph,(_ADC0 >> 8)
0123 22         832            ret
0124            833   ;------------------------------------------------------------
0124            834   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            835   ;------------------------------------------------------------
0124            836   ;pin                       Allocated to registers r2 
0124            837   ;------------------------------------------------------------
0124            838   ;        EFM8_ADC.c:195: float Volts_at_Pin(unsigned char pin)
0124            839   ;        -----------------------------------------
0124            840   ;         function Volts_at_Pin
0124            841   ;        -----------------------------------------
0124            842   _Volts_at_Pin:
0124            843   ;        EFM8_ADC.c:197: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     844            lcall   _ADC_at_Pin
0127 120000     845            lcall   ___uint2fs
012A AA82       846            mov     r2,dpl
012C AB83       847            mov     r3,dph
012E ACF0       848            mov     r4,b
0130 FD         849            mov     r5,a
0131 C002       850            push    ar2
0133 C003       851            push    ar3
0135 C004       852            push    ar4
0137 C005       853            push    ar5
0139 906C8B     854            mov     dptr,#0x6C8B
013C 75F053     855            mov     b,#0x53
013F 7440       856            mov     a,#0x40
0141 120000     857            lcall   ___fsmul
0144 AA82       858            mov     r2,dpl
0146 AB83       859            mov     r3,dph
0148 ACF0       860            mov     r4,b
014A FD         861            mov     r5,a
014B E581       862            mov     a,sp
014D 24FC       863            add     a,#0xfc
014F F581       864            mov     sp,a
0151 E4         865            clr     a
0152 C0E0       866            push    acc
0154 74FC       867            mov     a,#0xFC
0156 C0E0       868            push    acc
0158 747F       869            mov     a,#0x7F
015A C0E0       870            push    acc
015C 7446       871            mov     a,#0x46
015E C0E0       872            push    acc
0160 8A82       873            mov     dpl,r2
0162 8B83       874            mov     dph,r3
0164 8CF0       875            mov     b,r4
0166 ED         876            mov     a,r5
0167 120000     877            lcall   ___fsdiv
016A AA82       878            mov     r2,dpl
016C AB83       879            mov     r3,dph
016E ACF0       880            mov     r4,b
0170 FD         881            mov     r5,a
0171 E581       882            mov     a,sp
0173 24FC       883            add     a,#0xfc
0175 F581       884            mov     sp,a
0177 8A82       885            mov     dpl,r2
0179 8B83       886            mov     dph,r3
017B 8CF0       887            mov     b,r4
017D ED         888            mov     a,r5
017E 22         889            ret
017F            890   ;------------------------------------------------------------
017F            891   ;Allocation info for local variables in function 'Get_ADC'
017F            892   ;------------------------------------------------------------
017F            893   ;------------------------------------------------------------
017F            894   ;        EFM8_ADC.c:201: unsigned int Get_ADC (void)
017F            895   ;        -----------------------------------------
017F            896   ;         function Get_ADC
017F            897   ;        -----------------------------------------
017F            898   _Get_ADC:
017F            899   ;        EFM8_ADC.c:203: ADINT = 0;
017F C2ED       900            clr     _ADINT
0181            901   ;        EFM8_ADC.c:204: ADBUSY = 1;
0181 D2EC       902            setb    _ADBUSY
0183            903   ;        EFM8_ADC.c:205: while (!ADINT); // Wait for conversion to complete
0183            904   L009001?:
0183 30EDB0     905            jnb     _ADINT,L009001?
0186            906   ;        EFM8_ADC.c:206: return (ADC0);
0186 85BD82     907            mov     dpl,_ADC0
0189 85BE83     908            mov     dph,(_ADC0 >> 8)
018C 22         909            ret
018D            910   ;------------------------------------------------------------
018D            911   ;Allocation info for local variables in function 'get_period'
018D            912   ;------------------------------------------------------------
018D            913   ;half_period               Allocated to registers r2 r3 r4 r5 
018D            914   ;overflow_count            Allocated to registers 
018D            915   ;------------------------------------------------------------
018D            916   ;        EFM8_ADC.c:209: float get_period(void)
018D            917   ;        -----------------------------------------
018D            918   ;         function get_period
018D            919   ;        -----------------------------------------
018D            920   _get_period:
018D            921   ;        EFM8_ADC.c:214: ADC0MX=QFP32_MUX_P2_4;
018D 75BB11     922            mov     _ADC0MX,#0x11
0190            923   ;        EFM8_ADC.c:215: ADINT = 0;
0190 C2ED       924            clr     _ADINT
0192            925   ;        EFM8_ADC.c:216: ADBUSY=1;
0192 D2EC       926            setb    _ADBUSY
0194            927   ;        EFM8_ADC.c:217: while (!ADINT); // Wait for conversion to complete
0194            928   L010001?:
0194 30EDF0     929            jnb     _ADINT,L010001?
0197            930   ;        EFM8_ADC.c:219: TL0=0;
0197 758A00     931            mov     _TL0,#0x00
019A            932   ;        EFM8_ADC.c:220: TH0=0;
019A 758C00     933            mov     _TH0,#0x00
019D            934   ;        EFM8_ADC.c:221: while (Get_ADC()!=0); // Wait for the signal to be zero
019D            935   L010004?:
019D 120000     936            lcall   _Get_ADC
01A0 E582       937            mov     a,dpl
01A2 8583F0     938            mov     b,dph
01A5 45F0       939            orl     a,b
01A7 7000       940            jnz     L010004?
01A9            941   ;        EFM8_ADC.c:222: while (Get_ADC()==0); // Wait for the signal to be positive
01A9            942   L010007?:
01A9 120000     943            lcall   _Get_ADC
01AC E582       944            mov     a,dpl
01AE 8583F0     945            mov     b,dph
01B1 45F0       946            orl     a,b
01B3 6000       947            jz      L010007?
01B5            948   ;        EFM8_ADC.c:223: TR0=1; // Start the timer 0
01B5 D28C       949            setb    _TR0
01B7            950   ;        EFM8_ADC.c:224: while (Get_ADC()!=0); // Wait for the signal to be zero again
01B7            951   L010010?:
01B7 120000     952            lcall   _Get_ADC
01BA E582       953            mov     a,dpl
01BC 8583F0     954            mov     b,dph
01BF 45F0       955            orl     a,b
01C1 7000       956            jnz     L010010?
01C3            957   ;        EFM8_ADC.c:225: TR0=0; // Stop timer 0
01C3 C28C       958            clr     _TR0
01C5            959   ;        EFM8_ADC.c:227: half_period=TH0*256.0+TL0; // The 16-bit number [TH0-TL0]
01C5 858C82     960            mov     dpl,_TH0
01C8 120000     961            lcall   ___uchar2fs
01CB AA82       962            mov     r2,dpl
01CD AB83       963            mov     r3,dph
01CF ACF0       964            mov     r4,b
01D1 FD         965            mov     r5,a
01D2 C002       966            push    ar2
01D4 C003       967            push    ar3
01D6 C004       968            push    ar4
01D8 C005       969            push    ar5
01DA 900000     970            mov     dptr,#0x0000
01DD 75F080     971            mov     b,#0x80
01E0 7443       972            mov     a,#0x43
01E2 120000     973            lcall   ___fsmul
01E5 AA82       974            mov     r2,dpl
01E7 AB83       975            mov     r3,dph
01E9 ACF0       976            mov     r4,b
01EB FD         977            mov     r5,a
01EC E581       978            mov     a,sp
01EE 24FC       979            add     a,#0xfc
01F0 F581       980            mov     sp,a
01F2 AE8A       981            mov     r6,_TL0
01F4 7F00       982            mov     r7,#0x00
01F6 8E82       983            mov     dpl,r6
01F8 8F83       984            mov     dph,r7
01FA C002       985            push    ar2
01FC C003       986            push    ar3
01FE C004       987            push    ar4
0200 C005       988            push    ar5
0202 120000     989            lcall   ___sint2fs
0205 AE82       990            mov     r6,dpl
0207 AF83       991            mov     r7,dph
0209 A8F0       992            mov     r0,b
020B F9         993            mov     r1,a
020C D005       994            pop     ar5
020E D004       995            pop     ar4
0210 D003       996            pop     ar3
0212 D002       997            pop     ar2
0214 C006       998            push    ar6
0216 C007       999            push    ar7
0218 C000      1000            push    ar0
021A C001      1001            push    ar1
021C 8A82      1002            mov     dpl,r2
021E 8B83      1003            mov     dph,r3
0220 8CF0      1004            mov     b,r4
0222 ED        1005            mov     a,r5
0223 120000    1006            lcall   ___fsadd
0226 AA82      1007            mov     r2,dpl
0228 AB83      1008            mov     r3,dph
022A ACF0      1009            mov     r4,b
022C FD        1010            mov     r5,a
022D E581      1011            mov     a,sp
022F 24FC      1012            add     a,#0xfc
0231 F581      1013            mov     sp,a
0233           1014   ;        EFM8_ADC.c:230: return half_period;
0233 8A82      1015            mov     dpl,r2
0235 8B83      1016            mov     dph,r3
0237 8CF0      1017            mov     b,r4
0239 ED        1018            mov     a,r5
023A 22        1019            ret
023B           1020   ;------------------------------------------------------------
023B           1021   ;Allocation info for local variables in function 'main'
023B           1022   ;------------------------------------------------------------
023B           1023   ;v                         Allocated with name '_main_v_1_63'
023B           1024   ;hello                     Allocated with name '_main_hello_1_63'
023B           1025   ;------------------------------------------------------------
023B           1026   ;        EFM8_ADC.c:234: void main (void)
023B           1027   ;        -----------------------------------------
023B           1028   ;         function main
023B           1029   ;        -----------------------------------------
023B           1030   _main:
023B           1031   ;        EFM8_ADC.c:240: waitms(500); // Give PuTTy a chance to start before sending
023B 9001F4    1032            mov     dptr,#0x01F4
023E 120000    1033            lcall   _waitms
0241           1034   ;        EFM8_ADC.c:241: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0241 74B0      1035            mov     a,#__str_0
0243 C0E0      1036            push    acc
0245 74BD      1037            mov     a,#(__str_0 >> 8)
0247 C0E0      1038            push    acc
0249 7480      1039            mov     a,#0x80
024B C0E0      1040            push    acc
024D 120000    1041            lcall   _printf
0250 1581      1042            dec     sp
0252 1581      1043            dec     sp
0254 1581      1044            dec     sp
0256           1045   ;        EFM8_ADC.c:246: __FILE__, __DATE__, __TIME__);
0256           1046   ;        EFM8_ADC.c:245: "Compiled: %s, %s\n\n",
0256 7430      1047            mov     a,#__str_4
0258 C0E0      1048            push    acc
025A 74BE      1049            mov     a,#(__str_4 >> 8)
025C C0E0      1050            push    acc
025E 7480      1051            mov     a,#0x80
0260 C0E0      1052            push    acc
0262 7470      1053            mov     a,#__str_3
0264 C0E0      1054            push    acc
0266 74BE      1055            mov     a,#(__str_3 >> 8)
0268 C0E0      1056            push    acc
026A 7480      1057            mov     a,#0x80
026C C0E0      1058            push    acc
026E 74B0      1059            mov     a,#__str_2
0270 C0E0      1060            push    acc
0272 74BE      1061            mov     a,#(__str_2 >> 8)
0274 C0E0      1062            push    acc
0276 7480      1063            mov     a,#0x80
0278 C0E0      1064            push    acc
027A 74F0      1065            mov     a,#__str_1
027C C0E0      1066            push    acc
027E 74BE      1067            mov     a,#(__str_1 >> 8)
0280 C0E0      1068            push    acc
0282 7480      1069            mov     a,#0x80
0284 C0E0      1070            push    acc
0286 120000    1071            lcall   _printf
0289 E581      1072            mov     a,sp
028B 24F4      1073            add     a,#0xf4
028D F581      1074            mov     sp,a
028F           1075   ;        EFM8_ADC.c:250: InitPinADC(2, 4); // Configure P2.4 as analog input
028F 759004    1076            mov     _InitPinADC_PARM_2,#0x04
0292 758202    1077            mov     dpl,#0x02
0295 120000    1078            lcall   _InitPinADC
0298           1079   ;        EFM8_ADC.c:251: InitPinADC(2, 5); // Configure P2.5 as analog input
0298 759005    1080            mov     _InitPinADC_PARM_2,#0x05
029B 758202    1081            mov     dpl,#0x02
029E 120000    1082            lcall   _InitPinADC
02A1           1083   ;        EFM8_ADC.c:252: InitADC();
02A1 120000    1084            lcall   _InitADC
02A4           1085   ;        EFM8_ADC.c:254: while(1)
02A4           1086   L011005?:
02A4           1087   ;        EFM8_ADC.c:259: v[0] = Volts_at_Pin(QFP32_MUX_P2_4);
02A4 758211    1088            mov     dpl,#0x11
02A7 120000    1089            lcall   _Volts_at_Pin
02AA AA82      1090            mov     r2,dpl
02AC AB83      1091            mov     r3,dph
02AE ACF0      1092            mov     r4,b
02B0 FD        1093            mov     r5,a
02B1 8A20      1094            mov     _main_v_1_63,r2
02B3 8B21      1095            mov     (_main_v_1_63 + 1),r3
02B5 8C22      1096            mov     (_main_v_1_63 + 2),r4
02B7 8D23      1097            mov     (_main_v_1_63 + 3),r5
02B9           1098   ;        EFM8_ADC.c:260: v[1] = Volts_at_Pin(QFP32_MUX_P2_5);
02B9 758212    1099            mov     dpl,#0x12
02BC 120000    1100            lcall   _Volts_at_Pin
02BF AA82      1101            mov     r2,dpl
02C1 AB83      1102            mov     r3,dph
02C3 ACF0      1103            mov     r4,b
02C5 FD        1104            mov     r5,a
02C6 8A24      1105            mov     (_main_v_1_63 + 0x0004),r2
02C8 8B25      1106            mov     ((_main_v_1_63 + 0x0004) + 1),r3
02CA 8C26      1107            mov     ((_main_v_1_63 + 0x0004) + 2),r4
02CC 8D27      1108            mov     ((_main_v_1_63 + 0x0004) + 3),r5
02CE           1109   ;        EFM8_ADC.c:265: hello = get_period();
02CE 120000    1110            lcall   _get_period
02D1 858270    1111            mov     _main_hello_1_63,dpl
02D4 858371    1112            mov     (_main_hello_1_63 + 1),dph
02D7 85F072    1113            mov     (_main_hello_1_63 + 2),b
02DA F573      1114            mov     (_main_hello_1_63 + 3),a
02DC           1115   ;        EFM8_ADC.c:266: printf("Period: %f\r", (hello*2*12*1000)/SYSCLK);
02DC C070      1116            push    _main_hello_1_63
02DE C071      1117            push    (_main_hello_1_63 + 1)
02E0 C072      1118            push    (_main_hello_1_63 + 2)
02E2 C073      1119            push    (_main_hello_1_63 + 3)
02E4 908000    1120            mov     dptr,#0x8000
02E7 75F0BB    1121            mov     b,#0xBB
02EA 7446      1122            mov     a,#0x46
02EC 120000    1123            lcall   ___fsmul
02EF AE82      1124            mov     r6,dpl
02F1 AF83      1125            mov     r7,dph
02F3 AAF0      1126            mov     r2,b
02F5 FB        1127            mov     r3,a
02F6 E581      1128            mov     a,sp
02F8 24FC      1129            add     a,#0xfc
02FA F581      1130            mov     sp,a
02FC 7440      1131            mov     a,#0x40
02FE C0E0      1132            push    acc
0300 7454      1133            mov     a,#0x54
0302 C0E0      1134            push    acc
0304 7489      1135            mov     a,#0x89
0306 C0E0      1136            push    acc
0308 744C      1137            mov     a,#0x4C
030A C0E0      1138            push    acc
030C 8E82      1139            mov     dpl,r6
030E 8F83      1140            mov     dph,r7
0310 8AF0      1141            mov     b,r2
0312 EB        1142            mov     a,r3
0313 120000    1143            lcall   ___fsdiv
0316 AA82      1144            mov     r2,dpl
0318 AB83      1145            mov     r3,dph
031A ACF0      1146            mov     r4,b
031C FD        1147            mov     r5,a
031D E581      1148            mov     a,sp
031F 24FC      1149            add     a,#0xfc
0321 F581      1150            mov     sp,a
0323 C002      1151            push    ar2
0325 C003      1152            push    ar3
0327 C004      1153            push    ar4
0329 C005      1154            push    ar5
032B 7470      1155            mov     a,#__str_5
032D C0E0      1156            push    acc
032F 74BF      1157            mov     a,#(__str_5 >> 8)
0331 C0E0      1158            push    acc
0333 7480      1159            mov     a,#0x80
0335 C0E0      1160            push    acc
0337 120000    1161            lcall   _printf
033A E581      1162            mov     a,sp
033C 24F9      1163            add     a,#0xf9
033E F581      1164            mov     sp,a
0340           1165   ;        EFM8_ADC.c:270: while (Get_ADC()!=0); // Wait for the signal to be zero
0340           1166   L011001?:
0340 120000    1167            lcall   _Get_ADC
0343 E582      1168            mov     a,dpl
0345 8583F0    1169            mov     b,dph
0348 45F0      1170            orl     a,b
034A           1171   ;        EFM8_ADC.c:273: waitms(hello/2);
034A 7000      1172            jnz     L011001?
034C C0E0      1173            push    acc
034E C0E0      1174            push    acc
0350 C0E0      1175            push    acc
0352 7440      1176            mov     a,#0x40
0354 C0E0      1177            push    acc
0356 857082    1178            mov     dpl,_main_hello_1_63
0359 857183    1179            mov     dph,(_main_hello_1_63 + 1)
035C 8572F0    1180            mov     b,(_main_hello_1_63 + 2)
035F E573      1181            mov     a,(_main_hello_1_63 + 3)
0361 120000    1182            lcall   ___fsdiv
0364 AA82      1183            mov     r2,dpl
0366 AB83      1184            mov     r3,dph
0368 ACF0      1185            mov     r4,b
036A FD        1186            mov     r5,a
036B E581      1187            mov     a,sp
036D 24FC      1188            add     a,#0xfc
036F F581      1189            mov     sp,a
0371 8A82      1190            mov     dpl,r2
0373 8B83      1191            mov     dph,r3
0375 8CF0      1192            mov     b,r4
0377 ED        1193            mov     a,r5
0378 120000    1194            lcall   ___fs2uint
037B 120000    1195            lcall   _waitms
037E           1196   ;        EFM8_ADC.c:277: waitms(500);
037E 9001F4    1197            mov     dptr,#0x01F4
0381 120000    1198            lcall   _waitms
0384 020000    1199            ljmp    L011005?
0387           1200            rseg R_CSEG
0387           1201   
0000           1202            rseg R_XINIT
0000           1203   
0000           1204            rseg R_CONST
0000           1205   __str_0:
0000 1B        1206            db 0x1B
0001 5B324A    1207            db '[2J'
0004 00        1208            db 0x00
0005           1209   __str_1:
0005 41444320  1210            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1211            db 0x0A
0016 46696C65  1212            db 'File: %s'
     3A202573
001E 0A        1213            db 0x0A
001F 436F6D70  1214            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1215            db 0x0A
0030 0A        1216            db 0x0A
0031 00        1217            db 0x00
0032           1218   __str_2:
0032 45464D38  1219            db 'EFM8_ADC.c'
     5F414443
     2E63
003C 00        1220            db 0x00
003D           1221   __str_3:
003D 4D617220  1222            db 'Mar  7 2024'
     20372032
     303234
0048 00        1223            db 0x00
0049           1224   __str_4:
0049 30333A35  1225            db '03:52:21'
     323A3231
0051 00        1226            db 0x00
0052           1227   __str_5:
0052 50657269  1228            db 'Period: %f'
     6F643A20
     2566
005C 0D        1229            db 0x0D
005D 00        1230            db 0x00
005E           1231   
0003           1232            CSEG
0003           1233   
0003           1234   end
