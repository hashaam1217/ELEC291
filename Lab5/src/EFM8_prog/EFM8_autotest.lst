0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 07 02:27:10 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_autotest
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _Initial_Check
0000             28            public _Check_Pin_Zero
0000             29            public _Test_Pair
0000             30            public _dopass
0000             31            public _dofailb
0000             32            public _dofail
0000             33            public _Read_Pin
0000             34            public _Set_Pin_Zero
0000             35            public _Set_Pin_One
0000             36            public _Set_Pin_Input
0000             37            public _Set_Pin_Output
0000             38            public _countzero
0000             39            public _WaitXms
0000             40            public _Timer3us
0000             41            public __c51_external_startup
0000             42            public _Test_Pair_PARM_2
0000             43   ;--------------------------------------------------------
0000             44   ; Special Function Registers
0000             45   ;--------------------------------------------------------
0000             46   _ACC            DATA 0xe0
0000             47   _ADC0ASAH       DATA 0xb6
0000             48   _ADC0ASAL       DATA 0xb5
0000             49   _ADC0ASCF       DATA 0xa1
0000             50   _ADC0ASCT       DATA 0xc7
0000             51   _ADC0CF0        DATA 0xbc
0000             52   _ADC0CF1        DATA 0xb9
0000             53   _ADC0CF2        DATA 0xdf
0000             54   _ADC0CN0        DATA 0xe8
0000             55   _ADC0CN1        DATA 0xb2
0000             56   _ADC0CN2        DATA 0xb3
0000             57   _ADC0GTH        DATA 0xc4
0000             58   _ADC0GTL        DATA 0xc3
0000             59   _ADC0H          DATA 0xbe
0000             60   _ADC0L          DATA 0xbd
0000             61   _ADC0LTH        DATA 0xc6
0000             62   _ADC0LTL        DATA 0xc5
0000             63   _ADC0MX         DATA 0xbb
0000             64   _B              DATA 0xf0
0000             65   _CKCON0         DATA 0x8e
0000             66   _CKCON1         DATA 0xa6
0000             67   _CLEN0          DATA 0xc6
0000             68   _CLIE0          DATA 0xc7
0000             69   _CLIF0          DATA 0xe8
0000             70   _CLKSEL         DATA 0xa9
0000             71   _CLOUT0         DATA 0xd1
0000             72   _CLU0CF         DATA 0xb1
0000             73   _CLU0FN         DATA 0xaf
0000             74   _CLU0MX         DATA 0x84
0000             75   _CLU1CF         DATA 0xb3
0000             76   _CLU1FN         DATA 0xb2
0000             77   _CLU1MX         DATA 0x85
0000             78   _CLU2CF         DATA 0xb6
0000             79   _CLU2FN         DATA 0xb5
0000             80   _CLU2MX         DATA 0x91
0000             81   _CLU3CF         DATA 0xbf
0000             82   _CLU3FN         DATA 0xbe
0000             83   _CLU3MX         DATA 0xae
0000             84   _CMP0CN0        DATA 0x9b
0000             85   _CMP0CN1        DATA 0x99
0000             86   _CMP0MD         DATA 0x9d
0000             87   _CMP0MX         DATA 0x9f
0000             88   _CMP1CN0        DATA 0xbf
0000             89   _CMP1CN1        DATA 0xac
0000             90   _CMP1MD         DATA 0xab
0000             91   _CMP1MX         DATA 0xaa
0000             92   _CRC0CN0        DATA 0xce
0000             93   _CRC0CN1        DATA 0x86
0000             94   _CRC0CNT        DATA 0xd3
0000             95   _CRC0DAT        DATA 0xcb
0000             96   _CRC0FLIP       DATA 0xcf
0000             97   _CRC0IN         DATA 0xca
0000             98   _CRC0ST         DATA 0xd2
0000             99   _DAC0CF0        DATA 0x91
0000            100   _DAC0CF1        DATA 0x92
0000            101   _DAC0H          DATA 0x85
0000            102   _DAC0L          DATA 0x84
0000            103   _DAC1CF0        DATA 0x93
0000            104   _DAC1CF1        DATA 0x94
0000            105   _DAC1H          DATA 0x8a
0000            106   _DAC1L          DATA 0x89
0000            107   _DAC2CF0        DATA 0x95
0000            108   _DAC2CF1        DATA 0x96
0000            109   _DAC2H          DATA 0x8c
0000            110   _DAC2L          DATA 0x8b
0000            111   _DAC3CF0        DATA 0x9a
0000            112   _DAC3CF1        DATA 0x9c
0000            113   _DAC3H          DATA 0x8e
0000            114   _DAC3L          DATA 0x8d
0000            115   _DACGCF0        DATA 0x88
0000            116   _DACGCF1        DATA 0x98
0000            117   _DACGCF2        DATA 0xa2
0000            118   _DERIVID        DATA 0xad
0000            119   _DEVICEID       DATA 0xb5
0000            120   _DPH            DATA 0x83
0000            121   _DPL            DATA 0x82
0000            122   _EIE1           DATA 0xe6
0000            123   _EIE2           DATA 0xf3
0000            124   _EIP1           DATA 0xbb
0000            125   _EIP1H          DATA 0xee
0000            126   _EIP2           DATA 0xed
0000            127   _EIP2H          DATA 0xf6
0000            128   _EMI0CN         DATA 0xe7
0000            129   _FLKEY          DATA 0xb7
0000            130   _HFO0CAL        DATA 0xc7
0000            131   _HFO1CAL        DATA 0xd6
0000            132   _HFOCN          DATA 0xef
0000            133   _I2C0ADM        DATA 0xff
0000            134   _I2C0CN0        DATA 0xba
0000            135   _I2C0DIN        DATA 0xbc
0000            136   _I2C0DOUT       DATA 0xbb
0000            137   _I2C0FCN0       DATA 0xad
0000            138   _I2C0FCN1       DATA 0xab
0000            139   _I2C0FCT        DATA 0xf5
0000            140   _I2C0SLAD       DATA 0xbd
0000            141   _I2C0STAT       DATA 0xb9
0000            142   _IE             DATA 0xa8
0000            143   _IP             DATA 0xb8
0000            144   _IPH            DATA 0xf2
0000            145   _IT01CF         DATA 0xe4
0000            146   _LFO0CN         DATA 0xb1
0000            147   _P0             DATA 0x80
0000            148   _P0MASK         DATA 0xfe
0000            149   _P0MAT          DATA 0xfd
0000            150   _P0MDIN         DATA 0xf1
0000            151   _P0MDOUT        DATA 0xa4
0000            152   _P0SKIP         DATA 0xd4
0000            153   _P1             DATA 0x90
0000            154   _P1MASK         DATA 0xee
0000            155   _P1MAT          DATA 0xed
0000            156   _P1MDIN         DATA 0xf2
0000            157   _P1MDOUT        DATA 0xa5
0000            158   _P1SKIP         DATA 0xd5
0000            159   _P2             DATA 0xa0
0000            160   _P2MASK         DATA 0xfc
0000            161   _P2MAT          DATA 0xfb
0000            162   _P2MDIN         DATA 0xf3
0000            163   _P2MDOUT        DATA 0xa6
0000            164   _P2SKIP         DATA 0xcc
0000            165   _P3             DATA 0xb0
0000            166   _P3MDIN         DATA 0xf4
0000            167   _P3MDOUT        DATA 0x9c
0000            168   _PCA0CENT       DATA 0x9e
0000            169   _PCA0CLR        DATA 0x9c
0000            170   _PCA0CN0        DATA 0xd8
0000            171   _PCA0CPH0       DATA 0xfc
0000            172   _PCA0CPH1       DATA 0xea
0000            173   _PCA0CPH2       DATA 0xec
0000            174   _PCA0CPH3       DATA 0xf5
0000            175   _PCA0CPH4       DATA 0x85
0000            176   _PCA0CPH5       DATA 0xde
0000            177   _PCA0CPL0       DATA 0xfb
0000            178   _PCA0CPL1       DATA 0xe9
0000            179   _PCA0CPL2       DATA 0xeb
0000            180   _PCA0CPL3       DATA 0xf4
0000            181   _PCA0CPL4       DATA 0x84
0000            182   _PCA0CPL5       DATA 0xdd
0000            183   _PCA0CPM0       DATA 0xda
0000            184   _PCA0CPM1       DATA 0xdb
0000            185   _PCA0CPM2       DATA 0xdc
0000            186   _PCA0CPM3       DATA 0xae
0000            187   _PCA0CPM4       DATA 0xaf
0000            188   _PCA0CPM5       DATA 0xcc
0000            189   _PCA0H          DATA 0xfa
0000            190   _PCA0L          DATA 0xf9
0000            191   _PCA0MD         DATA 0xd9
0000            192   _PCA0POL        DATA 0x96
0000            193   _PCA0PWM        DATA 0xf7
0000            194   _PCON0          DATA 0x87
0000            195   _PCON1          DATA 0xcd
0000            196   _PFE0CN         DATA 0xc1
0000            197   _PRTDRV         DATA 0xf6
0000            198   _PSCTL          DATA 0x8f
0000            199   _PSTAT0         DATA 0xaa
0000            200   _PSW            DATA 0xd0
0000            201   _REF0CN         DATA 0xd1
0000            202   _REG0CN         DATA 0xc9
0000            203   _REVID          DATA 0xb6
0000            204   _RSTSRC         DATA 0xef
0000            205   _SBCON1         DATA 0x94
0000            206   _SBRLH1         DATA 0x96
0000            207   _SBRLL1         DATA 0x95
0000            208   _SBUF           DATA 0x99
0000            209   _SBUF0          DATA 0x99
0000            210   _SBUF1          DATA 0x92
0000            211   _SCON           DATA 0x98
0000            212   _SCON0          DATA 0x98
0000            213   _SCON1          DATA 0xc8
0000            214   _SFRPAGE        DATA 0xa7
0000            215   _SFRPGCN        DATA 0xbc
0000            216   _SFRSTACK       DATA 0xd7
0000            217   _SMB0ADM        DATA 0xd6
0000            218   _SMB0ADR        DATA 0xd7
0000            219   _SMB0CF         DATA 0xc1
0000            220   _SMB0CN0        DATA 0xc0
0000            221   _SMB0DAT        DATA 0xc2
0000            222   _SMB0FCN0       DATA 0xc3
0000            223   _SMB0FCN1       DATA 0xc4
0000            224   _SMB0FCT        DATA 0xef
0000            225   _SMB0RXLN       DATA 0xc5
0000            226   _SMB0TC         DATA 0xac
0000            227   _SMOD1          DATA 0x93
0000            228   _SP             DATA 0x81
0000            229   _SPI0CFG        DATA 0xa1
0000            230   _SPI0CKR        DATA 0xa2
0000            231   _SPI0CN0        DATA 0xf8
0000            232   _SPI0DAT        DATA 0xa3
0000            233   _SPI0FCN0       DATA 0x9a
0000            234   _SPI0FCN1       DATA 0x9b
0000            235   _SPI0FCT        DATA 0xf7
0000            236   _SPI0PCF        DATA 0xdf
0000            237   _TCON           DATA 0x88
0000            238   _TH0            DATA 0x8c
0000            239   _TH1            DATA 0x8d
0000            240   _TL0            DATA 0x8a
0000            241   _TL1            DATA 0x8b
0000            242   _TMOD           DATA 0x89
0000            243   _TMR2CN0        DATA 0xc8
0000            244   _TMR2CN1        DATA 0xfd
0000            245   _TMR2H          DATA 0xcf
0000            246   _TMR2L          DATA 0xce
0000            247   _TMR2RLH        DATA 0xcb
0000            248   _TMR2RLL        DATA 0xca
0000            249   _TMR3CN0        DATA 0x91
0000            250   _TMR3CN1        DATA 0xfe
0000            251   _TMR3H          DATA 0x95
0000            252   _TMR3L          DATA 0x94
0000            253   _TMR3RLH        DATA 0x93
0000            254   _TMR3RLL        DATA 0x92
0000            255   _TMR4CN0        DATA 0x98
0000            256   _TMR4CN1        DATA 0xff
0000            257   _TMR4H          DATA 0xa5
0000            258   _TMR4L          DATA 0xa4
0000            259   _TMR4RLH        DATA 0xa3
0000            260   _TMR4RLL        DATA 0xa2
0000            261   _TMR5CN0        DATA 0xc0
0000            262   _TMR5CN1        DATA 0xf1
0000            263   _TMR5H          DATA 0xd5
0000            264   _TMR5L          DATA 0xd4
0000            265   _TMR5RLH        DATA 0xd3
0000            266   _TMR5RLL        DATA 0xd2
0000            267   _UART0PCF       DATA 0xd9
0000            268   _UART1FCN0      DATA 0x9d
0000            269   _UART1FCN1      DATA 0xd8
0000            270   _UART1FCT       DATA 0xfa
0000            271   _UART1LIN       DATA 0x9e
0000            272   _UART1PCF       DATA 0xda
0000            273   _VDM0CN         DATA 0xff
0000            274   _WDTCN          DATA 0x97
0000            275   _XBR0           DATA 0xe1
0000            276   _XBR1           DATA 0xe2
0000            277   _XBR2           DATA 0xe3
0000            278   _XOSC0CN        DATA 0x86
0000            279   _DPTR           DATA 0x8382
0000            280   _TMR2RL         DATA 0xcbca
0000            281   _TMR3RL         DATA 0x9392
0000            282   _TMR4RL         DATA 0xa3a2
0000            283   _TMR5RL         DATA 0xd3d2
0000            284   _TMR0           DATA 0x8c8a
0000            285   _TMR1           DATA 0x8d8b
0000            286   _TMR2           DATA 0xcfce
0000            287   _TMR3           DATA 0x9594
0000            288   _TMR4           DATA 0xa5a4
0000            289   _TMR5           DATA 0xd5d4
0000            290   _SBRL1          DATA 0x9695
0000            291   _PCA0           DATA 0xfaf9
0000            292   _PCA0CP0        DATA 0xfcfb
0000            293   _PCA0CP1        DATA 0xeae9
0000            294   _PCA0CP2        DATA 0xeceb
0000            295   _PCA0CP3        DATA 0xf5f4
0000            296   _PCA0CP4        DATA 0x8584
0000            297   _PCA0CP5        DATA 0xdedd
0000            298   _ADC0ASA        DATA 0xb6b5
0000            299   _ADC0GT         DATA 0xc4c3
0000            300   _ADC0           DATA 0xbebd
0000            301   _ADC0LT         DATA 0xc6c5
0000            302   _DAC0           DATA 0x8584
0000            303   _DAC1           DATA 0x8a89
0000            304   _DAC2           DATA 0x8c8b
0000            305   _DAC3           DATA 0x8e8d
0000            306   ;--------------------------------------------------------
0000            307   ; special function bits
0000            308   ;--------------------------------------------------------
0000            309   _ACC_0          BIT 0xe0
0000            310   _ACC_1          BIT 0xe1
0000            311   _ACC_2          BIT 0xe2
0000            312   _ACC_3          BIT 0xe3
0000            313   _ACC_4          BIT 0xe4
0000            314   _ACC_5          BIT 0xe5
0000            315   _ACC_6          BIT 0xe6
0000            316   _ACC_7          BIT 0xe7
0000            317   _TEMPE          BIT 0xe8
0000            318   _ADGN0          BIT 0xe9
0000            319   _ADGN1          BIT 0xea
0000            320   _ADWINT         BIT 0xeb
0000            321   _ADBUSY         BIT 0xec
0000            322   _ADINT          BIT 0xed
0000            323   _IPOEN          BIT 0xee
0000            324   _ADEN           BIT 0xef
0000            325   _B_0            BIT 0xf0
0000            326   _B_1            BIT 0xf1
0000            327   _B_2            BIT 0xf2
0000            328   _B_3            BIT 0xf3
0000            329   _B_4            BIT 0xf4
0000            330   _B_5            BIT 0xf5
0000            331   _B_6            BIT 0xf6
0000            332   _B_7            BIT 0xf7
0000            333   _C0FIF          BIT 0xe8
0000            334   _C0RIF          BIT 0xe9
0000            335   _C1FIF          BIT 0xea
0000            336   _C1RIF          BIT 0xeb
0000            337   _C2FIF          BIT 0xec
0000            338   _C2RIF          BIT 0xed
0000            339   _C3FIF          BIT 0xee
0000            340   _C3RIF          BIT 0xef
0000            341   _D1SRC0         BIT 0x88
0000            342   _D1SRC1         BIT 0x89
0000            343   _D1AMEN         BIT 0x8a
0000            344   _D01REFSL       BIT 0x8b
0000            345   _D3SRC0         BIT 0x8c
0000            346   _D3SRC1         BIT 0x8d
0000            347   _D3AMEN         BIT 0x8e
0000            348   _D23REFSL       BIT 0x8f
0000            349   _D0UDIS         BIT 0x98
0000            350   _D1UDIS         BIT 0x99
0000            351   _D2UDIS         BIT 0x9a
0000            352   _D3UDIS         BIT 0x9b
0000            353   _EX0            BIT 0xa8
0000            354   _ET0            BIT 0xa9
0000            355   _EX1            BIT 0xaa
0000            356   _ET1            BIT 0xab
0000            357   _ES0            BIT 0xac
0000            358   _ET2            BIT 0xad
0000            359   _ESPI0          BIT 0xae
0000            360   _EA             BIT 0xaf
0000            361   _PX0            BIT 0xb8
0000            362   _PT0            BIT 0xb9
0000            363   _PX1            BIT 0xba
0000            364   _PT1            BIT 0xbb
0000            365   _PS0            BIT 0xbc
0000            366   _PT2            BIT 0xbd
0000            367   _PSPI0          BIT 0xbe
0000            368   _P0_0           BIT 0x80
0000            369   _P0_1           BIT 0x81
0000            370   _P0_2           BIT 0x82
0000            371   _P0_3           BIT 0x83
0000            372   _P0_4           BIT 0x84
0000            373   _P0_5           BIT 0x85
0000            374   _P0_6           BIT 0x86
0000            375   _P0_7           BIT 0x87
0000            376   _P1_0           BIT 0x90
0000            377   _P1_1           BIT 0x91
0000            378   _P1_2           BIT 0x92
0000            379   _P1_3           BIT 0x93
0000            380   _P1_4           BIT 0x94
0000            381   _P1_5           BIT 0x95
0000            382   _P1_6           BIT 0x96
0000            383   _P1_7           BIT 0x97
0000            384   _P2_0           BIT 0xa0
0000            385   _P2_1           BIT 0xa1
0000            386   _P2_2           BIT 0xa2
0000            387   _P2_3           BIT 0xa3
0000            388   _P2_4           BIT 0xa4
0000            389   _P2_5           BIT 0xa5
0000            390   _P2_6           BIT 0xa6
0000            391   _P3_0           BIT 0xb0
0000            392   _P3_1           BIT 0xb1
0000            393   _P3_2           BIT 0xb2
0000            394   _P3_3           BIT 0xb3
0000            395   _P3_4           BIT 0xb4
0000            396   _P3_7           BIT 0xb7
0000            397   _CCF0           BIT 0xd8
0000            398   _CCF1           BIT 0xd9
0000            399   _CCF2           BIT 0xda
0000            400   _CCF3           BIT 0xdb
0000            401   _CCF4           BIT 0xdc
0000            402   _CCF5           BIT 0xdd
0000            403   _CR             BIT 0xde
0000            404   _CF             BIT 0xdf
0000            405   _PARITY         BIT 0xd0
0000            406   _F1             BIT 0xd1
0000            407   _OV             BIT 0xd2
0000            408   _RS0            BIT 0xd3
0000            409   _RS1            BIT 0xd4
0000            410   _F0             BIT 0xd5
0000            411   _AC             BIT 0xd6
0000            412   _CY             BIT 0xd7
0000            413   _RI             BIT 0x98
0000            414   _TI             BIT 0x99
0000            415   _RB8            BIT 0x9a
0000            416   _TB8            BIT 0x9b
0000            417   _REN            BIT 0x9c
0000            418   _CE             BIT 0x9d
0000            419   _SMODE          BIT 0x9e
0000            420   _RI1            BIT 0xc8
0000            421   _TI1            BIT 0xc9
0000            422   _RBX1           BIT 0xca
0000            423   _TBX1           BIT 0xcb
0000            424   _REN1           BIT 0xcc
0000            425   _PERR1          BIT 0xcd
0000            426   _OVR1           BIT 0xce
0000            427   _SI             BIT 0xc0
0000            428   _ACK            BIT 0xc1
0000            429   _ARBLOST        BIT 0xc2
0000            430   _ACKRQ          BIT 0xc3
0000            431   _STO            BIT 0xc4
0000            432   _STA            BIT 0xc5
0000            433   _TXMODE         BIT 0xc6
0000            434   _MASTER         BIT 0xc7
0000            435   _SPIEN          BIT 0xf8
0000            436   _TXNF           BIT 0xf9
0000            437   _NSSMD0         BIT 0xfa
0000            438   _NSSMD1         BIT 0xfb
0000            439   _RXOVRN         BIT 0xfc
0000            440   _MODF           BIT 0xfd
0000            441   _WCOL           BIT 0xfe
0000            442   _SPIF           BIT 0xff
0000            443   _IT0            BIT 0x88
0000            444   _IE0            BIT 0x89
0000            445   _IT1            BIT 0x8a
0000            446   _IE1            BIT 0x8b
0000            447   _TR0            BIT 0x8c
0000            448   _TF0            BIT 0x8d
0000            449   _TR1            BIT 0x8e
0000            450   _TF1            BIT 0x8f
0000            451   _T2XCLK0        BIT 0xc8
0000            452   _T2XCLK1        BIT 0xc9
0000            453   _TR2            BIT 0xca
0000            454   _T2SPLIT        BIT 0xcb
0000            455   _TF2CEN         BIT 0xcc
0000            456   _TF2LEN         BIT 0xcd
0000            457   _TF2L           BIT 0xce
0000            458   _TF2H           BIT 0xcf
0000            459   _T4XCLK0        BIT 0x98
0000            460   _T4XCLK1        BIT 0x99
0000            461   _TR4            BIT 0x9a
0000            462   _T4SPLIT        BIT 0x9b
0000            463   _TF4CEN         BIT 0x9c
0000            464   _TF4LEN         BIT 0x9d
0000            465   _TF4L           BIT 0x9e
0000            466   _TF4H           BIT 0x9f
0000            467   _T5XCLK0        BIT 0xc0
0000            468   _T5XCLK1        BIT 0xc1
0000            469   _TR5            BIT 0xc2
0000            470   _T5SPLIT        BIT 0xc3
0000            471   _TF5CEN         BIT 0xc4
0000            472   _TF5LEN         BIT 0xc5
0000            473   _TF5L           BIT 0xc6
0000            474   _TF5H           BIT 0xc7
0000            475   _RIE            BIT 0xd8
0000            476   _RXTO0          BIT 0xd9
0000            477   _RXTO1          BIT 0xda
0000            478   _RFRQ           BIT 0xdb
0000            479   _TIE            BIT 0xdc
0000            480   _TXHOLD         BIT 0xdd
0000            481   _TXNF1          BIT 0xde
0000            482   _TFRQ           BIT 0xdf
0000            483   ;--------------------------------------------------------
0000            484   ; overlayable register banks
0000            485   ;--------------------------------------------------------
0000            486            rbank0 segment data overlay
0000            487   ;--------------------------------------------------------
0000            488   ; internal ram data
0000            489   ;--------------------------------------------------------
0000            490            rseg R_DSEG
0000            491   _Test_Pair_PARM_2:
0000            492            ds 1
0001            493   ;--------------------------------------------------------
0001            494   ; overlayable items in internal ram 
0001            495   ;--------------------------------------------------------
0000            496            rseg    R_OSEG
0000            497            rseg    R_OSEG
0000            498            rseg    R_OSEG
0000            499            rseg    R_OSEG
0000            500            rseg    R_OSEG
0000            501            rseg    R_OSEG
0000            502            rseg    R_OSEG
0000            503   ;--------------------------------------------------------
0000            504   ; indirectly addressable internal ram data
0000            505   ;--------------------------------------------------------
0000            506            rseg R_ISEG
0000            507   ;--------------------------------------------------------
0000            508   ; absolute internal ram data
0000            509   ;--------------------------------------------------------
0000            510            DSEG
0000            511   ;--------------------------------------------------------
0000            512   ; bit data
0000            513   ;--------------------------------------------------------
0000            514            rseg R_BSEG
0000            515   ;--------------------------------------------------------
0000            516   ; paged external ram data
0000            517   ;--------------------------------------------------------
0000            518            rseg R_PSEG
0000            519   ;--------------------------------------------------------
0000            520   ; external ram data
0000            521   ;--------------------------------------------------------
0000            522            rseg R_XSEG
0000            523   ;--------------------------------------------------------
0000            524   ; absolute external ram data
0000            525   ;--------------------------------------------------------
0000            526            XSEG
0000            527   ;--------------------------------------------------------
0000            528   ; external initialized ram data
0000            529   ;--------------------------------------------------------
0000            530            rseg R_IXSEG
0000            531            rseg R_HOME
0000            532            rseg R_GSINIT
0000            533            rseg R_CSEG
0000            534   ;--------------------------------------------------------
0000            535   ; Reset entry point and interrupt vectors
0000            536   ;--------------------------------------------------------
0000            537            CSEG at 0x0000
0000 020000     538            ljmp    _crt0
0003            539   ;--------------------------------------------------------
0003            540   ; global & static initialisations
0003            541   ;--------------------------------------------------------
0000            542            rseg R_HOME
0000            543            rseg R_GSINIT
0000            544            rseg R_GSINIT
0000            545   ;--------------------------------------------------------
0000            546   ; data variables initialization
0000            547   ;--------------------------------------------------------
0000            548            rseg R_DINIT
0000            549            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            550   ;--------------------------------------------------------
0000            551   ; code
0000            552   ;--------------------------------------------------------
0000            553            rseg R_CSEG
0000            554   ;------------------------------------------------------------
0000            555   ;Allocation info for local variables in function '_c51_external_startup'
0000            556   ;------------------------------------------------------------
0000            557   ;------------------------------------------------------------
0000            558   ;        EFM8_autotest.c:27: char _c51_external_startup (void)
0000            559   ;        -----------------------------------------
0000            560   ;         function _c51_external_startup
0000            561   ;        -----------------------------------------
0000            562   __c51_external_startup:
0000            563            using   0
0000            564   ;        EFM8_autotest.c:30: SFRPAGE = 0x00;
0000 75A700     565            mov     _SFRPAGE,#0x00
0003            566   ;        EFM8_autotest.c:31: WDTCN = 0xDE; //First key
0003 7597DE     567            mov     _WDTCN,#0xDE
0006            568   ;        EFM8_autotest.c:32: WDTCN = 0xAD; //Second key
0006 7597AD     569            mov     _WDTCN,#0xAD
0009            570   ;        EFM8_autotest.c:35: SFRPAGE = 0x10;
0009 75A710     571            mov     _SFRPAGE,#0x10
000C            572   ;        EFM8_autotest.c:36: PFE0CN  = 0x10; // SYSCLK < 50 MHz.
000C 75C110     573            mov     _PFE0CN,#0x10
000F            574   ;        EFM8_autotest.c:37: SFRPAGE = 0x00;
000F 75A700     575            mov     _SFRPAGE,#0x00
0012            576   ;        EFM8_autotest.c:54: CLKSEL = 0x00;
0012 75A900     577            mov     _CLKSEL,#0x00
0015            578   ;        EFM8_autotest.c:55: CLKSEL = 0x00;
0015 75A900     579            mov     _CLKSEL,#0x00
0018            580   ;        EFM8_autotest.c:56: while ((CLKSEL & 0x80) == 0);
0018            581   L002001?:
0018 E5A9       582            mov     a,_CLKSEL
001A 30E7B8     583            jnb     acc.7,L002001?
001D            584   ;        EFM8_autotest.c:57: CLKSEL = 0x07;
001D 75A907     585            mov     _CLKSEL,#0x07
0020            586   ;        EFM8_autotest.c:58: CLKSEL = 0x07;
0020 75A907     587            mov     _CLKSEL,#0x07
0023            588   ;        EFM8_autotest.c:59: while ((CLKSEL & 0x80) == 0);
0023            589   L002004?:
0023 E5A9       590            mov     a,_CLKSEL
0025 30E738     591            jnb     acc.7,L002004?
0028            592   ;        EFM8_autotest.c:72: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
0028 43A410     593            orl     _P0MDOUT,#0x10
002B            594   ;        EFM8_autotest.c:73: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
002B 75E101     595            mov     _XBR0,#0x01
002E            596   ;        EFM8_autotest.c:74: XBR1     = 0X00;
002E 75E200     597            mov     _XBR1,#0x00
0031            598   ;        EFM8_autotest.c:75: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0031 75E340     599            mov     _XBR2,#0x40
0034            600   ;        EFM8_autotest.c:81: SCON0 = 0x10;
0034 759810     601            mov     _SCON0,#0x10
0037            602   ;        EFM8_autotest.c:82: CKCON0 |= 0b_0000_1000 ; // Timer 1 uses the system clock.
0037 438E08     603            orl     _CKCON0,#0x08
003A            604   ;        EFM8_autotest.c:83: TH1 = 0x100-((SYSCLK/BAUDRATE)/2L);
003A 758D30     605            mov     _TH1,#0x30
003D            606   ;        EFM8_autotest.c:84: TL1 = TH1;      // Init Timer1
003D 858D8B     607            mov     _TL1,_TH1
0040            608   ;        EFM8_autotest.c:85: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0040 53890F     609            anl     _TMOD,#0x0F
0043            610   ;        EFM8_autotest.c:86: TMOD |=  0x20;                       
0043 438920     611            orl     _TMOD,#0x20
0046            612   ;        EFM8_autotest.c:87: TR1 = 1; // START Timer1
0046 D28E       613            setb    _TR1
0048            614   ;        EFM8_autotest.c:88: TI = 1;  // Indicate TX0 ready
0048 D299       615            setb    _TI
004A            616   ;        EFM8_autotest.c:90: return 0;
004A 758200     617            mov     dpl,#0x00
004D 22         618            ret
004E            619   ;------------------------------------------------------------
004E            620   ;Allocation info for local variables in function 'Timer3us'
004E            621   ;------------------------------------------------------------
004E            622   ;us                        Allocated to registers r2 
004E            623   ;i                         Allocated to registers r3 
004E            624   ;------------------------------------------------------------
004E            625   ;        EFM8_autotest.c:95: void Timer3us(unsigned char us)
004E            626   ;        -----------------------------------------
004E            627   ;         function Timer3us
004E            628   ;        -----------------------------------------
004E            629   _Timer3us:
004E AA82       630            mov     r2,dpl
0050            631   ;        EFM8_autotest.c:100: CKCON0|=0b_0100_0000;
0050 438E40     632            orl     _CKCON0,#0x40
0053            633   ;        EFM8_autotest.c:102: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0053 7592D0     634            mov     _TMR3RL,#0xD0
0056 7593FF     635            mov     (_TMR3RL >> 8),#0xFF
0059            636   ;        EFM8_autotest.c:103: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0059 859294     637            mov     _TMR3,_TMR3RL
005C 859395     638            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
005F            639   ;        EFM8_autotest.c:105: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
005F 759104     640            mov     _TMR3CN0,#0x04
0062            641   ;        EFM8_autotest.c:106: for (i = 0; i < us; i++)       // Count <us> overflows
0062 7B00       642            mov     r3,#0x00
0064            643   L003004?:
0064 C3         644            clr     c
0065 EB         645            mov     a,r3
0066 9A         646            subb    a,r2
0067 5000       647            jnc     L003007?
0069            648   ;        EFM8_autotest.c:108: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0069            649   L003001?:
0069 E591       650            mov     a,_TMR3CN0
006B 30E738     651            jnb     acc.7,L003001?
006E            652   ;        EFM8_autotest.c:109: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
006E 53917F     653            anl     _TMR3CN0,#0x7F
0071            654   ;        EFM8_autotest.c:106: for (i = 0; i < us; i++)       // Count <us> overflows
0071 0B         655            inc     r3
0072 8000       656            sjmp    L003004?
0074            657   L003007?:
0074            658   ;        EFM8_autotest.c:111: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0074 759100     659            mov     _TMR3CN0,#0x00
0077 22         660            ret
0078            661   ;------------------------------------------------------------
0078            662   ;Allocation info for local variables in function 'WaitXms'
0078            663   ;------------------------------------------------------------
0078            664   ;ms                        Allocated to registers r2 r3 
0078            665   ;j                         Allocated to registers r2 r3 
0078            666   ;------------------------------------------------------------
0078            667   ;        EFM8_autotest.c:114: void WaitXms (unsigned int ms)
0078            668   ;        -----------------------------------------
0078            669   ;         function WaitXms
0078            670   ;        -----------------------------------------
0078            671   _WaitXms:
0078 AA82       672            mov     r2,dpl
007A AB83       673            mov     r3,dph
007C            674   ;        EFM8_autotest.c:117: for(j=ms; j!=0; j--)
007C            675   L004001?:
007C BA00F8     676            cjne    r2,#0x00,L004010?
007F BB00F8     677            cjne    r3,#0x00,L004010?
0082 22         678            ret
0083            679   L004010?:
0083            680   ;        EFM8_autotest.c:119: Timer3us(249);
0083 7582F9     681            mov     dpl,#0xF9
0086 C002       682            push    ar2
0088 C003       683            push    ar3
008A 120000     684            lcall   _Timer3us
008D            685   ;        EFM8_autotest.c:120: Timer3us(249);
008D 7582F9     686            mov     dpl,#0xF9
0090 120000     687            lcall   _Timer3us
0093            688   ;        EFM8_autotest.c:121: Timer3us(249);
0093 7582F9     689            mov     dpl,#0xF9
0096 120000     690            lcall   _Timer3us
0099            691   ;        EFM8_autotest.c:122: Timer3us(250);
0099 7582FA     692            mov     dpl,#0xFA
009C 120000     693            lcall   _Timer3us
009F D003       694            pop     ar3
00A1 D002       695            pop     ar2
00A3            696   ;        EFM8_autotest.c:117: for(j=ms; j!=0; j--)
00A3 1A         697            dec     r2
00A4 BAFF38     698            cjne    r2,#0xff,L004011?
00A7 1B         699            dec     r3
00A8            700   L004011?:
00A8 8000       701            sjmp    L004001?
00AA            702   ;------------------------------------------------------------
00AA            703   ;Allocation info for local variables in function 'countzero'
00AA            704   ;------------------------------------------------------------
00AA            705   ;j                         Allocated to registers r2 
00AA            706   ;------------------------------------------------------------
00AA            707   ;        EFM8_autotest.c:126: unsigned char countzero(void)
00AA            708   ;        -----------------------------------------
00AA            709   ;         function countzero
00AA            710   ;        -----------------------------------------
00AA            711   _countzero:
00AA            712   ;        EFM8_autotest.c:130: j=0;
00AA 7A00       713            mov     r2,#0x00
00AC            714   ;        EFM8_autotest.c:132: if (P0_0==0) j++;
00AC 208078     715            jb      _P0_0,L005002?
00AF 7A01       716            mov     r2,#0x01
00B1            717   L005002?:
00B1            718   ;        EFM8_autotest.c:133: if (P0_1==0) j++;
00B1 2081B8     719            jb      _P0_1,L005004?
00B4 0A         720            inc     r2
00B5            721   L005004?:
00B5            722   ;        EFM8_autotest.c:134: if (P0_2==0) j++;
00B5 2082F8     723            jb      _P0_2,L005006?
00B8 0A         724            inc     r2
00B9            725   L005006?:
00B9            726   ;        EFM8_autotest.c:135: if (P0_3==0) j++;
00B9 208338     727            jb      _P0_3,L005008?
00BC 0A         728            inc     r2
00BD            729   L005008?:
00BD            730   ;        EFM8_autotest.c:138: if (P0_6==0) j++;
00BD 208678     731            jb      _P0_6,L005010?
00C0 0A         732            inc     r2
00C1            733   L005010?:
00C1            734   ;        EFM8_autotest.c:139: if (P0_7==0) j++;
00C1 2087B8     735            jb      _P0_7,L005012?
00C4 0A         736            inc     r2
00C5            737   L005012?:
00C5            738   ;        EFM8_autotest.c:141: if (P1_0==0) j++;
00C5 2090F8     739            jb      _P1_0,L005014?
00C8 0A         740            inc     r2
00C9            741   L005014?:
00C9            742   ;        EFM8_autotest.c:142: if (P1_1==0) j++;
00C9 209138     743            jb      _P1_1,L005016?
00CC 0A         744            inc     r2
00CD            745   L005016?:
00CD            746   ;        EFM8_autotest.c:143: if (P1_2==0) j++;
00CD 209278     747            jb      _P1_2,L005018?
00D0 0A         748            inc     r2
00D1            749   L005018?:
00D1            750   ;        EFM8_autotest.c:144: if (P1_3==0) j++;
00D1 2093B8     751            jb      _P1_3,L005020?
00D4 0A         752            inc     r2
00D5            753   L005020?:
00D5            754   ;        EFM8_autotest.c:145: if (P1_4==0) j++;
00D5 2094F8     755            jb      _P1_4,L005022?
00D8 0A         756            inc     r2
00D9            757   L005022?:
00D9            758   ;        EFM8_autotest.c:146: if (P1_5==0) j++;
00D9 209538     759            jb      _P1_5,L005024?
00DC 0A         760            inc     r2
00DD            761   L005024?:
00DD            762   ;        EFM8_autotest.c:147: if (P1_6==0) j++;
00DD 209678     763            jb      _P1_6,L005026?
00E0 0A         764            inc     r2
00E1            765   L005026?:
00E1            766   ;        EFM8_autotest.c:148: if (P1_7==0) j++;
00E1 2097B8     767            jb      _P1_7,L005028?
00E4 0A         768            inc     r2
00E5            769   L005028?:
00E5            770   ;        EFM8_autotest.c:150: if (P2_0==0) j++;
00E5 20A0F8     771            jb      _P2_0,L005030?
00E8 0A         772            inc     r2
00E9            773   L005030?:
00E9            774   ;        EFM8_autotest.c:151: if (P2_1==0) j++;
00E9 20A138     775            jb      _P2_1,L005032?
00EC 0A         776            inc     r2
00ED            777   L005032?:
00ED            778   ;        EFM8_autotest.c:152: if (P2_2==0) j++;
00ED 20A278     779            jb      _P2_2,L005034?
00F0 0A         780            inc     r2
00F1            781   L005034?:
00F1            782   ;        EFM8_autotest.c:153: if (P2_3==0) j++;
00F1 20A3B8     783            jb      _P2_3,L005036?
00F4 0A         784            inc     r2
00F5            785   L005036?:
00F5            786   ;        EFM8_autotest.c:154: if (P2_4==0) j++;
00F5 20A4F8     787            jb      _P2_4,L005038?
00F8 0A         788            inc     r2
00F9            789   L005038?:
00F9            790   ;        EFM8_autotest.c:155: if (P2_5==0) j++;
00F9 20A538     791            jb      _P2_5,L005040?
00FC 0A         792            inc     r2
00FD            793   L005040?:
00FD            794   ;        EFM8_autotest.c:156: if (P2_6==0) j++;
00FD 20A678     795            jb      _P2_6,L005042?
0100 0A         796            inc     r2
0101            797   L005042?:
0101            798   ;        EFM8_autotest.c:158: if (P3_0==0) j++;
0101 20B0B8     799            jb      _P3_0,L005044?
0104 0A         800            inc     r2
0105            801   L005044?:
0105            802   ;        EFM8_autotest.c:159: if (P3_1==0) j++;
0105 20B1F8     803            jb      _P3_1,L005046?
0108 0A         804            inc     r2
0109            805   L005046?:
0109            806   ;        EFM8_autotest.c:160: if (P3_2==0) j++;
0109 20B238     807            jb      _P3_2,L005048?
010C 0A         808            inc     r2
010D            809   L005048?:
010D            810   ;        EFM8_autotest.c:161: if (P3_3==0) j++;
010D 20B378     811            jb      _P3_3,L005050?
0110 0A         812            inc     r2
0111            813   L005050?:
0111            814   ;        EFM8_autotest.c:162: if (P3_7==0) j++;
0111 20B7B8     815            jb      _P3_7,L005052?
0114 0A         816            inc     r2
0115            817   L005052?:
0115            818   ;        EFM8_autotest.c:164: return j;
0115 8A82       819            mov     dpl,r2
0117 22         820            ret
0118            821   ;------------------------------------------------------------
0118            822   ;Allocation info for local variables in function 'Set_Pin_Output'
0118            823   ;------------------------------------------------------------
0118            824   ;pin                       Allocated to registers r2 
0118            825   ;mask                      Allocated to registers r3 
0118            826   ;------------------------------------------------------------
0118            827   ;        EFM8_autotest.c:167: void Set_Pin_Output (unsigned char pin)
0118            828   ;        -----------------------------------------
0118            829   ;         function Set_Pin_Output
0118            830   ;        -----------------------------------------
0118            831   _Set_Pin_Output:
0118 AA82       832            mov     r2,dpl
011A            833   ;        EFM8_autotest.c:171: mask=(1<<(pin&0x7));
011A 7407       834            mov     a,#0x07
011C 5A         835            anl     a,r2
011D F5F0       836            mov     b,a
011F 05F0       837            inc     b
0121 7401       838            mov     a,#0x01
0123 8000       839            sjmp    L006011?
0125            840   L006009?:
0125 25E0       841            add     a,acc
0127            842   L006011?:
0127 D5F078     843            djnz    b,L006009?
012A FB         844            mov     r3,a
012B            845   ;        EFM8_autotest.c:172: switch(pin/0x10)
012B EA         846            mov     a,r2
012C C4         847            swap    a
012D 540F       848            anl     a,#0x0f
012F FA         849            mov  r2,a
0130 24FC       850            add     a,#0xff - 0x03
0132 4000       851            jc      L006006?
0134 EA         852            mov     a,r2
0135 2A         853            add     a,r2
0136 2A         854            add     a,r2
0137 90C0F8     855            mov     dptr,#L006013?
013A 73         856            jmp     @a+dptr
013B            857   L006013?:
013B 020000     858            ljmp    L006001?
013E 020000     859            ljmp    L006002?
0141 020000     860            ljmp    L006003?
0144 020000     861            ljmp    L006004?
0147            862   ;        EFM8_autotest.c:174: case 0: P0MDOUT |= mask; break;
0147            863   L006001?:
0147 EB         864            mov     a,r3
0148 42A4       865            orl     _P0MDOUT,a
014A            866   ;        EFM8_autotest.c:175: case 1: P1MDOUT |= mask; break;
014A 22         867            ret
014B            868   L006002?:
014B EB         869            mov     a,r3
014C 42A5       870            orl     _P1MDOUT,a
014E            871   ;        EFM8_autotest.c:176: case 2: P2MDOUT |= mask; break; 
014E 22         872            ret
014F            873   L006003?:
014F EB         874            mov     a,r3
0150 42A6       875            orl     _P2MDOUT,a
0152            876   ;        EFM8_autotest.c:177: case 3: P3MDOUT |= mask; break; 
0152 22         877            ret
0153            878   L006004?:
0153 EB         879            mov     a,r3
0154 429C       880            orl     _P3MDOUT,a
0156            881   ;        EFM8_autotest.c:178: }  
0156            882   L006006?:
0156 22         883            ret
0157            884   ;------------------------------------------------------------
0157            885   ;Allocation info for local variables in function 'Set_Pin_Input'
0157            886   ;------------------------------------------------------------
0157            887   ;pin                       Allocated to registers r2 
0157            888   ;mask                      Allocated to registers r3 
0157            889   ;------------------------------------------------------------
0157            890   ;        EFM8_autotest.c:181: void Set_Pin_Input (unsigned char pin)
0157            891   ;        -----------------------------------------
0157            892   ;         function Set_Pin_Input
0157            893   ;        -----------------------------------------
0157            894   _Set_Pin_Input:
0157 AA82       895            mov     r2,dpl
0159            896   ;        EFM8_autotest.c:185: mask=(1<<(pin&0x7));
0159 7407       897            mov     a,#0x07
015B 5A         898            anl     a,r2
015C F5F0       899            mov     b,a
015E 05F0       900            inc     b
0160 7401       901            mov     a,#0x01
0162 8000       902            sjmp    L007011?
0164            903   L007009?:
0164 25E0       904            add     a,acc
0166            905   L007011?:
0166 D5F078     906            djnz    b,L007009?
0169            907   ;        EFM8_autotest.c:186: mask=~mask;
0169 F4         908            cpl     a
016A FB         909            mov     r3,a
016B            910   ;        EFM8_autotest.c:187: switch(pin/0x10)
016B EA         911            mov     a,r2
016C C4         912            swap    a
016D 540F       913            anl     a,#0x0f
016F FA         914            mov  r2,a
0170 24FC       915            add     a,#0xff - 0x03
0172 4000       916            jc      L007006?
0174 EA         917            mov     a,r2
0175 2A         918            add     a,r2
0176 2A         919            add     a,r2
0177 90C2F8     920            mov     dptr,#L007013?
017A 73         921            jmp     @a+dptr
017B            922   L007013?:
017B 020000     923            ljmp    L007001?
017E 020000     924            ljmp    L007002?
0181 020000     925            ljmp    L007003?
0184 020000     926            ljmp    L007004?
0187            927   ;        EFM8_autotest.c:189: case 0: P0MDOUT &= mask; break;
0187            928   L007001?:
0187 EB         929            mov     a,r3
0188 52A4       930            anl     _P0MDOUT,a
018A            931   ;        EFM8_autotest.c:190: case 1: P1MDOUT &= mask; break;
018A 22         932            ret
018B            933   L007002?:
018B EB         934            mov     a,r3
018C 52A5       935            anl     _P1MDOUT,a
018E            936   ;        EFM8_autotest.c:191: case 2: P2MDOUT &= mask; break; 
018E 22         937            ret
018F            938   L007003?:
018F EB         939            mov     a,r3
0190 52A6       940            anl     _P2MDOUT,a
0192            941   ;        EFM8_autotest.c:192: case 3: P3MDOUT &= mask; break; 
0192 22         942            ret
0193            943   L007004?:
0193 EB         944            mov     a,r3
0194 529C       945            anl     _P3MDOUT,a
0196            946   ;        EFM8_autotest.c:193: }  
0196            947   L007006?:
0196 22         948            ret
0197            949   ;------------------------------------------------------------
0197            950   ;Allocation info for local variables in function 'Set_Pin_One'
0197            951   ;------------------------------------------------------------
0197            952   ;pin                       Allocated to registers r2 
0197            953   ;mask                      Allocated to registers r3 
0197            954   ;------------------------------------------------------------
0197            955   ;        EFM8_autotest.c:196: void Set_Pin_One (unsigned char pin)
0197            956   ;        -----------------------------------------
0197            957   ;         function Set_Pin_One
0197            958   ;        -----------------------------------------
0197            959   _Set_Pin_One:
0197 AA82       960            mov     r2,dpl
0199            961   ;        EFM8_autotest.c:200: mask=(1<<(pin&0x7));
0199 7407       962            mov     a,#0x07
019B 5A         963            anl     a,r2
019C F5F0       964            mov     b,a
019E 05F0       965            inc     b
01A0 7401       966            mov     a,#0x01
01A2 8000       967            sjmp    L008011?
01A4            968   L008009?:
01A4 25E0       969            add     a,acc
01A6            970   L008011?:
01A6 D5F078     971            djnz    b,L008009?
01A9 FB         972            mov     r3,a
01AA            973   ;        EFM8_autotest.c:201: switch(pin/0x10)
01AA EA         974            mov     a,r2
01AB C4         975            swap    a
01AC 540F       976            anl     a,#0x0f
01AE FA         977            mov  r2,a
01AF 24FC       978            add     a,#0xff - 0x03
01B1 4000       979            jc      L008006?
01B3 EA         980            mov     a,r2
01B4 2A         981            add     a,r2
01B5 2A         982            add     a,r2
01B6 90C4F8     983            mov     dptr,#L008013?
01B9 73         984            jmp     @a+dptr
01BA            985   L008013?:
01BA 020000     986            ljmp    L008001?
01BD 020000     987            ljmp    L008002?
01C0 020000     988            ljmp    L008003?
01C3 020000     989            ljmp    L008004?
01C6            990   ;        EFM8_autotest.c:203: case 0: P0 |= mask; break;
01C6            991   L008001?:
01C6 EB         992            mov     a,r3
01C7 4280       993            orl     _P0,a
01C9            994   ;        EFM8_autotest.c:204: case 1: P1 |= mask; break;
01C9 22         995            ret
01CA            996   L008002?:
01CA EB         997            mov     a,r3
01CB 4290       998            orl     _P1,a
01CD            999   ;        EFM8_autotest.c:205: case 2: P2 |= mask; break; 
01CD 22        1000            ret
01CE           1001   L008003?:
01CE EB        1002            mov     a,r3
01CF 42A0      1003            orl     _P2,a
01D1           1004   ;        EFM8_autotest.c:206: case 3: P3 |= mask; break; 
01D1 22        1005            ret
01D2           1006   L008004?:
01D2 EB        1007            mov     a,r3
01D3 42B0      1008            orl     _P3,a
01D5           1009   ;        EFM8_autotest.c:207: }  
01D5           1010   L008006?:
01D5 22        1011            ret
01D6           1012   ;------------------------------------------------------------
01D6           1013   ;Allocation info for local variables in function 'Set_Pin_Zero'
01D6           1014   ;------------------------------------------------------------
01D6           1015   ;pin                       Allocated to registers r2 
01D6           1016   ;mask                      Allocated to registers r3 
01D6           1017   ;------------------------------------------------------------
01D6           1018   ;        EFM8_autotest.c:210: void Set_Pin_Zero (unsigned char pin)
01D6           1019   ;        -----------------------------------------
01D6           1020   ;         function Set_Pin_Zero
01D6           1021   ;        -----------------------------------------
01D6           1022   _Set_Pin_Zero:
01D6 AA82      1023            mov     r2,dpl
01D8           1024   ;        EFM8_autotest.c:214: mask=(1<<(pin&0x7));
01D8 7407      1025            mov     a,#0x07
01DA 5A        1026            anl     a,r2
01DB F5F0      1027            mov     b,a
01DD 05F0      1028            inc     b
01DF 7401      1029            mov     a,#0x01
01E1 8000      1030            sjmp    L009011?
01E3           1031   L009009?:
01E3 25E0      1032            add     a,acc
01E5           1033   L009011?:
01E5 D5F078    1034            djnz    b,L009009?
01E8           1035   ;        EFM8_autotest.c:215: mask=~mask;
01E8 F4        1036            cpl     a
01E9 FB        1037            mov     r3,a
01EA           1038   ;        EFM8_autotest.c:216: switch(pin/0x10)
01EA EA        1039            mov     a,r2
01EB C4        1040            swap    a
01EC 540F      1041            anl     a,#0x0f
01EE FA        1042            mov  r2,a
01EF 24FC      1043            add     a,#0xff - 0x03
01F1 4000      1044            jc      L009006?
01F3 EA        1045            mov     a,r2
01F4 2A        1046            add     a,r2
01F5 2A        1047            add     a,r2
01F6 90C6F8    1048            mov     dptr,#L009013?
01F9 73        1049            jmp     @a+dptr
01FA           1050   L009013?:
01FA 020000    1051            ljmp    L009001?
01FD 020000    1052            ljmp    L009002?
0200 020000    1053            ljmp    L009003?
0203 020000    1054            ljmp    L009004?
0206           1055   ;        EFM8_autotest.c:218: case 0: P0 &= mask; break;
0206           1056   L009001?:
0206 EB        1057            mov     a,r3
0207 5280      1058            anl     _P0,a
0209           1059   ;        EFM8_autotest.c:219: case 1: P1 &= mask; break;
0209 22        1060            ret
020A           1061   L009002?:
020A EB        1062            mov     a,r3
020B 5290      1063            anl     _P1,a
020D           1064   ;        EFM8_autotest.c:220: case 2: P2 &= mask; break; 
020D 22        1065            ret
020E           1066   L009003?:
020E EB        1067            mov     a,r3
020F 52A0      1068            anl     _P2,a
0211           1069   ;        EFM8_autotest.c:221: case 3: P3 &= mask; break; 
0211 22        1070            ret
0212           1071   L009004?:
0212 EB        1072            mov     a,r3
0213 52B0      1073            anl     _P3,a
0215           1074   ;        EFM8_autotest.c:222: }  
0215           1075   L009006?:
0215 22        1076            ret
0216           1077   ;------------------------------------------------------------
0216           1078   ;Allocation info for local variables in function 'Read_Pin'
0216           1079   ;------------------------------------------------------------
0216           1080   ;pin                       Allocated to registers r2 
0216           1081   ;mask                      Allocated to registers r3 
0216           1082   ;result                    Allocated to registers r2 
0216           1083   ;------------------------------------------------------------
0216           1084   ;        EFM8_autotest.c:225: bit Read_Pin (unsigned char pin)
0216           1085   ;        -----------------------------------------
0216           1086   ;         function Read_Pin
0216           1087   ;        -----------------------------------------
0216           1088   _Read_Pin:
0216 AA82      1089            mov     r2,dpl
0218           1090   ;        EFM8_autotest.c:229: mask=(1<<(pin&0x7));
0218 7407      1091            mov     a,#0x07
021A 5A        1092            anl     a,r2
021B F5F0      1093            mov     b,a
021D 05F0      1094            inc     b
021F 7401      1095            mov     a,#0x01
0221 8000      1096            sjmp    L010012?
0223           1097   L010010?:
0223 25E0      1098            add     a,acc
0225           1099   L010012?:
0225 D5F078    1100            djnz    b,L010010?
0228 FB        1101            mov     r3,a
0229           1102   ;        EFM8_autotest.c:230: switch(pin/0x10)
0229 EA        1103            mov     a,r2
022A C4        1104            swap    a
022B 540F      1105            anl     a,#0x0f
022D FA        1106            mov  r2,a
022E 24FC      1107            add     a,#0xff - 0x03
0230 4000      1108            jc      L010002?
0232 EA        1109            mov     a,r2
0233 2A        1110            add     a,r2
0234 2A        1111            add     a,r2
0235 90C8F8    1112            mov     dptr,#L010014?
0238 73        1113            jmp     @a+dptr
0239           1114   L010014?:
0239 020000    1115            ljmp    L010002?
023C 020000    1116            ljmp    L010003?
023F 020000    1117            ljmp    L010004?
0242 020000    1118            ljmp    L010005?
0245           1119   ;        EFM8_autotest.c:233: case 0: result = P0 & mask; break;
0245           1120   L010002?:
0245 EB        1121            mov     a,r3
0246 5580      1122            anl     a,_P0
0248 FA        1123            mov     r2,a
0249           1124   ;        EFM8_autotest.c:234: case 1: result = P1 & mask; break;
0249 8000      1125            sjmp    L010006?
024B           1126   L010003?:
024B EB        1127            mov     a,r3
024C 5590      1128            anl     a,_P1
024E FA        1129            mov     r2,a
024F           1130   ;        EFM8_autotest.c:235: case 2: result = P2 & mask; break; 
024F 8000      1131            sjmp    L010006?
0251           1132   L010004?:
0251 EB        1133            mov     a,r3
0252 55A0      1134            anl     a,_P2
0254 FA        1135            mov     r2,a
0255           1136   ;        EFM8_autotest.c:236: case 3: result = P3 & mask; break; 
0255 8000      1137            sjmp    L010006?
0257           1138   L010005?:
0257 EB        1139            mov     a,r3
0258 55B0      1140            anl     a,_P3
025A FA        1141            mov     r2,a
025B           1142   ;        EFM8_autotest.c:237: }
025B           1143   L010006?:
025B           1144   ;        EFM8_autotest.c:238: return (result?1:0);
025B EA        1145            mov     a,r2
025C 24FF      1146            add     a,#0xff
025E 22        1147            ret
025F           1148   ;------------------------------------------------------------
025F           1149   ;Allocation info for local variables in function 'dofail'
025F           1150   ;------------------------------------------------------------
025F           1151   ;pin                       Allocated to registers r2 
025F           1152   ;------------------------------------------------------------
025F           1153   ;        EFM8_autotest.c:241: void dofail(unsigned char pin)
025F           1154   ;        -----------------------------------------
025F           1155   ;         function dofail
025F           1156   ;        -----------------------------------------
025F           1157   _dofail:
025F AA82      1158            mov     r2,dpl
0261           1159   ;        EFM8_autotest.c:243: printf("P%d.%d FAILED (OPEN)\n", pin/0x10, pin&7);
0261 7407      1160            mov     a,#0x07
0263 5A        1161            anl     a,r2
0264 FB        1162            mov     r3,a
0265 7C00      1163            mov     r4,#0x00
0267 EA        1164            mov     a,r2
0268 C4        1165            swap    a
0269 540F      1166            anl     a,#0x0f
026B FA        1167            mov     r2,a
026C 7D00      1168            mov     r5,#0x00
026E C003      1169            push    ar3
0270 C004      1170            push    ar4
0272 C002      1171            push    ar2
0274 C005      1172            push    ar5
0276 7438      1173            mov     a,#__str_0
0278 C0E0      1174            push    acc
027A 74CA      1175            mov     a,#(__str_0 >> 8)
027C C0E0      1176            push    acc
027E 7480      1177            mov     a,#0x80
0280 C0E0      1178            push    acc
0282 120000    1179            lcall   _printf
0285 E581      1180            mov     a,sp
0287 24F9      1181            add     a,#0xf9
0289 F581      1182            mov     sp,a
028B           1183   ;        EFM8_autotest.c:244: while(1);
028B           1184   L011002?:
028B 8000      1185            sjmp    L011002?
028D           1186   ;------------------------------------------------------------
028D           1187   ;Allocation info for local variables in function 'dofailb'
028D           1188   ;------------------------------------------------------------
028D           1189   ;pin                       Allocated to registers r2 
028D           1190   ;------------------------------------------------------------
028D           1191   ;        EFM8_autotest.c:247: void dofailb(unsigned char pin)
028D           1192   ;        -----------------------------------------
028D           1193   ;         function dofailb
028D           1194   ;        -----------------------------------------
028D           1195   _dofailb:
028D AA82      1196            mov     r2,dpl
028F           1197   ;        EFM8_autotest.c:249: printf("P%d.%d FAILED (SHORT)\n", pin/0x10, pin&7);
028F 7407      1198            mov     a,#0x07
0291 5A        1199            anl     a,r2
0292 FB        1200            mov     r3,a
0293 7C00      1201            mov     r4,#0x00
0295 EA        1202            mov     a,r2
0296 C4        1203            swap    a
0297 540F      1204            anl     a,#0x0f
0299 FA        1205            mov     r2,a
029A 7D00      1206            mov     r5,#0x00
029C C003      1207            push    ar3
029E C004      1208            push    ar4
02A0 C002      1209            push    ar2
02A2 C005      1210            push    ar5
02A4 7438      1211            mov     a,#__str_1
02A6 C0E0      1212            push    acc
02A8 74CB      1213            mov     a,#(__str_1 >> 8)
02AA C0E0      1214            push    acc
02AC 7480      1215            mov     a,#0x80
02AE C0E0      1216            push    acc
02B0 120000    1217            lcall   _printf
02B3 E581      1218            mov     a,sp
02B5 24F9      1219            add     a,#0xf9
02B7 F581      1220            mov     sp,a
02B9           1221   ;        EFM8_autotest.c:250: while(1);
02B9           1222   L012002?:
02B9 8000      1223            sjmp    L012002?
02BB           1224   ;------------------------------------------------------------
02BB           1225   ;Allocation info for local variables in function 'dopass'
02BB           1226   ;------------------------------------------------------------
02BB           1227   ;pin                       Allocated to registers r2 
02BB           1228   ;------------------------------------------------------------
02BB           1229   ;        EFM8_autotest.c:253: void dopass(unsigned char pin)
02BB           1230   ;        -----------------------------------------
02BB           1231   ;         function dopass
02BB           1232   ;        -----------------------------------------
02BB           1233   _dopass:
02BB AA82      1234            mov     r2,dpl
02BD           1235   ;        EFM8_autotest.c:255: printf("P%d.%d, ", pin/0x10, pin&7);
02BD 7407      1236            mov     a,#0x07
02BF 5A        1237            anl     a,r2
02C0 FB        1238            mov     r3,a
02C1 7C00      1239            mov     r4,#0x00
02C3 EA        1240            mov     a,r2
02C4 C4        1241            swap    a
02C5 540F      1242            anl     a,#0x0f
02C7 FA        1243            mov     r2,a
02C8 7D00      1244            mov     r5,#0x00
02CA C003      1245            push    ar3
02CC C004      1246            push    ar4
02CE C002      1247            push    ar2
02D0 C005      1248            push    ar5
02D2 74B8      1249            mov     a,#__str_2
02D4 C0E0      1250            push    acc
02D6 74CB      1251            mov     a,#(__str_2 >> 8)
02D8 C0E0      1252            push    acc
02DA 7480      1253            mov     a,#0x80
02DC C0E0      1254            push    acc
02DE 120000    1255            lcall   _printf
02E1 E581      1256            mov     a,sp
02E3 24F9      1257            add     a,#0xf9
02E5 F581      1258            mov     sp,a
02E7 22        1259            ret
02E8           1260   ;------------------------------------------------------------
02E8           1261   ;Allocation info for local variables in function 'Test_Pair'
02E8           1262   ;------------------------------------------------------------
02E8           1263   ;pin2                      Allocated with name '_Test_Pair_PARM_2'
02E8           1264   ;pin1                      Allocated to registers r2 
02E8           1265   ;------------------------------------------------------------
02E8           1266   ;        EFM8_autotest.c:258: void Test_Pair (unsigned char pin1, unsigned char pin2)
02E8           1267   ;        -----------------------------------------
02E8           1268   ;         function Test_Pair
02E8           1269   ;        -----------------------------------------
02E8           1270   _Test_Pair:
02E8           1271   ;        EFM8_autotest.c:260: Set_Pin_Output(pin1);
02E8 AA82      1272            mov  r2,dpl
02EA C002      1273            push    ar2
02EC 120000    1274            lcall   _Set_Pin_Output
02EF           1275   ;        EFM8_autotest.c:261: Set_Pin_Input(pin2);
02EF 857882    1276            mov     dpl,_Test_Pair_PARM_2
02F2 120000    1277            lcall   _Set_Pin_Input
02F5 D002      1278            pop     ar2
02F7           1279   ;        EFM8_autotest.c:262: Set_Pin_Zero(pin1);
02F7 8A82      1280            mov     dpl,r2
02F9 C002      1281            push    ar2
02FB 120000    1282            lcall   _Set_Pin_Zero
02FE           1283   ;        EFM8_autotest.c:263: WaitXms(2);
02FE 900002    1284            mov     dptr,#0x0002
0301 120000    1285            lcall   _WaitXms
0304           1286   ;        EFM8_autotest.c:264: if(Read_Pin(pin2)==1) dofail(pin2);
0304 857882    1287            mov     dpl,_Test_Pair_PARM_2
0307 120000    1288            lcall   _Read_Pin
030A E4        1289            clr     a
030B 33        1290            rlc     a
030C FB        1291            mov     r3,a
030D D002      1292            pop     ar2
030F BB01F8    1293            cjne    r3,#0x01,L014002?
0312 857882    1294            mov     dpl,_Test_Pair_PARM_2
0315 C002      1295            push    ar2
0317 120000    1296            lcall   _dofail
031A D002      1297            pop     ar2
031C           1298   L014002?:
031C           1299   ;        EFM8_autotest.c:265: if (countzero()!=2) dofailb(pin2);
031C C002      1300            push    ar2
031E 120000    1301            lcall   _countzero
0321 AB82      1302            mov     r3,dpl
0323 D002      1303            pop     ar2
0325 BB0238    1304            cjne    r3,#0x02,L014017?
0328 8000      1305            sjmp    L014004?
032A           1306   L014017?:
032A 857882    1307            mov     dpl,_Test_Pair_PARM_2
032D C002      1308            push    ar2
032F 120000    1309            lcall   _dofailb
0332 D002      1310            pop     ar2
0334           1311   L014004?:
0334           1312   ;        EFM8_autotest.c:266: dopass(pin2);
0334 857882    1313            mov     dpl,_Test_Pair_PARM_2
0337 C002      1314            push    ar2
0339 120000    1315            lcall   _dopass
033C           1316   ;        EFM8_autotest.c:268: Set_Pin_Output(pin2);
033C 857882    1317            mov     dpl,_Test_Pair_PARM_2
033F 120000    1318            lcall   _Set_Pin_Output
0342 D002      1319            pop     ar2
0344           1320   ;        EFM8_autotest.c:269: Set_Pin_Input(pin1);
0344 8A82      1321            mov     dpl,r2
0346 C002      1322            push    ar2
0348 120000    1323            lcall   _Set_Pin_Input
034B           1324   ;        EFM8_autotest.c:270: Set_Pin_Zero(pin2);
034B 857882    1325            mov     dpl,_Test_Pair_PARM_2
034E 120000    1326            lcall   _Set_Pin_Zero
0351           1327   ;        EFM8_autotest.c:271: WaitXms(2);
0351 900002    1328            mov     dptr,#0x0002
0354 120000    1329            lcall   _WaitXms
0357 D002      1330            pop     ar2
0359           1331   ;        EFM8_autotest.c:272: if(Read_Pin(pin1)==1) dofail(pin1);
0359 8A82      1332            mov     dpl,r2
035B C002      1333            push    ar2
035D 120000    1334            lcall   _Read_Pin
0360 E4        1335            clr     a
0361 33        1336            rlc     a
0362 FB        1337            mov     r3,a
0363 D002      1338            pop     ar2
0365 BB01B8    1339            cjne    r3,#0x01,L014006?
0368 8A82      1340            mov     dpl,r2
036A C002      1341            push    ar2
036C 120000    1342            lcall   _dofail
036F D002      1343            pop     ar2
0371           1344   L014006?:
0371           1345   ;        EFM8_autotest.c:273: if (countzero()!=2) dofailb(pin1);
0371 C002      1346            push    ar2
0373 120000    1347            lcall   _countzero
0376 AB82      1348            mov     r3,dpl
0378 D002      1349            pop     ar2
037A BB02F8    1350            cjne    r3,#0x02,L014020?
037D 8000      1351            sjmp    L014008?
037F           1352   L014020?:
037F 8A82      1353            mov     dpl,r2
0381 C002      1354            push    ar2
0383 120000    1355            lcall   _dofailb
0386 D002      1356            pop     ar2
0388           1357   L014008?:
0388           1358   ;        EFM8_autotest.c:274: dopass(pin1);
0388 8A82      1359            mov     dpl,r2
038A C002      1360            push    ar2
038C 120000    1361            lcall   _dopass
038F D002      1362            pop     ar2
0391           1363   ;        EFM8_autotest.c:276: Set_Pin_One(pin1);
0391 8A82      1364            mov     dpl,r2
0393 C002      1365            push    ar2
0395 120000    1366            lcall   _Set_Pin_One
0398           1367   ;        EFM8_autotest.c:277: Set_Pin_One(pin2);
0398 857882    1368            mov     dpl,_Test_Pair_PARM_2
039B 120000    1369            lcall   _Set_Pin_One
039E D002      1370            pop     ar2
03A0           1371   ;        EFM8_autotest.c:278: Set_Pin_Input(pin1);
03A0 8A82      1372            mov     dpl,r2
03A2 120000    1373            lcall   _Set_Pin_Input
03A5           1374   ;        EFM8_autotest.c:279: Set_Pin_Input(pin2);
03A5 857882    1375            mov     dpl,_Test_Pair_PARM_2
03A8 020000    1376            ljmp    _Set_Pin_Input
03AB           1377   ;------------------------------------------------------------
03AB           1378   ;Allocation info for local variables in function 'Check_Pin_Zero'
03AB           1379   ;------------------------------------------------------------
03AB           1380   ;pin                       Allocated to registers r2 
03AB           1381   ;------------------------------------------------------------
03AB           1382   ;        EFM8_autotest.c:282: void Check_Pin_Zero (unsigned char pin)
03AB           1383   ;        -----------------------------------------
03AB           1384   ;         function Check_Pin_Zero
03AB           1385   ;        -----------------------------------------
03AB           1386   _Check_Pin_Zero:
03AB           1387   ;        EFM8_autotest.c:284: if(Read_Pin(pin)==0)
03AB AA82      1388            mov  r2,dpl
03AD C002      1389            push    ar2
03AF 120000    1390            lcall   _Read_Pin
03B2 D002      1391            pop     ar2
03B4 4000      1392            jc      L015003?
03B6           1393   ;        EFM8_autotest.c:286: printf("P%d.%d is connected to ground\n", pin/0x10, pin&7);
03B6 7407      1394            mov     a,#0x07
03B8 5A        1395            anl     a,r2
03B9 FB        1396            mov     r3,a
03BA 7C00      1397            mov     r4,#0x00
03BC EA        1398            mov     a,r2
03BD C4        1399            swap    a
03BE 540F      1400            anl     a,#0x0f
03C0 FA        1401            mov     r2,a
03C1 7D00      1402            mov     r5,#0x00
03C3 C003      1403            push    ar3
03C5 C004      1404            push    ar4
03C7 C002      1405            push    ar2
03C9 C005      1406            push    ar5
03CB 74B8      1407            mov     a,#__str_3
03CD C0E0      1408            push    acc
03CF 74CD      1409            mov     a,#(__str_3 >> 8)
03D1 C0E0      1410            push    acc
03D3 7480      1411            mov     a,#0x80
03D5 C0E0      1412            push    acc
03D7 120000    1413            lcall   _printf
03DA E581      1414            mov     a,sp
03DC 24F9      1415            add     a,#0xf9
03DE F581      1416            mov     sp,a
03E0           1417   L015003?:
03E0 22        1418            ret
03E1           1419   ;------------------------------------------------------------
03E1           1420   ;Allocation info for local variables in function 'Initial_Check'
03E1           1421   ;------------------------------------------------------------
03E1           1422   ;------------------------------------------------------------
03E1           1423   ;        EFM8_autotest.c:290: void Initial_Check (void)
03E1           1424   ;        -----------------------------------------
03E1           1425   ;         function Initial_Check
03E1           1426   ;        -----------------------------------------
03E1           1427   _Initial_Check:
03E1           1428   ;        EFM8_autotest.c:292: if (countzero()!=0)
03E1 120000    1429            lcall   _countzero
03E4 E582      1430            mov     a,dpl
03E6 7000      1431            jnz     L016010?
03E8 22        1432            ret
03E9           1433   L016010?:
03E9           1434   ;        EFM8_autotest.c:294: Check_Pin_Zero(0x00);
03E9 758200    1435            mov     dpl,#0x00
03EC 120000    1436            lcall   _Check_Pin_Zero
03EF           1437   ;        EFM8_autotest.c:295: Check_Pin_Zero(0x01);
03EF 758201    1438            mov     dpl,#0x01
03F2 120000    1439            lcall   _Check_Pin_Zero
03F5           1440   ;        EFM8_autotest.c:296: Check_Pin_Zero(0x02);
03F5 758202    1441            mov     dpl,#0x02
03F8 120000    1442            lcall   _Check_Pin_Zero
03FB           1443   ;        EFM8_autotest.c:297: Check_Pin_Zero(0x03);
03FB 758203    1444            mov     dpl,#0x03
03FE 120000    1445            lcall   _Check_Pin_Zero
0401           1446   ;        EFM8_autotest.c:300: Check_Pin_Zero(0x06);
0401 758206    1447            mov     dpl,#0x06
0404 120000    1448            lcall   _Check_Pin_Zero
0407           1449   ;        EFM8_autotest.c:301: Check_Pin_Zero(0x07);
0407 758207    1450            mov     dpl,#0x07
040A 120000    1451            lcall   _Check_Pin_Zero
040D           1452   ;        EFM8_autotest.c:302: Check_Pin_Zero(0x10);
040D 758210    1453            mov     dpl,#0x10
0410 120000    1454            lcall   _Check_Pin_Zero
0413           1455   ;        EFM8_autotest.c:303: Check_Pin_Zero(0x11);
0413 758211    1456            mov     dpl,#0x11
0416 120000    1457            lcall   _Check_Pin_Zero
0419           1458   ;        EFM8_autotest.c:304: Check_Pin_Zero(0x12);
0419 758212    1459            mov     dpl,#0x12
041C 120000    1460            lcall   _Check_Pin_Zero
041F           1461   ;        EFM8_autotest.c:305: Check_Pin_Zero(0x13);
041F 758213    1462            mov     dpl,#0x13
0422 120000    1463            lcall   _Check_Pin_Zero
0425           1464   ;        EFM8_autotest.c:306: Check_Pin_Zero(0x14);
0425 758214    1465            mov     dpl,#0x14
0428 120000    1466            lcall   _Check_Pin_Zero
042B           1467   ;        EFM8_autotest.c:307: Check_Pin_Zero(0x15);
042B 758215    1468            mov     dpl,#0x15
042E 120000    1469            lcall   _Check_Pin_Zero
0431           1470   ;        EFM8_autotest.c:308: Check_Pin_Zero(0x16);
0431 758216    1471            mov     dpl,#0x16
0434 120000    1472            lcall   _Check_Pin_Zero
0437           1473   ;        EFM8_autotest.c:309: Check_Pin_Zero(0x17);
0437 758217    1474            mov     dpl,#0x17
043A 120000    1475            lcall   _Check_Pin_Zero
043D           1476   ;        EFM8_autotest.c:310: Check_Pin_Zero(0x20);
043D 758220    1477            mov     dpl,#0x20
0440 120000    1478            lcall   _Check_Pin_Zero
0443           1479   ;        EFM8_autotest.c:311: Check_Pin_Zero(0x21);
0443 758221    1480            mov     dpl,#0x21
0446 120000    1481            lcall   _Check_Pin_Zero
0449           1482   ;        EFM8_autotest.c:312: Check_Pin_Zero(0x22);
0449 758222    1483            mov     dpl,#0x22
044C 120000    1484            lcall   _Check_Pin_Zero
044F           1485   ;        EFM8_autotest.c:313: Check_Pin_Zero(0x23);
044F 758223    1486            mov     dpl,#0x23
0452 120000    1487            lcall   _Check_Pin_Zero
0455           1488   ;        EFM8_autotest.c:314: Check_Pin_Zero(0x24);
0455 758224    1489            mov     dpl,#0x24
0458 120000    1490            lcall   _Check_Pin_Zero
045B           1491   ;        EFM8_autotest.c:315: Check_Pin_Zero(0x25);
045B 758225    1492            mov     dpl,#0x25
045E 120000    1493            lcall   _Check_Pin_Zero
0461           1494   ;        EFM8_autotest.c:316: Check_Pin_Zero(0x26);
0461 758226    1495            mov     dpl,#0x26
0464 120000    1496            lcall   _Check_Pin_Zero
0467           1497   ;        EFM8_autotest.c:317: Check_Pin_Zero(0x30);
0467 758230    1498            mov     dpl,#0x30
046A 120000    1499            lcall   _Check_Pin_Zero
046D           1500   ;        EFM8_autotest.c:318: Check_Pin_Zero(0x31);
046D 758231    1501            mov     dpl,#0x31
0470 120000    1502            lcall   _Check_Pin_Zero
0473           1503   ;        EFM8_autotest.c:319: Check_Pin_Zero(0x32);
0473 758232    1504            mov     dpl,#0x32
0476 120000    1505            lcall   _Check_Pin_Zero
0479           1506   ;        EFM8_autotest.c:320: Check_Pin_Zero(0x33);
0479 758233    1507            mov     dpl,#0x33
047C 120000    1508            lcall   _Check_Pin_Zero
047F           1509   ;        EFM8_autotest.c:321: Check_Pin_Zero(0x37);
047F 758237    1510            mov     dpl,#0x37
0482 120000    1511            lcall   _Check_Pin_Zero
0485           1512   ;        EFM8_autotest.c:322: while(1);
0485           1513   L016002?:
0485 8000      1514            sjmp    L016002?
0487           1515   ;------------------------------------------------------------
0487           1516   ;Allocation info for local variables in function 'main'
0487           1517   ;------------------------------------------------------------
0487           1518   ;------------------------------------------------------------
0487           1519   ;        EFM8_autotest.c:326: void main(void)
0487           1520   ;        -----------------------------------------
0487           1521   ;         function main
0487           1522   ;        -----------------------------------------
0487           1523   _main:
0487           1524   ;        EFM8_autotest.c:330: WaitXms(TOUT); // Give PuTTY a chance to start
0487 9001F4    1525            mov     dptr,#0x01F4
048A 120000    1526            lcall   _WaitXms
048D           1527   ;        EFM8_autotest.c:332: printf("\n\nEFM8 board autotest\n");
048D 7478      1528            mov     a,#__str_4
048F C0E0      1529            push    acc
0491 74CE      1530            mov     a,#(__str_4 >> 8)
0493 C0E0      1531            push    acc
0495 7480      1532            mov     a,#0x80
0497 C0E0      1533            push    acc
0499 120000    1534            lcall   _printf
049C 1581      1535            dec     sp
049E 1581      1536            dec     sp
04A0 1581      1537            dec     sp
04A2           1538   ;        EFM8_autotest.c:333: Initial_Check();
04A2 120000    1539            lcall   _Initial_Check
04A5           1540   ;        EFM8_autotest.c:335: Test_Pair(0x00, 0x01); // P0.0 and P0.1
04A5 757801    1541            mov     _Test_Pair_PARM_2,#0x01
04A8 758200    1542            mov     dpl,#0x00
04AB 120000    1543            lcall   _Test_Pair
04AE           1544   ;        EFM8_autotest.c:336: Test_Pair(0x02, 0x03); // P0.2 and P0.3
04AE 757803    1545            mov     _Test_Pair_PARM_2,#0x03
04B1 758202    1546            mov     dpl,#0x02
04B4 120000    1547            lcall   _Test_Pair
04B7           1548   ;        EFM8_autotest.c:337: Test_Pair(0x37, 0x06); // P3.7 and P0.6
04B7 757806    1549            mov     _Test_Pair_PARM_2,#0x06
04BA 758237    1550            mov     dpl,#0x37
04BD 120000    1551            lcall   _Test_Pair
04C0           1552   ;        EFM8_autotest.c:338: Test_Pair(0x33, 0x07); // etc.
04C0 757807    1553            mov     _Test_Pair_PARM_2,#0x07
04C3 758233    1554            mov     dpl,#0x33
04C6 120000    1555            lcall   _Test_Pair
04C9           1556   ;        EFM8_autotest.c:339: printf("\n");
04C9 74B8      1557            mov     a,#__str_5
04CB C0E0      1558            push    acc
04CD 74CE      1559            mov     a,#(__str_5 >> 8)
04CF C0E0      1560            push    acc
04D1 7480      1561            mov     a,#0x80
04D3 C0E0      1562            push    acc
04D5 120000    1563            lcall   _printf
04D8 1581      1564            dec     sp
04DA 1581      1565            dec     sp
04DC 1581      1566            dec     sp
04DE           1567   ;        EFM8_autotest.c:340: Test_Pair(0x32, 0x10);
04DE 757810    1568            mov     _Test_Pair_PARM_2,#0x10
04E1 758232    1569            mov     dpl,#0x32
04E4 120000    1570            lcall   _Test_Pair
04E7           1571   ;        EFM8_autotest.c:341: Test_Pair(0x31, 0x11);
04E7 757811    1572            mov     _Test_Pair_PARM_2,#0x11
04EA 758231    1573            mov     dpl,#0x31
04ED 120000    1574            lcall   _Test_Pair
04F0           1575   ;        EFM8_autotest.c:342: Test_Pair(0x30, 0x12);
04F0 757812    1576            mov     _Test_Pair_PARM_2,#0x12
04F3 758230    1577            mov     dpl,#0x30
04F6 120000    1578            lcall   _Test_Pair
04F9           1579   ;        EFM8_autotest.c:343: Test_Pair(0x26, 0x13);
04F9 757813    1580            mov     _Test_Pair_PARM_2,#0x13
04FC 758226    1581            mov     dpl,#0x26
04FF 120000    1582            lcall   _Test_Pair
0502           1583   ;        EFM8_autotest.c:344: printf("\n");
0502 74B8      1584            mov     a,#__str_5
0504 C0E0      1585            push    acc
0506 74CE      1586            mov     a,#(__str_5 >> 8)
0508 C0E0      1587            push    acc
050A 7480      1588            mov     a,#0x80
050C C0E0      1589            push    acc
050E 120000    1590            lcall   _printf
0511 1581      1591            dec     sp
0513 1581      1592            dec     sp
0515 1581      1593            dec     sp
0517           1594   ;        EFM8_autotest.c:345: Test_Pair(0x25, 0x14);
0517 757814    1595            mov     _Test_Pair_PARM_2,#0x14
051A 758225    1596            mov     dpl,#0x25
051D 120000    1597            lcall   _Test_Pair
0520           1598   ;        EFM8_autotest.c:346: Test_Pair(0x24, 0x15);
0520 757815    1599            mov     _Test_Pair_PARM_2,#0x15
0523 758224    1600            mov     dpl,#0x24
0526 120000    1601            lcall   _Test_Pair
0529           1602   ;        EFM8_autotest.c:347: Test_Pair(0x23, 0x16);
0529 757816    1603            mov     _Test_Pair_PARM_2,#0x16
052C 758223    1604            mov     dpl,#0x23
052F 120000    1605            lcall   _Test_Pair
0532           1606   ;        EFM8_autotest.c:348: Test_Pair(0x22, 0x17);
0532 757817    1607            mov     _Test_Pair_PARM_2,#0x17
0535 758222    1608            mov     dpl,#0x22
0538 120000    1609            lcall   _Test_Pair
053B           1610   ;        EFM8_autotest.c:349: printf("\n");
053B 74B8      1611            mov     a,#__str_5
053D C0E0      1612            push    acc
053F 74CE      1613            mov     a,#(__str_5 >> 8)
0541 C0E0      1614            push    acc
0543 7480      1615            mov     a,#0x80
0545 C0E0      1616            push    acc
0547 120000    1617            lcall   _printf
054A 1581      1618            dec     sp
054C 1581      1619            dec     sp
054E 1581      1620            dec     sp
0550           1621   ;        EFM8_autotest.c:350: Test_Pair(0x21, 0x20);
0550 757820    1622            mov     _Test_Pair_PARM_2,#0x20
0553 758221    1623            mov     dpl,#0x21
0556 120000    1624            lcall   _Test_Pair
0559           1625   ;        EFM8_autotest.c:352: printf("\n\nSuccess!\n");
0559 74F8      1626            mov     a,#__str_6
055B C0E0      1627            push    acc
055D 74CE      1628            mov     a,#(__str_6 >> 8)
055F C0E0      1629            push    acc
0561 7480      1630            mov     a,#0x80
0563 C0E0      1631            push    acc
0565 120000    1632            lcall   _printf
0568 1581      1633            dec     sp
056A 1581      1634            dec     sp
056C 1581      1635            dec     sp
056E           1636   ;        EFM8_autotest.c:354: Set_Pin_Output(0x21);
056E 758221    1637            mov     dpl,#0x21
0571 120000    1638            lcall   _Set_Pin_Output
0574           1639   ;        EFM8_autotest.c:355: while(1)
0574           1640   L017002?:
0574           1641   ;        EFM8_autotest.c:357: P2_1=0;
0574 C2A1      1642            clr     _P2_1
0576           1643   ;        EFM8_autotest.c:358: WaitXms(TOUT);
0576 9001F4    1644            mov     dptr,#0x01F4
0579 120000    1645            lcall   _WaitXms
057C           1646   ;        EFM8_autotest.c:359: P2_1=1;
057C D2A1      1647            setb    _P2_1
057E           1648   ;        EFM8_autotest.c:360: WaitXms(TOUT);
057E 9001F4    1649            mov     dptr,#0x01F4
0581 120000    1650            lcall   _WaitXms
0584 8000      1651            sjmp    L017002?
0586           1652            rseg R_CSEG
0586           1653   
0000           1654            rseg R_XINIT
0000           1655   
0000           1656            rseg R_CONST
0000           1657   __str_0:
0000 5025642E  1658            db 'P%d.%d FAILED (OPEN)'
     25642046
     41494C45
     4420284F
     50454E29
0014 0A        1659            db 0x0A
0015 00        1660            db 0x00
0016           1661   __str_1:
0016 5025642E  1662            db 'P%d.%d FAILED (SHORT)'
     25642046
     41494C45
     44202853
     484F5254
     29
002B 0A        1663            db 0x0A
002C 00        1664            db 0x00
002D           1665   __str_2:
002D 5025642E  1666            db 'P%d.%d, '
     25642C20
0035 00        1667            db 0x00
0036           1668   __str_3:
0036 5025642E  1669            db 'P%d.%d is connected to ground'
     25642069
     7320636F
     6E6E6563
     74656420
     746F2067
     726F756E
     64
0053 0A        1670            db 0x0A
0054 00        1671            db 0x00
0055           1672   __str_4:
0055 0A        1673            db 0x0A
0056 0A        1674            db 0x0A
0057 45464D38  1675            db 'EFM8 board autotest'
     20626F61
     72642061
     75746F74
     657374
006A 0A        1676            db 0x0A
006B 00        1677            db 0x00
006C           1678   __str_5:
006C 0A        1679            db 0x0A
006D 00        1680            db 0x00
006E           1681   __str_6:
006E 0A        1682            db 0x0A
006F 0A        1683            db 0x0A
0070 53756363  1684            db 'Success!'
     65737321
0078 0A        1685            db 0x0A
0079 00        1686            db 0x00
007A           1687   
0003           1688            CSEG
0003           1689   
0003           1690   end
