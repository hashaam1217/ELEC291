0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 07 06:19:43 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _get_period_2
0000             30            public _get_period
0000             31            public _Get_ADC
0000             32            public _Volts_at_Pin
0000             33            public _ADC_at_Pin
0000             34            public _InitPinADC
0000             35            public _waitms
0000             36            public _Timer3us
0000             37            public _InitADC
0000             38            public __c51_external_startup
0000             39   ;--------------------------------------------------------
0000             40   ; Special Function Registers
0000             41   ;--------------------------------------------------------
0000             42   _ACC            DATA 0xe0
0000             43   _ADC0ASAH       DATA 0xb6
0000             44   _ADC0ASAL       DATA 0xb5
0000             45   _ADC0ASCF       DATA 0xa1
0000             46   _ADC0ASCT       DATA 0xc7
0000             47   _ADC0CF0        DATA 0xbc
0000             48   _ADC0CF1        DATA 0xb9
0000             49   _ADC0CF2        DATA 0xdf
0000             50   _ADC0CN0        DATA 0xe8
0000             51   _ADC0CN1        DATA 0xb2
0000             52   _ADC0CN2        DATA 0xb3
0000             53   _ADC0GTH        DATA 0xc4
0000             54   _ADC0GTL        DATA 0xc3
0000             55   _ADC0H          DATA 0xbe
0000             56   _ADC0L          DATA 0xbd
0000             57   _ADC0LTH        DATA 0xc6
0000             58   _ADC0LTL        DATA 0xc5
0000             59   _ADC0MX         DATA 0xbb
0000             60   _B              DATA 0xf0
0000             61   _CKCON0         DATA 0x8e
0000             62   _CKCON1         DATA 0xa6
0000             63   _CLEN0          DATA 0xc6
0000             64   _CLIE0          DATA 0xc7
0000             65   _CLIF0          DATA 0xe8
0000             66   _CLKSEL         DATA 0xa9
0000             67   _CLOUT0         DATA 0xd1
0000             68   _CLU0CF         DATA 0xb1
0000             69   _CLU0FN         DATA 0xaf
0000             70   _CLU0MX         DATA 0x84
0000             71   _CLU1CF         DATA 0xb3
0000             72   _CLU1FN         DATA 0xb2
0000             73   _CLU1MX         DATA 0x85
0000             74   _CLU2CF         DATA 0xb6
0000             75   _CLU2FN         DATA 0xb5
0000             76   _CLU2MX         DATA 0x91
0000             77   _CLU3CF         DATA 0xbf
0000             78   _CLU3FN         DATA 0xbe
0000             79   _CLU3MX         DATA 0xae
0000             80   _CMP0CN0        DATA 0x9b
0000             81   _CMP0CN1        DATA 0x99
0000             82   _CMP0MD         DATA 0x9d
0000             83   _CMP0MX         DATA 0x9f
0000             84   _CMP1CN0        DATA 0xbf
0000             85   _CMP1CN1        DATA 0xac
0000             86   _CMP1MD         DATA 0xab
0000             87   _CMP1MX         DATA 0xaa
0000             88   _CRC0CN0        DATA 0xce
0000             89   _CRC0CN1        DATA 0x86
0000             90   _CRC0CNT        DATA 0xd3
0000             91   _CRC0DAT        DATA 0xcb
0000             92   _CRC0FLIP       DATA 0xcf
0000             93   _CRC0IN         DATA 0xca
0000             94   _CRC0ST         DATA 0xd2
0000             95   _DAC0CF0        DATA 0x91
0000             96   _DAC0CF1        DATA 0x92
0000             97   _DAC0H          DATA 0x85
0000             98   _DAC0L          DATA 0x84
0000             99   _DAC1CF0        DATA 0x93
0000            100   _DAC1CF1        DATA 0x94
0000            101   _DAC1H          DATA 0x8a
0000            102   _DAC1L          DATA 0x89
0000            103   _DAC2CF0        DATA 0x95
0000            104   _DAC2CF1        DATA 0x96
0000            105   _DAC2H          DATA 0x8c
0000            106   _DAC2L          DATA 0x8b
0000            107   _DAC3CF0        DATA 0x9a
0000            108   _DAC3CF1        DATA 0x9c
0000            109   _DAC3H          DATA 0x8e
0000            110   _DAC3L          DATA 0x8d
0000            111   _DACGCF0        DATA 0x88
0000            112   _DACGCF1        DATA 0x98
0000            113   _DACGCF2        DATA 0xa2
0000            114   _DERIVID        DATA 0xad
0000            115   _DEVICEID       DATA 0xb5
0000            116   _DPH            DATA 0x83
0000            117   _DPL            DATA 0x82
0000            118   _EIE1           DATA 0xe6
0000            119   _EIE2           DATA 0xf3
0000            120   _EIP1           DATA 0xbb
0000            121   _EIP1H          DATA 0xee
0000            122   _EIP2           DATA 0xed
0000            123   _EIP2H          DATA 0xf6
0000            124   _EMI0CN         DATA 0xe7
0000            125   _FLKEY          DATA 0xb7
0000            126   _HFO0CAL        DATA 0xc7
0000            127   _HFO1CAL        DATA 0xd6
0000            128   _HFOCN          DATA 0xef
0000            129   _I2C0ADM        DATA 0xff
0000            130   _I2C0CN0        DATA 0xba
0000            131   _I2C0DIN        DATA 0xbc
0000            132   _I2C0DOUT       DATA 0xbb
0000            133   _I2C0FCN0       DATA 0xad
0000            134   _I2C0FCN1       DATA 0xab
0000            135   _I2C0FCT        DATA 0xf5
0000            136   _I2C0SLAD       DATA 0xbd
0000            137   _I2C0STAT       DATA 0xb9
0000            138   _IE             DATA 0xa8
0000            139   _IP             DATA 0xb8
0000            140   _IPH            DATA 0xf2
0000            141   _IT01CF         DATA 0xe4
0000            142   _LFO0CN         DATA 0xb1
0000            143   _P0             DATA 0x80
0000            144   _P0MASK         DATA 0xfe
0000            145   _P0MAT          DATA 0xfd
0000            146   _P0MDIN         DATA 0xf1
0000            147   _P0MDOUT        DATA 0xa4
0000            148   _P0SKIP         DATA 0xd4
0000            149   _P1             DATA 0x90
0000            150   _P1MASK         DATA 0xee
0000            151   _P1MAT          DATA 0xed
0000            152   _P1MDIN         DATA 0xf2
0000            153   _P1MDOUT        DATA 0xa5
0000            154   _P1SKIP         DATA 0xd5
0000            155   _P2             DATA 0xa0
0000            156   _P2MASK         DATA 0xfc
0000            157   _P2MAT          DATA 0xfb
0000            158   _P2MDIN         DATA 0xf3
0000            159   _P2MDOUT        DATA 0xa6
0000            160   _P2SKIP         DATA 0xcc
0000            161   _P3             DATA 0xb0
0000            162   _P3MDIN         DATA 0xf4
0000            163   _P3MDOUT        DATA 0x9c
0000            164   _PCA0CENT       DATA 0x9e
0000            165   _PCA0CLR        DATA 0x9c
0000            166   _PCA0CN0        DATA 0xd8
0000            167   _PCA0CPH0       DATA 0xfc
0000            168   _PCA0CPH1       DATA 0xea
0000            169   _PCA0CPH2       DATA 0xec
0000            170   _PCA0CPH3       DATA 0xf5
0000            171   _PCA0CPH4       DATA 0x85
0000            172   _PCA0CPH5       DATA 0xde
0000            173   _PCA0CPL0       DATA 0xfb
0000            174   _PCA0CPL1       DATA 0xe9
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPL3       DATA 0xf4
0000            177   _PCA0CPL4       DATA 0x84
0000            178   _PCA0CPL5       DATA 0xdd
0000            179   _PCA0CPM0       DATA 0xda
0000            180   _PCA0CPM1       DATA 0xdb
0000            181   _PCA0CPM2       DATA 0xdc
0000            182   _PCA0CPM3       DATA 0xae
0000            183   _PCA0CPM4       DATA 0xaf
0000            184   _PCA0CPM5       DATA 0xcc
0000            185   _PCA0H          DATA 0xfa
0000            186   _PCA0L          DATA 0xf9
0000            187   _PCA0MD         DATA 0xd9
0000            188   _PCA0POL        DATA 0x96
0000            189   _PCA0PWM        DATA 0xf7
0000            190   _PCON0          DATA 0x87
0000            191   _PCON1          DATA 0xcd
0000            192   _PFE0CN         DATA 0xc1
0000            193   _PRTDRV         DATA 0xf6
0000            194   _PSCTL          DATA 0x8f
0000            195   _PSTAT0         DATA 0xaa
0000            196   _PSW            DATA 0xd0
0000            197   _REF0CN         DATA 0xd1
0000            198   _REG0CN         DATA 0xc9
0000            199   _REVID          DATA 0xb6
0000            200   _RSTSRC         DATA 0xef
0000            201   _SBCON1         DATA 0x94
0000            202   _SBRLH1         DATA 0x96
0000            203   _SBRLL1         DATA 0x95
0000            204   _SBUF           DATA 0x99
0000            205   _SBUF0          DATA 0x99
0000            206   _SBUF1          DATA 0x92
0000            207   _SCON           DATA 0x98
0000            208   _SCON0          DATA 0x98
0000            209   _SCON1          DATA 0xc8
0000            210   _SFRPAGE        DATA 0xa7
0000            211   _SFRPGCN        DATA 0xbc
0000            212   _SFRSTACK       DATA 0xd7
0000            213   _SMB0ADM        DATA 0xd6
0000            214   _SMB0ADR        DATA 0xd7
0000            215   _SMB0CF         DATA 0xc1
0000            216   _SMB0CN0        DATA 0xc0
0000            217   _SMB0DAT        DATA 0xc2
0000            218   _SMB0FCN0       DATA 0xc3
0000            219   _SMB0FCN1       DATA 0xc4
0000            220   _SMB0FCT        DATA 0xef
0000            221   _SMB0RXLN       DATA 0xc5
0000            222   _SMB0TC         DATA 0xac
0000            223   _SMOD1          DATA 0x93
0000            224   _SP             DATA 0x81
0000            225   _SPI0CFG        DATA 0xa1
0000            226   _SPI0CKR        DATA 0xa2
0000            227   _SPI0CN0        DATA 0xf8
0000            228   _SPI0DAT        DATA 0xa3
0000            229   _SPI0FCN0       DATA 0x9a
0000            230   _SPI0FCN1       DATA 0x9b
0000            231   _SPI0FCT        DATA 0xf7
0000            232   _SPI0PCF        DATA 0xdf
0000            233   _TCON           DATA 0x88
0000            234   _TH0            DATA 0x8c
0000            235   _TH1            DATA 0x8d
0000            236   _TL0            DATA 0x8a
0000            237   _TL1            DATA 0x8b
0000            238   _TMOD           DATA 0x89
0000            239   _TMR2CN0        DATA 0xc8
0000            240   _TMR2CN1        DATA 0xfd
0000            241   _TMR2H          DATA 0xcf
0000            242   _TMR2L          DATA 0xce
0000            243   _TMR2RLH        DATA 0xcb
0000            244   _TMR2RLL        DATA 0xca
0000            245   _TMR3CN0        DATA 0x91
0000            246   _TMR3CN1        DATA 0xfe
0000            247   _TMR3H          DATA 0x95
0000            248   _TMR3L          DATA 0x94
0000            249   _TMR3RLH        DATA 0x93
0000            250   _TMR3RLL        DATA 0x92
0000            251   _TMR4CN0        DATA 0x98
0000            252   _TMR4CN1        DATA 0xff
0000            253   _TMR4H          DATA 0xa5
0000            254   _TMR4L          DATA 0xa4
0000            255   _TMR4RLH        DATA 0xa3
0000            256   _TMR4RLL        DATA 0xa2
0000            257   _TMR5CN0        DATA 0xc0
0000            258   _TMR5CN1        DATA 0xf1
0000            259   _TMR5H          DATA 0xd5
0000            260   _TMR5L          DATA 0xd4
0000            261   _TMR5RLH        DATA 0xd3
0000            262   _TMR5RLL        DATA 0xd2
0000            263   _UART0PCF       DATA 0xd9
0000            264   _UART1FCN0      DATA 0x9d
0000            265   _UART1FCN1      DATA 0xd8
0000            266   _UART1FCT       DATA 0xfa
0000            267   _UART1LIN       DATA 0x9e
0000            268   _UART1PCF       DATA 0xda
0000            269   _VDM0CN         DATA 0xff
0000            270   _WDTCN          DATA 0x97
0000            271   _XBR0           DATA 0xe1
0000            272   _XBR1           DATA 0xe2
0000            273   _XBR2           DATA 0xe3
0000            274   _XOSC0CN        DATA 0x86
0000            275   _DPTR           DATA 0x8382
0000            276   _TMR2RL         DATA 0xcbca
0000            277   _TMR3RL         DATA 0x9392
0000            278   _TMR4RL         DATA 0xa3a2
0000            279   _TMR5RL         DATA 0xd3d2
0000            280   _TMR0           DATA 0x8c8a
0000            281   _TMR1           DATA 0x8d8b
0000            282   _TMR2           DATA 0xcfce
0000            283   _TMR3           DATA 0x9594
0000            284   _TMR4           DATA 0xa5a4
0000            285   _TMR5           DATA 0xd5d4
0000            286   _SBRL1          DATA 0x9695
0000            287   _PCA0           DATA 0xfaf9
0000            288   _PCA0CP0        DATA 0xfcfb
0000            289   _PCA0CP1        DATA 0xeae9
0000            290   _PCA0CP2        DATA 0xeceb
0000            291   _PCA0CP3        DATA 0xf5f4
0000            292   _PCA0CP4        DATA 0x8584
0000            293   _PCA0CP5        DATA 0xdedd
0000            294   _ADC0ASA        DATA 0xb6b5
0000            295   _ADC0GT         DATA 0xc4c3
0000            296   _ADC0           DATA 0xbebd
0000            297   _ADC0LT         DATA 0xc6c5
0000            298   _DAC0           DATA 0x8584
0000            299   _DAC1           DATA 0x8a89
0000            300   _DAC2           DATA 0x8c8b
0000            301   _DAC3           DATA 0x8e8d
0000            302   ;--------------------------------------------------------
0000            303   ; special function bits
0000            304   ;--------------------------------------------------------
0000            305   _ACC_0          BIT 0xe0
0000            306   _ACC_1          BIT 0xe1
0000            307   _ACC_2          BIT 0xe2
0000            308   _ACC_3          BIT 0xe3
0000            309   _ACC_4          BIT 0xe4
0000            310   _ACC_5          BIT 0xe5
0000            311   _ACC_6          BIT 0xe6
0000            312   _ACC_7          BIT 0xe7
0000            313   _TEMPE          BIT 0xe8
0000            314   _ADGN0          BIT 0xe9
0000            315   _ADGN1          BIT 0xea
0000            316   _ADWINT         BIT 0xeb
0000            317   _ADBUSY         BIT 0xec
0000            318   _ADINT          BIT 0xed
0000            319   _IPOEN          BIT 0xee
0000            320   _ADEN           BIT 0xef
0000            321   _B_0            BIT 0xf0
0000            322   _B_1            BIT 0xf1
0000            323   _B_2            BIT 0xf2
0000            324   _B_3            BIT 0xf3
0000            325   _B_4            BIT 0xf4
0000            326   _B_5            BIT 0xf5
0000            327   _B_6            BIT 0xf6
0000            328   _B_7            BIT 0xf7
0000            329   _C0FIF          BIT 0xe8
0000            330   _C0RIF          BIT 0xe9
0000            331   _C1FIF          BIT 0xea
0000            332   _C1RIF          BIT 0xeb
0000            333   _C2FIF          BIT 0xec
0000            334   _C2RIF          BIT 0xed
0000            335   _C3FIF          BIT 0xee
0000            336   _C3RIF          BIT 0xef
0000            337   _D1SRC0         BIT 0x88
0000            338   _D1SRC1         BIT 0x89
0000            339   _D1AMEN         BIT 0x8a
0000            340   _D01REFSL       BIT 0x8b
0000            341   _D3SRC0         BIT 0x8c
0000            342   _D3SRC1         BIT 0x8d
0000            343   _D3AMEN         BIT 0x8e
0000            344   _D23REFSL       BIT 0x8f
0000            345   _D0UDIS         BIT 0x98
0000            346   _D1UDIS         BIT 0x99
0000            347   _D2UDIS         BIT 0x9a
0000            348   _D3UDIS         BIT 0x9b
0000            349   _EX0            BIT 0xa8
0000            350   _ET0            BIT 0xa9
0000            351   _EX1            BIT 0xaa
0000            352   _ET1            BIT 0xab
0000            353   _ES0            BIT 0xac
0000            354   _ET2            BIT 0xad
0000            355   _ESPI0          BIT 0xae
0000            356   _EA             BIT 0xaf
0000            357   _PX0            BIT 0xb8
0000            358   _PT0            BIT 0xb9
0000            359   _PX1            BIT 0xba
0000            360   _PT1            BIT 0xbb
0000            361   _PS0            BIT 0xbc
0000            362   _PT2            BIT 0xbd
0000            363   _PSPI0          BIT 0xbe
0000            364   _P0_0           BIT 0x80
0000            365   _P0_1           BIT 0x81
0000            366   _P0_2           BIT 0x82
0000            367   _P0_3           BIT 0x83
0000            368   _P0_4           BIT 0x84
0000            369   _P0_5           BIT 0x85
0000            370   _P0_6           BIT 0x86
0000            371   _P0_7           BIT 0x87
0000            372   _P1_0           BIT 0x90
0000            373   _P1_1           BIT 0x91
0000            374   _P1_2           BIT 0x92
0000            375   _P1_3           BIT 0x93
0000            376   _P1_4           BIT 0x94
0000            377   _P1_5           BIT 0x95
0000            378   _P1_6           BIT 0x96
0000            379   _P1_7           BIT 0x97
0000            380   _P2_0           BIT 0xa0
0000            381   _P2_1           BIT 0xa1
0000            382   _P2_2           BIT 0xa2
0000            383   _P2_3           BIT 0xa3
0000            384   _P2_4           BIT 0xa4
0000            385   _P2_5           BIT 0xa5
0000            386   _P2_6           BIT 0xa6
0000            387   _P3_0           BIT 0xb0
0000            388   _P3_1           BIT 0xb1
0000            389   _P3_2           BIT 0xb2
0000            390   _P3_3           BIT 0xb3
0000            391   _P3_4           BIT 0xb4
0000            392   _P3_7           BIT 0xb7
0000            393   _CCF0           BIT 0xd8
0000            394   _CCF1           BIT 0xd9
0000            395   _CCF2           BIT 0xda
0000            396   _CCF3           BIT 0xdb
0000            397   _CCF4           BIT 0xdc
0000            398   _CCF5           BIT 0xdd
0000            399   _CR             BIT 0xde
0000            400   _CF             BIT 0xdf
0000            401   _PARITY         BIT 0xd0
0000            402   _F1             BIT 0xd1
0000            403   _OV             BIT 0xd2
0000            404   _RS0            BIT 0xd3
0000            405   _RS1            BIT 0xd4
0000            406   _F0             BIT 0xd5
0000            407   _AC             BIT 0xd6
0000            408   _CY             BIT 0xd7
0000            409   _RI             BIT 0x98
0000            410   _TI             BIT 0x99
0000            411   _RB8            BIT 0x9a
0000            412   _TB8            BIT 0x9b
0000            413   _REN            BIT 0x9c
0000            414   _CE             BIT 0x9d
0000            415   _SMODE          BIT 0x9e
0000            416   _RI1            BIT 0xc8
0000            417   _TI1            BIT 0xc9
0000            418   _RBX1           BIT 0xca
0000            419   _TBX1           BIT 0xcb
0000            420   _REN1           BIT 0xcc
0000            421   _PERR1          BIT 0xcd
0000            422   _OVR1           BIT 0xce
0000            423   _SI             BIT 0xc0
0000            424   _ACK            BIT 0xc1
0000            425   _ARBLOST        BIT 0xc2
0000            426   _ACKRQ          BIT 0xc3
0000            427   _STO            BIT 0xc4
0000            428   _STA            BIT 0xc5
0000            429   _TXMODE         BIT 0xc6
0000            430   _MASTER         BIT 0xc7
0000            431   _SPIEN          BIT 0xf8
0000            432   _TXNF           BIT 0xf9
0000            433   _NSSMD0         BIT 0xfa
0000            434   _NSSMD1         BIT 0xfb
0000            435   _RXOVRN         BIT 0xfc
0000            436   _MODF           BIT 0xfd
0000            437   _WCOL           BIT 0xfe
0000            438   _SPIF           BIT 0xff
0000            439   _IT0            BIT 0x88
0000            440   _IE0            BIT 0x89
0000            441   _IT1            BIT 0x8a
0000            442   _IE1            BIT 0x8b
0000            443   _TR0            BIT 0x8c
0000            444   _TF0            BIT 0x8d
0000            445   _TR1            BIT 0x8e
0000            446   _TF1            BIT 0x8f
0000            447   _T2XCLK0        BIT 0xc8
0000            448   _T2XCLK1        BIT 0xc9
0000            449   _TR2            BIT 0xca
0000            450   _T2SPLIT        BIT 0xcb
0000            451   _TF2CEN         BIT 0xcc
0000            452   _TF2LEN         BIT 0xcd
0000            453   _TF2L           BIT 0xce
0000            454   _TF2H           BIT 0xcf
0000            455   _T4XCLK0        BIT 0x98
0000            456   _T4XCLK1        BIT 0x99
0000            457   _TR4            BIT 0x9a
0000            458   _T4SPLIT        BIT 0x9b
0000            459   _TF4CEN         BIT 0x9c
0000            460   _TF4LEN         BIT 0x9d
0000            461   _TF4L           BIT 0x9e
0000            462   _TF4H           BIT 0x9f
0000            463   _T5XCLK0        BIT 0xc0
0000            464   _T5XCLK1        BIT 0xc1
0000            465   _TR5            BIT 0xc2
0000            466   _T5SPLIT        BIT 0xc3
0000            467   _TF5CEN         BIT 0xc4
0000            468   _TF5LEN         BIT 0xc5
0000            469   _TF5L           BIT 0xc6
0000            470   _TF5H           BIT 0xc7
0000            471   _RIE            BIT 0xd8
0000            472   _RXTO0          BIT 0xd9
0000            473   _RXTO1          BIT 0xda
0000            474   _RFRQ           BIT 0xdb
0000            475   _TIE            BIT 0xdc
0000            476   _TXHOLD         BIT 0xdd
0000            477   _TXNF1          BIT 0xde
0000            478   _TFRQ           BIT 0xdf
0000            479   ;--------------------------------------------------------
0000            480   ; overlayable register banks
0000            481   ;--------------------------------------------------------
0000            482            rbank0 segment data overlay
0000            483   ;--------------------------------------------------------
0000            484   ; internal ram data
0000            485   ;--------------------------------------------------------
0000            486            rseg R_DSEG
0000            487   _main_v_1_65:
0000            488            ds 8
0008            489   _main_sloc0_1_0:
0008            490            ds 4
000C            491   ;--------------------------------------------------------
000C            492   ; overlayable items in internal ram 
000C            493   ;--------------------------------------------------------
0000            494            rseg    R_OSEG
0000            495            rseg    R_OSEG
0000            496   _InitPinADC_PARM_2:
0000            497            ds 1
0001            498            rseg    R_OSEG
0001            499   ;--------------------------------------------------------
0001            500   ; indirectly addressable internal ram data
0001            501   ;--------------------------------------------------------
0000            502            rseg R_ISEG
0000            503   ;--------------------------------------------------------
0000            504   ; absolute internal ram data
0000            505   ;--------------------------------------------------------
0000            506            DSEG
0000            507   ;--------------------------------------------------------
0000            508   ; bit data
0000            509   ;--------------------------------------------------------
0000            510            rseg R_BSEG
0000            511   ;--------------------------------------------------------
0000            512   ; paged external ram data
0000            513   ;--------------------------------------------------------
0000            514            rseg R_PSEG
0000            515   ;--------------------------------------------------------
0000            516   ; external ram data
0000            517   ;--------------------------------------------------------
0000            518            rseg R_XSEG
0000            519   ;--------------------------------------------------------
0000            520   ; absolute external ram data
0000            521   ;--------------------------------------------------------
0000            522            XSEG
0000            523   ;--------------------------------------------------------
0000            524   ; external initialized ram data
0000            525   ;--------------------------------------------------------
0000            526            rseg R_IXSEG
0000            527            rseg R_HOME
0000            528            rseg R_GSINIT
0000            529            rseg R_CSEG
0000            530   ;--------------------------------------------------------
0000            531   ; Reset entry point and interrupt vectors
0000            532   ;--------------------------------------------------------
0000            533            CSEG at 0x0000
0000 020000     534            ljmp    _crt0
0003            535   ;--------------------------------------------------------
0003            536   ; global & static initialisations
0003            537   ;--------------------------------------------------------
0000            538            rseg R_HOME
0000            539            rseg R_GSINIT
0000            540            rseg R_GSINIT
0000            541   ;--------------------------------------------------------
0000            542   ; data variables initialization
0000            543   ;--------------------------------------------------------
0000            544            rseg R_DINIT
0000            545            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            546   ;--------------------------------------------------------
0000            547   ; code
0000            548   ;--------------------------------------------------------
0000            549            rseg R_CSEG
0000            550   ;------------------------------------------------------------
0000            551   ;Allocation info for local variables in function '_c51_external_startup'
0000            552   ;------------------------------------------------------------
0000            553   ;------------------------------------------------------------
0000            554   ;        EFM8_ADC.c:20: char _c51_external_startup (void)
0000            555   ;        -----------------------------------------
0000            556   ;         function _c51_external_startup
0000            557   ;        -----------------------------------------
0000            558   __c51_external_startup:
0000            559            using   0
0000            560   ;        EFM8_ADC.c:23: SFRPAGE = 0x00;
0000 75A700     561            mov     _SFRPAGE,#0x00
0003            562   ;        EFM8_ADC.c:24: WDTCN = 0xDE; //First key
0003 7597DE     563            mov     _WDTCN,#0xDE
0006            564   ;        EFM8_ADC.c:25: WDTCN = 0xAD; //Second key
0006 7597AD     565            mov     _WDTCN,#0xAD
0009            566   ;        EFM8_ADC.c:27: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     567            mov     _VDM0CN,#0x80
000C            568   ;        EFM8_ADC.c:28: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     569            mov     _RSTSRC,#0x06
000F            570   ;        EFM8_ADC.c:35: SFRPAGE = 0x10;
000F 75A710     571            mov     _SFRPAGE,#0x10
0012            572   ;        EFM8_ADC.c:36: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     573            mov     _PFE0CN,#0x20
0015            574   ;        EFM8_ADC.c:37: SFRPAGE = 0x00;
0015 75A700     575            mov     _SFRPAGE,#0x00
0018            576   ;        EFM8_ADC.c:58: CLKSEL = 0x00;
0018 75A900     577            mov     _CLKSEL,#0x00
001B            578   ;        EFM8_ADC.c:59: CLKSEL = 0x00;
001B 75A900     579            mov     _CLKSEL,#0x00
001E            580   ;        EFM8_ADC.c:60: while ((CLKSEL & 0x80) == 0);
001E            581   L002001?:
001E E5A9       582            mov     a,_CLKSEL
0020 30E7E8     583            jnb     acc.7,L002001?
0023            584   ;        EFM8_ADC.c:61: CLKSEL = 0x03;
0023 75A903     585            mov     _CLKSEL,#0x03
0026            586   ;        EFM8_ADC.c:62: CLKSEL = 0x03;
0026 75A903     587            mov     _CLKSEL,#0x03
0029            588   ;        EFM8_ADC.c:63: while ((CLKSEL & 0x80) == 0);
0029            589   L002004?:
0029 E5A9       590            mov     a,_CLKSEL
002B 30E768     591            jnb     acc.7,L002004?
002E            592   ;        EFM8_ADC.c:68: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     593            orl     _P0MDOUT,#0x10
0031            594   ;        EFM8_ADC.c:69: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     595            mov     _XBR0,#0x01
0034            596   ;        EFM8_ADC.c:70: XBR1     = 0X00;
0034 75E200     597            mov     _XBR1,#0x00
0037            598   ;        EFM8_ADC.c:71: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     599            mov     _XBR2,#0x40
003A            600   ;        EFM8_ADC.c:77: SCON0 = 0x10;
003A 759810     601            mov     _SCON0,#0x10
003D            602   ;        EFM8_ADC.c:78: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     603            mov     _TH1,#0xE6
0040            604   ;        EFM8_ADC.c:79: TL1 = TH1;      // Init Timer1
0040 858D8B     605            mov     _TL1,_TH1
0043            606   ;        EFM8_ADC.c:80: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     607            anl     _TMOD,#0x0F
0046            608   ;        EFM8_ADC.c:81: TMOD |=  0x21;
0046 438921     609            orl     _TMOD,#0x21
0049            610   ;        EFM8_ADC.c:82: TR1 = 1; // START Timer1
0049 D28E       611            setb    _TR1
004B            612   ;        EFM8_ADC.c:83: TI = 1;  // Indicate TX0 ready
004B D299       613            setb    _TI
004D            614   ;        EFM8_ADC.c:85: return 0;
004D 758200     615            mov     dpl,#0x00
0050 22         616            ret
0051            617   ;------------------------------------------------------------
0051            618   ;Allocation info for local variables in function 'InitADC'
0051            619   ;------------------------------------------------------------
0051            620   ;------------------------------------------------------------
0051            621   ;        EFM8_ADC.c:90: void InitADC (void)
0051            622   ;        -----------------------------------------
0051            623   ;         function InitADC
0051            624   ;        -----------------------------------------
0051            625   _InitADC:
0051            626   ;        EFM8_ADC.c:92: SFRPAGE = 0x00;
0051 75A700     627            mov     _SFRPAGE,#0x00
0054            628   ;        EFM8_ADC.c:93: ADEN=0; // Disable ADC
0054 C2EF       629            clr     _ADEN
0056            630   ;        EFM8_ADC.c:98: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     631            mov     _ADC0CN1,#0x80
0059            632   ;        EFM8_ADC.c:102: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     633            mov     _ADC0CF0,#0x20
005C            634   ;        EFM8_ADC.c:106: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     635            mov     _ADC0CF1,#0x1E
005F            636   ;        EFM8_ADC.c:115: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     637            mov     _ADC0CN0,#0x00
0062            638   ;        EFM8_ADC.c:120: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     639            mov     _ADC0CF2,#0x3F
0065            640   ;        EFM8_ADC.c:124: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     641            mov     _ADC0CN2,#0x00
0068            642   ;        EFM8_ADC.c:126: ADEN=1; // Enable ADC
0068 D2EF       643            setb    _ADEN
006A 22         644            ret
006B            645   ;------------------------------------------------------------
006B            646   ;Allocation info for local variables in function 'Timer3us'
006B            647   ;------------------------------------------------------------
006B            648   ;us                        Allocated to registers r2 
006B            649   ;i                         Allocated to registers r3 
006B            650   ;------------------------------------------------------------
006B            651   ;        EFM8_ADC.c:130: void Timer3us(unsigned char us)
006B            652   ;        -----------------------------------------
006B            653   ;         function Timer3us
006B            654   ;        -----------------------------------------
006B            655   _Timer3us:
006B AA82       656            mov     r2,dpl
006D            657   ;        EFM8_ADC.c:135: CKCON0|=0b_0100_0000;
006D 438E40     658            orl     _CKCON0,#0x40
0070            659   ;        EFM8_ADC.c:137: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     660            mov     _TMR3RL,#0xB8
0073 7593FF     661            mov     (_TMR3RL >> 8),#0xFF
0076            662   ;        EFM8_ADC.c:138: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     663            mov     _TMR3,_TMR3RL
0079 859395     664            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            665   ;        EFM8_ADC.c:140: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     666            mov     _TMR3CN0,#0x04
007F            667   ;        EFM8_ADC.c:141: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       668            mov     r3,#0x00
0081            669   L004004?:
0081 C3         670            clr     c
0082 EB         671            mov     a,r3
0083 9A         672            subb    a,r2
0084 5000       673            jnc     L004007?
0086            674   ;        EFM8_ADC.c:143: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            675   L004001?:
0086 E591       676            mov     a,_TMR3CN0
0088 30E768     677            jnb     acc.7,L004001?
008B            678   ;        EFM8_ADC.c:144: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     679            anl     _TMR3CN0,#0x7F
008E            680   ;        EFM8_ADC.c:141: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         681            inc     r3
008F 8000       682            sjmp    L004004?
0091            683   L004007?:
0091            684   ;        EFM8_ADC.c:146: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     685            mov     _TMR3CN0,#0x00
0094 22         686            ret
0095            687   ;------------------------------------------------------------
0095            688   ;Allocation info for local variables in function 'waitms'
0095            689   ;------------------------------------------------------------
0095            690   ;ms                        Allocated to registers r2 r3 
0095            691   ;j                         Allocated to registers r4 r5 
0095            692   ;k                         Allocated to registers r6 
0095            693   ;------------------------------------------------------------
0095            694   ;        EFM8_ADC.c:149: void waitms (unsigned int ms)
0095            695   ;        -----------------------------------------
0095            696   ;         function waitms
0095            697   ;        -----------------------------------------
0095            698   _waitms:
0095 AA82       699            mov     r2,dpl
0097 AB83       700            mov     r3,dph
0099            701   ;        EFM8_ADC.c:153: for(j=0; j<ms; j++)
0099 7C00       702            mov     r4,#0x00
009B 7D00       703            mov     r5,#0x00
009D            704   L005005?:
009D C3         705            clr     c
009E EC         706            mov     a,r4
009F 9A         707            subb    a,r2
00A0 ED         708            mov     a,r5
00A1 9B         709            subb    a,r3
00A2 5000       710            jnc     L005009?
00A4            711   ;        EFM8_ADC.c:154: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       712            mov     r6,#0x00
00A6            713   L005001?:
00A6 BE04A8     714            cjne    r6,#0x04,L005018?
00A9            715   L005018?:
00A9 5000       716            jnc     L005007?
00AB 7582FA     717            mov     dpl,#0xFA
00AE C002       718            push    ar2
00B0 C003       719            push    ar3
00B2 C004       720            push    ar4
00B4 C005       721            push    ar5
00B6 C006       722            push    ar6
00B8 120000     723            lcall   _Timer3us
00BB D006       724            pop     ar6
00BD D005       725            pop     ar5
00BF D004       726            pop     ar4
00C1 D003       727            pop     ar3
00C3 D002       728            pop     ar2
00C5 0E         729            inc     r6
00C6 8000       730            sjmp    L005001?
00C8            731   L005007?:
00C8            732   ;        EFM8_ADC.c:153: for(j=0; j<ms; j++)
00C8 0C         733            inc     r4
00C9 BC00E8     734            cjne    r4,#0x00,L005005?
00CC 0D         735            inc     r5
00CD 8000       736            sjmp    L005005?
00CF            737   L005009?:
00CF 22         738            ret
00D0            739   ;------------------------------------------------------------
00D0            740   ;Allocation info for local variables in function 'InitPinADC'
00D0            741   ;------------------------------------------------------------
00D0            742   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            743   ;portno                    Allocated to registers r2 
00D0            744   ;mask                      Allocated to registers r3 
00D0            745   ;------------------------------------------------------------
00D0            746   ;        EFM8_ADC.c:159: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            747   ;        -----------------------------------------
00D0            748   ;         function InitPinADC
00D0            749   ;        -----------------------------------------
00D0            750   _InitPinADC:
00D0 AA82       751            mov     r2,dpl
00D2            752   ;        EFM8_ADC.c:163: mask=1<<pinno;
00D2 8558F0     753            mov     b,_InitPinADC_PARM_2
00D5 05F0       754            inc     b
00D7 7401       755            mov     a,#0x01
00D9 8000       756            sjmp    L006013?
00DB            757   L006011?:
00DB 25E0       758            add     a,acc
00DD            759   L006013?:
00DD D5F0A8     760            djnz    b,L006011?
00E0 FB         761            mov     r3,a
00E1            762   ;        EFM8_ADC.c:165: SFRPAGE = 0x20;
00E1 75A720     763            mov     _SFRPAGE,#0x20
00E4            764   ;        EFM8_ADC.c:166: switch (portno)
00E4 BA00E8     765            cjne    r2,#0x00,L006014?
00E7 8000       766            sjmp    L006001?
00E9            767   L006014?:
00E9 BA0168     768            cjne    r2,#0x01,L006015?
00EC 8000       769            sjmp    L006002?
00EE            770   L006015?:
00EE            771   ;        EFM8_ADC.c:168: case 0:
00EE BA02E8     772            cjne    r2,#0x02,L006005?
00F1 8000       773            sjmp    L006003?
00F3            774   L006001?:
00F3            775   ;        EFM8_ADC.c:169: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         776            mov     a,r3
00F4 F4         777            cpl     a
00F5 FA         778            mov     r2,a
00F6 52F1       779            anl     _P0MDIN,a
00F8            780   ;        EFM8_ADC.c:170: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         781            mov     a,r3
00F9 42D4       782            orl     _P0SKIP,a
00FB            783   ;        EFM8_ADC.c:171: break;
00FB            784   ;        EFM8_ADC.c:172: case 1:
00FB 8000       785            sjmp    L006005?
00FD            786   L006002?:
00FD            787   ;        EFM8_ADC.c:173: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         788            mov     a,r3
00FE F4         789            cpl     a
00FF FA         790            mov     r2,a
0100 52F2       791            anl     _P1MDIN,a
0102            792   ;        EFM8_ADC.c:174: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         793            mov     a,r3
0103 42D5       794            orl     _P1SKIP,a
0105            795   ;        EFM8_ADC.c:175: break;
0105            796   ;        EFM8_ADC.c:176: case 2:
0105 8000       797            sjmp    L006005?
0107            798   L006003?:
0107            799   ;        EFM8_ADC.c:177: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         800            mov     a,r3
0108 F4         801            cpl     a
0109 FA         802            mov     r2,a
010A 52F3       803            anl     _P2MDIN,a
010C            804   ;        EFM8_ADC.c:178: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         805            mov     a,r3
010D 42CC       806            orl     _P2SKIP,a
010F            807   ;        EFM8_ADC.c:182: }
010F            808   L006005?:
010F            809   ;        EFM8_ADC.c:183: SFRPAGE = 0x00;
010F 75A700     810            mov     _SFRPAGE,#0x00
0112 22         811            ret
0113            812   ;------------------------------------------------------------
0113            813   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            814   ;------------------------------------------------------------
0113            815   ;pin                       Allocated to registers 
0113            816   ;------------------------------------------------------------
0113            817   ;        EFM8_ADC.c:186: unsigned int ADC_at_Pin(unsigned char pin)
0113            818   ;        -----------------------------------------
0113            819   ;         function ADC_at_Pin
0113            820   ;        -----------------------------------------
0113            821   _ADC_at_Pin:
0113 8582BB     822            mov     _ADC0MX,dpl
0116            823   ;        EFM8_ADC.c:189: ADINT = 0;
0116 C2ED       824            clr     _ADINT
0118            825   ;        EFM8_ADC.c:190: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       826            setb    _ADBUSY
011A            827   ;        EFM8_ADC.c:191: while (!ADINT); // Wait for conversion to complete
011A            828   L007001?:
011A 30ED68     829            jnb     _ADINT,L007001?
011D            830   ;        EFM8_ADC.c:192: return (ADC0);
011D 85BD82     831            mov     dpl,_ADC0
0120 85BE83     832            mov     dph,(_ADC0 >> 8)
0123 22         833            ret
0124            834   ;------------------------------------------------------------
0124            835   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            836   ;------------------------------------------------------------
0124            837   ;pin                       Allocated to registers r2 
0124            838   ;------------------------------------------------------------
0124            839   ;        EFM8_ADC.c:195: float Volts_at_Pin(unsigned char pin)
0124            840   ;        -----------------------------------------
0124            841   ;         function Volts_at_Pin
0124            842   ;        -----------------------------------------
0124            843   _Volts_at_Pin:
0124            844   ;        EFM8_ADC.c:197: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     845            lcall   _ADC_at_Pin
0127 120000     846            lcall   ___uint2fs
012A AA82       847            mov     r2,dpl
012C AB83       848            mov     r3,dph
012E ACF0       849            mov     r4,b
0130 FD         850            mov     r5,a
0131 C002       851            push    ar2
0133 C003       852            push    ar3
0135 C004       853            push    ar4
0137 C005       854            push    ar5
0139 906C8B     855            mov     dptr,#0x6C8B
013C 75F053     856            mov     b,#0x53
013F 7440       857            mov     a,#0x40
0141 120000     858            lcall   ___fsmul
0144 AA82       859            mov     r2,dpl
0146 AB83       860            mov     r3,dph
0148 ACF0       861            mov     r4,b
014A FD         862            mov     r5,a
014B E581       863            mov     a,sp
014D 24FC       864            add     a,#0xfc
014F F581       865            mov     sp,a
0151 E4         866            clr     a
0152 C0E0       867            push    acc
0154 74FC       868            mov     a,#0xFC
0156 C0E0       869            push    acc
0158 747F       870            mov     a,#0x7F
015A C0E0       871            push    acc
015C 7446       872            mov     a,#0x46
015E C0E0       873            push    acc
0160 8A82       874            mov     dpl,r2
0162 8B83       875            mov     dph,r3
0164 8CF0       876            mov     b,r4
0166 ED         877            mov     a,r5
0167 120000     878            lcall   ___fsdiv
016A AA82       879            mov     r2,dpl
016C AB83       880            mov     r3,dph
016E ACF0       881            mov     r4,b
0170 FD         882            mov     r5,a
0171 E581       883            mov     a,sp
0173 24FC       884            add     a,#0xfc
0175 F581       885            mov     sp,a
0177 8A82       886            mov     dpl,r2
0179 8B83       887            mov     dph,r3
017B 8CF0       888            mov     b,r4
017D ED         889            mov     a,r5
017E 22         890            ret
017F            891   ;------------------------------------------------------------
017F            892   ;Allocation info for local variables in function 'Get_ADC'
017F            893   ;------------------------------------------------------------
017F            894   ;------------------------------------------------------------
017F            895   ;        EFM8_ADC.c:201: unsigned int Get_ADC (void)
017F            896   ;        -----------------------------------------
017F            897   ;         function Get_ADC
017F            898   ;        -----------------------------------------
017F            899   _Get_ADC:
017F            900   ;        EFM8_ADC.c:203: ADINT = 0;
017F C2ED       901            clr     _ADINT
0181            902   ;        EFM8_ADC.c:204: ADBUSY = 1;
0181 D2EC       903            setb    _ADBUSY
0183            904   ;        EFM8_ADC.c:205: while (!ADINT); // Wait for conversion to complete
0183            905   L009001?:
0183 30EDA8     906            jnb     _ADINT,L009001?
0186            907   ;        EFM8_ADC.c:206: return (ADC0);
0186 85BD82     908            mov     dpl,_ADC0
0189 85BE83     909            mov     dph,(_ADC0 >> 8)
018C 22         910            ret
018D            911   ;------------------------------------------------------------
018D            912   ;Allocation info for local variables in function 'get_period'
018D            913   ;------------------------------------------------------------
018D            914   ;half_period               Allocated to registers r2 r3 r4 r5 
018D            915   ;overflow_count            Allocated to registers 
018D            916   ;------------------------------------------------------------
018D            917   ;        EFM8_ADC.c:209: float get_period(void)
018D            918   ;        -----------------------------------------
018D            919   ;         function get_period
018D            920   ;        -----------------------------------------
018D            921   _get_period:
018D            922   ;        EFM8_ADC.c:214: ADC0MX=QFP32_MUX_P2_4;
018D 75BB11     923            mov     _ADC0MX,#0x11
0190            924   ;        EFM8_ADC.c:215: ADINT = 0;
0190 C2ED       925            clr     _ADINT
0192            926   ;        EFM8_ADC.c:216: ADBUSY=1;
0192 D2EC       927            setb    _ADBUSY
0194            928   ;        EFM8_ADC.c:217: while (!ADINT); // Wait for conversion to complete
0194            929   L010001?:
0194 30EDE8     930            jnb     _ADINT,L010001?
0197            931   ;        EFM8_ADC.c:219: TL0=0;
0197 758A00     932            mov     _TL0,#0x00
019A            933   ;        EFM8_ADC.c:220: TH0=0;
019A 758C00     934            mov     _TH0,#0x00
019D            935   ;        EFM8_ADC.c:221: while (Get_ADC()!=0); // Wait for the signal to be zero
019D            936   L010004?:
019D 120000     937            lcall   _Get_ADC
01A0 E582       938            mov     a,dpl
01A2 8583F0     939            mov     b,dph
01A5 45F0       940            orl     a,b
01A7 7000       941            jnz     L010004?
01A9            942   ;        EFM8_ADC.c:222: while (Get_ADC()==0); // Wait for the signal to be positive
01A9            943   L010007?:
01A9 120000     944            lcall   _Get_ADC
01AC E582       945            mov     a,dpl
01AE 8583F0     946            mov     b,dph
01B1 45F0       947            orl     a,b
01B3 6000       948            jz      L010007?
01B5            949   ;        EFM8_ADC.c:223: TR0=1; // Start the timer 0
01B5 D28C       950            setb    _TR0
01B7            951   ;        EFM8_ADC.c:224: while (Get_ADC()!=0); // Wait for the signal to be zero again
01B7            952   L010010?:
01B7 120000     953            lcall   _Get_ADC
01BA E582       954            mov     a,dpl
01BC 8583F0     955            mov     b,dph
01BF 45F0       956            orl     a,b
01C1 7000       957            jnz     L010010?
01C3            958   ;        EFM8_ADC.c:225: TR0=0; // Stop timer 0
01C3 C28C       959            clr     _TR0
01C5            960   ;        EFM8_ADC.c:227: half_period=TH0*256.0+TL0; // The 16-bit number [TH0-TL0]
01C5 858C82     961            mov     dpl,_TH0
01C8 120000     962            lcall   ___uchar2fs
01CB AA82       963            mov     r2,dpl
01CD AB83       964            mov     r3,dph
01CF ACF0       965            mov     r4,b
01D1 FD         966            mov     r5,a
01D2 C002       967            push    ar2
01D4 C003       968            push    ar3
01D6 C004       969            push    ar4
01D8 C005       970            push    ar5
01DA 900000     971            mov     dptr,#0x0000
01DD 75F080     972            mov     b,#0x80
01E0 7443       973            mov     a,#0x43
01E2 120000     974            lcall   ___fsmul
01E5 AA82       975            mov     r2,dpl
01E7 AB83       976            mov     r3,dph
01E9 ACF0       977            mov     r4,b
01EB FD         978            mov     r5,a
01EC E581       979            mov     a,sp
01EE 24FC       980            add     a,#0xfc
01F0 F581       981            mov     sp,a
01F2 AE8A       982            mov     r6,_TL0
01F4 7F00       983            mov     r7,#0x00
01F6 8E82       984            mov     dpl,r6
01F8 8F83       985            mov     dph,r7
01FA C002       986            push    ar2
01FC C003       987            push    ar3
01FE C004       988            push    ar4
0200 C005       989            push    ar5
0202 120000     990            lcall   ___sint2fs
0205 AE82       991            mov     r6,dpl
0207 AF83       992            mov     r7,dph
0209 A8F0       993            mov     r0,b
020B F9         994            mov     r1,a
020C D005       995            pop     ar5
020E D004       996            pop     ar4
0210 D003       997            pop     ar3
0212 D002       998            pop     ar2
0214 C006       999            push    ar6
0216 C007      1000            push    ar7
0218 C000      1001            push    ar0
021A C001      1002            push    ar1
021C 8A82      1003            mov     dpl,r2
021E 8B83      1004            mov     dph,r3
0220 8CF0      1005            mov     b,r4
0222 ED        1006            mov     a,r5
0223 120000    1007            lcall   ___fsadd
0226 AA82      1008            mov     r2,dpl
0228 AB83      1009            mov     r3,dph
022A ACF0      1010            mov     r4,b
022C FD        1011            mov     r5,a
022D E581      1012            mov     a,sp
022F 24FC      1013            add     a,#0xfc
0231 F581      1014            mov     sp,a
0233           1015   ;        EFM8_ADC.c:230: return half_period;
0233 8A82      1016            mov     dpl,r2
0235 8B83      1017            mov     dph,r3
0237 8CF0      1018            mov     b,r4
0239 ED        1019            mov     a,r5
023A 22        1020            ret
023B           1021   ;------------------------------------------------------------
023B           1022   ;Allocation info for local variables in function 'get_period_2'
023B           1023   ;------------------------------------------------------------
023B           1024   ;half_period               Allocated to registers r2 r3 r4 r5 
023B           1025   ;overflow_count            Allocated to registers 
023B           1026   ;------------------------------------------------------------
023B           1027   ;        EFM8_ADC.c:233: float get_period_2(void)
023B           1028   ;        -----------------------------------------
023B           1029   ;         function get_period_2
023B           1030   ;        -----------------------------------------
023B           1031   _get_period_2:
023B           1032   ;        EFM8_ADC.c:238: ADC0MX=QFP32_MUX_P2_4;
023B 75BB11    1033            mov     _ADC0MX,#0x11
023E           1034   ;        EFM8_ADC.c:239: ADINT = 0;
023E C2ED      1035            clr     _ADINT
0240           1036   ;        EFM8_ADC.c:240: ADBUSY=1;
0240 D2EC      1037            setb    _ADBUSY
0242           1038   ;        EFM8_ADC.c:241: while (!ADINT); // Wait for conversion to complete
0242           1039   L011001?:
0242 30EDA8    1040            jnb     _ADINT,L011001?
0245           1041   ;        EFM8_ADC.c:243: TL0=0;
0245 758A00    1042            mov     _TL0,#0x00
0248           1043   ;        EFM8_ADC.c:244: TH0=0;
0248 758C00    1044            mov     _TH0,#0x00
024B           1045   ;        EFM8_ADC.c:245: while (Get_ADC()!=0); // Wait for the signal to be zero
024B           1046   L011004?:
024B 120000    1047            lcall   _Get_ADC
024E E582      1048            mov     a,dpl
0250 8583F0    1049            mov     b,dph
0253 45F0      1050            orl     a,b
0255 7000      1051            jnz     L011004?
0257           1052   ;        EFM8_ADC.c:246: while (Get_ADC()==0); // Wait for the signal to be positive
0257           1053   L011007?:
0257 120000    1054            lcall   _Get_ADC
025A E582      1055            mov     a,dpl
025C 8583F0    1056            mov     b,dph
025F 45F0      1057            orl     a,b
0261 6000      1058            jz      L011007?
0263           1059   ;        EFM8_ADC.c:247: TR0=1; // Start the timer 0
0263 D28C      1060            setb    _TR0
0265           1061   ;        EFM8_ADC.c:248: ADC0MX=QFP32_MUX_P2_5;
0265 75BB12    1062            mov     _ADC0MX,#0x12
0268           1063   ;        EFM8_ADC.c:249: while (Get_ADC()!=0); // Wait for the signal to be zero again
0268           1064   L011010?:
0268 120000    1065            lcall   _Get_ADC
026B E582      1066            mov     a,dpl
026D 8583F0    1067            mov     b,dph
0270 45F0      1068            orl     a,b
0272 7000      1069            jnz     L011010?
0274           1070   ;        EFM8_ADC.c:250: TR0=0; // Stop timer 0
0274 C28C      1071            clr     _TR0
0276           1072   ;        EFM8_ADC.c:252: half_period=TH0*256.0+TL0; // The 16-bit number [TH0-TL0]
0276 858C82    1073            mov     dpl,_TH0
0279 120000    1074            lcall   ___uchar2fs
027C AA82      1075            mov     r2,dpl
027E AB83      1076            mov     r3,dph
0280 ACF0      1077            mov     r4,b
0282 FD        1078            mov     r5,a
0283 C002      1079            push    ar2
0285 C003      1080            push    ar3
0287 C004      1081            push    ar4
0289 C005      1082            push    ar5
028B 900000    1083            mov     dptr,#0x0000
028E 75F080    1084            mov     b,#0x80
0291 7443      1085            mov     a,#0x43
0293 120000    1086            lcall   ___fsmul
0296 AA82      1087            mov     r2,dpl
0298 AB83      1088            mov     r3,dph
029A ACF0      1089            mov     r4,b
029C FD        1090            mov     r5,a
029D E581      1091            mov     a,sp
029F 24FC      1092            add     a,#0xfc
02A1 F581      1093            mov     sp,a
02A3 AE8A      1094            mov     r6,_TL0
02A5 7F00      1095            mov     r7,#0x00
02A7 8E82      1096            mov     dpl,r6
02A9 8F83      1097            mov     dph,r7
02AB C002      1098            push    ar2
02AD C003      1099            push    ar3
02AF C004      1100            push    ar4
02B1 C005      1101            push    ar5
02B3 120000    1102            lcall   ___sint2fs
02B6 AE82      1103            mov     r6,dpl
02B8 AF83      1104            mov     r7,dph
02BA A8F0      1105            mov     r0,b
02BC F9        1106            mov     r1,a
02BD D005      1107            pop     ar5
02BF D004      1108            pop     ar4
02C1 D003      1109            pop     ar3
02C3 D002      1110            pop     ar2
02C5 C006      1111            push    ar6
02C7 C007      1112            push    ar7
02C9 C000      1113            push    ar0
02CB C001      1114            push    ar1
02CD 8A82      1115            mov     dpl,r2
02CF 8B83      1116            mov     dph,r3
02D1 8CF0      1117            mov     b,r4
02D3 ED        1118            mov     a,r5
02D4 120000    1119            lcall   ___fsadd
02D7 AA82      1120            mov     r2,dpl
02D9 AB83      1121            mov     r3,dph
02DB ACF0      1122            mov     r4,b
02DD FD        1123            mov     r5,a
02DE E581      1124            mov     a,sp
02E0 24FC      1125            add     a,#0xfc
02E2 F581      1126            mov     sp,a
02E4           1127   ;        EFM8_ADC.c:255: return half_period;
02E4 8A82      1128            mov     dpl,r2
02E6 8B83      1129            mov     dph,r3
02E8 8CF0      1130            mov     b,r4
02EA ED        1131            mov     a,r5
02EB 22        1132            ret
02EC           1133   ;------------------------------------------------------------
02EC           1134   ;Allocation info for local variables in function 'main'
02EC           1135   ;------------------------------------------------------------
02EC           1136   ;v                         Allocated with name '_main_v_1_65'
02EC           1137   ;hello                     Allocated to registers r2 r3 r4 r5 
02EC           1138   ;peak_voltage_reference    Allocated with name '_main_peak_voltage_reference_1_65'
02EC           1139   ;sloc0                     Allocated with name '_main_sloc0_1_0'
02EC           1140   ;------------------------------------------------------------
02EC           1141   ;        EFM8_ADC.c:259: void main (void)
02EC           1142   ;        -----------------------------------------
02EC           1143   ;         function main
02EC           1144   ;        -----------------------------------------
02EC           1145   _main:
02EC           1146   ;        EFM8_ADC.c:266: waitms(500); // Give PuTTy a chance to start before sending
02EC 9001F4    1147            mov     dptr,#0x01F4
02EF 120000    1148            lcall   _waitms
02F2           1149   ;        EFM8_ADC.c:267: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
02F2 74A8      1150            mov     a,#__str_0
02F4 C0E0      1151            push    acc
02F6 74BF      1152            mov     a,#(__str_0 >> 8)
02F8 C0E0      1153            push    acc
02FA 7480      1154            mov     a,#0x80
02FC C0E0      1155            push    acc
02FE 120000    1156            lcall   _printf
0301 1581      1157            dec     sp
0303 1581      1158            dec     sp
0305 1581      1159            dec     sp
0307           1160   ;        EFM8_ADC.c:272: __FILE__, __DATE__, __TIME__);
0307           1161   ;        EFM8_ADC.c:271: "Compiled: %s, %s\n\n",
0307 7428      1162            mov     a,#__str_4
0309 C0E0      1163            push    acc
030B 74C0      1164            mov     a,#(__str_4 >> 8)
030D C0E0      1165            push    acc
030F 7480      1166            mov     a,#0x80
0311 C0E0      1167            push    acc
0313 7468      1168            mov     a,#__str_3
0315 C0E0      1169            push    acc
0317 74C0      1170            mov     a,#(__str_3 >> 8)
0319 C0E0      1171            push    acc
031B 7480      1172            mov     a,#0x80
031D C0E0      1173            push    acc
031F 74A8      1174            mov     a,#__str_2
0321 C0E0      1175            push    acc
0323 74C0      1176            mov     a,#(__str_2 >> 8)
0325 C0E0      1177            push    acc
0327 7480      1178            mov     a,#0x80
0329 C0E0      1179            push    acc
032B 74E8      1180            mov     a,#__str_1
032D C0E0      1181            push    acc
032F 74C0      1182            mov     a,#(__str_1 >> 8)
0331 C0E0      1183            push    acc
0333 7480      1184            mov     a,#0x80
0335 C0E0      1185            push    acc
0337 120000    1186            lcall   _printf
033A E581      1187            mov     a,sp
033C 24F4      1188            add     a,#0xf4
033E F581      1189            mov     sp,a
0340           1190   ;        EFM8_ADC.c:276: InitPinADC(2, 4); // Configure P2.4 as analog input
0340 755804    1191            mov     _InitPinADC_PARM_2,#0x04
0343 758202    1192            mov     dpl,#0x02
0346 120000    1193            lcall   _InitPinADC
0349           1194   ;        EFM8_ADC.c:277: InitPinADC(2, 5); // Configure P2.5 as analog input
0349 755805    1195            mov     _InitPinADC_PARM_2,#0x05
034C 758202    1196            mov     dpl,#0x02
034F 120000    1197            lcall   _InitPinADC
0352           1198   ;        EFM8_ADC.c:278: InitADC();
0352 120000    1199            lcall   _InitADC
0355           1200   ;        EFM8_ADC.c:280: while(1)
0355           1201   L012002?:
0355           1202   ;        EFM8_ADC.c:285: v[0] = Volts_at_Pin(QFP32_MUX_P2_4);
0355 758211    1203            mov     dpl,#0x11
0358 120000    1204            lcall   _Volts_at_Pin
035B AA82      1205            mov     r2,dpl
035D AB83      1206            mov     r3,dph
035F ACF0      1207            mov     r4,b
0361 FD        1208            mov     r5,a
0362 8A28      1209            mov     _main_v_1_65,r2
0364 8B29      1210            mov     (_main_v_1_65 + 1),r3
0366 8C2A      1211            mov     (_main_v_1_65 + 2),r4
0368 8D2B      1212            mov     (_main_v_1_65 + 3),r5
036A           1213   ;        EFM8_ADC.c:286: v[1] = Volts_at_Pin(QFP32_MUX_P2_5);
036A 758212    1214            mov     dpl,#0x12
036D 120000    1215            lcall   _Volts_at_Pin
0370 AA82      1216            mov     r2,dpl
0372 AB83      1217            mov     r3,dph
0374 ACF0      1218            mov     r4,b
0376 FD        1219            mov     r5,a
0377 8A2C      1220            mov     (_main_v_1_65 + 0x0004),r2
0379 8B2D      1221            mov     ((_main_v_1_65 + 0x0004) + 1),r3
037B 8C2E      1222            mov     ((_main_v_1_65 + 0x0004) + 2),r4
037D 8D2F      1223            mov     ((_main_v_1_65 + 0x0004) + 3),r5
037F           1224   ;        EFM8_ADC.c:291: hello = get_period();
037F 120000    1225            lcall   _get_period
0382 AA82      1226            mov     r2,dpl
0384 AB83      1227            mov     r3,dph
0386 ACF0      1228            mov     r4,b
0388 FD        1229            mov     r5,a
0389           1230   ;        EFM8_ADC.c:292: hello = hello*2*12*1000/SYSCLK;
0389 C002      1231            push    ar2
038B C003      1232            push    ar3
038D C004      1233            push    ar4
038F C005      1234            push    ar5
0391 908000    1235            mov     dptr,#0x8000
0394 75F0BB    1236            mov     b,#0xBB
0397 7446      1237            mov     a,#0x46
0399 120000    1238            lcall   ___fsmul
039C 858268    1239            mov     _main_sloc0_1_0,dpl
039F 858369    1240            mov     (_main_sloc0_1_0 + 1),dph
03A2 85F06A    1241            mov     (_main_sloc0_1_0 + 2),b
03A5 F56B      1242            mov     (_main_sloc0_1_0 + 3),a
03A7 E581      1243            mov     a,sp
03A9 24FC      1244            add     a,#0xfc
03AB F581      1245            mov     sp,a
03AD 7440      1246            mov     a,#0x40
03AF C0E0      1247            push    acc
03B1 7454      1248            mov     a,#0x54
03B3 C0E0      1249            push    acc
03B5 7489      1250            mov     a,#0x89
03B7 C0E0      1251            push    acc
03B9 744C      1252            mov     a,#0x4C
03BB C0E0      1253            push    acc
03BD 856882    1254            mov     dpl,_main_sloc0_1_0
03C0 856983    1255            mov     dph,(_main_sloc0_1_0 + 1)
03C3 856AF0    1256            mov     b,(_main_sloc0_1_0 + 2)
03C6 E56B      1257            mov     a,(_main_sloc0_1_0 + 3)
03C8 120000    1258            lcall   ___fsdiv
03CB AA82      1259            mov     r2,dpl
03CD AB83      1260            mov     r3,dph
03CF ACF0      1261            mov     r4,b
03D1 FD        1262            mov     r5,a
03D2 E581      1263            mov     a,sp
03D4 24FC      1264            add     a,#0xfc
03D6 F581      1265            mov     sp,a
03D8           1266   ;        EFM8_ADC.c:293: printf("Period: %f\r", hello);
03D8 C002      1267            push    ar2
03DA C003      1268            push    ar3
03DC C004      1269            push    ar4
03DE C005      1270            push    ar5
03E0 7468      1271            mov     a,#__str_5
03E2 C0E0      1272            push    acc
03E4 74C1      1273            mov     a,#(__str_5 >> 8)
03E6 C0E0      1274            push    acc
03E8 7480      1275            mov     a,#0x80
03EA C0E0      1276            push    acc
03EC 120000    1277            lcall   _printf
03EF E581      1278            mov     a,sp
03F1 24F9      1279            add     a,#0xf9
03F3 F581      1280            mov     sp,a
03F5           1281   ;        EFM8_ADC.c:315: waitms(500);
03F5 9001F4    1282            mov     dptr,#0x01F4
03F8 120000    1283            lcall   _waitms
03FB 020000    1284            ljmp    L012002?
03FE           1285            rseg R_CSEG
03FE           1286   
0000           1287            rseg R_XINIT
0000           1288   
0000           1289            rseg R_CONST
0000           1290   __str_0:
0000 1B        1291            db 0x1B
0001 5B324A    1292            db '[2J'
0004 00        1293            db 0x00
0005           1294   __str_1:
0005 41444320  1295            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1296            db 0x0A
0016 46696C65  1297            db 'File: %s'
     3A202573
001E 0A        1298            db 0x0A
001F 436F6D70  1299            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1300            db 0x0A
0030 0A        1301            db 0x0A
0031 00        1302            db 0x00
0032           1303   __str_2:
0032 45464D38  1304            db 'EFM8_ADC.c'
     5F414443
     2E63
003C 00        1305            db 0x00
003D           1306   __str_3:
003D 4D617220  1307            db 'Mar  7 2024'
     20372032
     303234
0048 00        1308            db 0x00
0049           1309   __str_4:
0049 30363A31  1310            db '06:19:43'
     393A3433
0051 00        1311            db 0x00
0052           1312   __str_5:
0052 50657269  1313            db 'Period: %f'
     6F643A20
     2566
005C 0D        1314            db 0x0D
005D 00        1315            db 0x00
005E           1316   
0003           1317            CSEG
0003           1318   
0003           1319   end
