0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Feb 29 04:06:51 2024
0000              5   ;--------------------------------------------------------
                  5   $name FreqEFM8
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _getsn
0000             28            public _LCDprint
0000             29            public _LCD_4BIT
0000             30            public _WriteCommand
0000             31            public _WriteData
0000             32            public _LCD_byte
0000             33            public _LCD_pulse
0000             34            public _TIMER0_Init
0000             35            public _waitms
0000             36            public _Timer3us
0000             37            public __c51_external_startup
0000             38            public _LCDprint_PARM_3
0000             39            public _getsn_PARM_2
0000             40            public _LCDprint_PARM_2
0000             41            public _overflow_count
0000             42   ;--------------------------------------------------------
0000             43   ; Special Function Registers
0000             44   ;--------------------------------------------------------
0000             45   _ACC            DATA 0xe0
0000             46   _ADC0ASAH       DATA 0xb6
0000             47   _ADC0ASAL       DATA 0xb5
0000             48   _ADC0ASCF       DATA 0xa1
0000             49   _ADC0ASCT       DATA 0xc7
0000             50   _ADC0CF0        DATA 0xbc
0000             51   _ADC0CF1        DATA 0xb9
0000             52   _ADC0CF2        DATA 0xdf
0000             53   _ADC0CN0        DATA 0xe8
0000             54   _ADC0CN1        DATA 0xb2
0000             55   _ADC0CN2        DATA 0xb3
0000             56   _ADC0GTH        DATA 0xc4
0000             57   _ADC0GTL        DATA 0xc3
0000             58   _ADC0H          DATA 0xbe
0000             59   _ADC0L          DATA 0xbd
0000             60   _ADC0LTH        DATA 0xc6
0000             61   _ADC0LTL        DATA 0xc5
0000             62   _ADC0MX         DATA 0xbb
0000             63   _B              DATA 0xf0
0000             64   _CKCON0         DATA 0x8e
0000             65   _CKCON1         DATA 0xa6
0000             66   _CLEN0          DATA 0xc6
0000             67   _CLIE0          DATA 0xc7
0000             68   _CLIF0          DATA 0xe8
0000             69   _CLKSEL         DATA 0xa9
0000             70   _CLOUT0         DATA 0xd1
0000             71   _CLU0CF         DATA 0xb1
0000             72   _CLU0FN         DATA 0xaf
0000             73   _CLU0MX         DATA 0x84
0000             74   _CLU1CF         DATA 0xb3
0000             75   _CLU1FN         DATA 0xb2
0000             76   _CLU1MX         DATA 0x85
0000             77   _CLU2CF         DATA 0xb6
0000             78   _CLU2FN         DATA 0xb5
0000             79   _CLU2MX         DATA 0x91
0000             80   _CLU3CF         DATA 0xbf
0000             81   _CLU3FN         DATA 0xbe
0000             82   _CLU3MX         DATA 0xae
0000             83   _CMP0CN0        DATA 0x9b
0000             84   _CMP0CN1        DATA 0x99
0000             85   _CMP0MD         DATA 0x9d
0000             86   _CMP0MX         DATA 0x9f
0000             87   _CMP1CN0        DATA 0xbf
0000             88   _CMP1CN1        DATA 0xac
0000             89   _CMP1MD         DATA 0xab
0000             90   _CMP1MX         DATA 0xaa
0000             91   _CRC0CN0        DATA 0xce
0000             92   _CRC0CN1        DATA 0x86
0000             93   _CRC0CNT        DATA 0xd3
0000             94   _CRC0DAT        DATA 0xcb
0000             95   _CRC0FLIP       DATA 0xcf
0000             96   _CRC0IN         DATA 0xca
0000             97   _CRC0ST         DATA 0xd2
0000             98   _DAC0CF0        DATA 0x91
0000             99   _DAC0CF1        DATA 0x92
0000            100   _DAC0H          DATA 0x85
0000            101   _DAC0L          DATA 0x84
0000            102   _DAC1CF0        DATA 0x93
0000            103   _DAC1CF1        DATA 0x94
0000            104   _DAC1H          DATA 0x8a
0000            105   _DAC1L          DATA 0x89
0000            106   _DAC2CF0        DATA 0x95
0000            107   _DAC2CF1        DATA 0x96
0000            108   _DAC2H          DATA 0x8c
0000            109   _DAC2L          DATA 0x8b
0000            110   _DAC3CF0        DATA 0x9a
0000            111   _DAC3CF1        DATA 0x9c
0000            112   _DAC3H          DATA 0x8e
0000            113   _DAC3L          DATA 0x8d
0000            114   _DACGCF0        DATA 0x88
0000            115   _DACGCF1        DATA 0x98
0000            116   _DACGCF2        DATA 0xa2
0000            117   _DERIVID        DATA 0xad
0000            118   _DEVICEID       DATA 0xb5
0000            119   _DPH            DATA 0x83
0000            120   _DPL            DATA 0x82
0000            121   _EIE1           DATA 0xe6
0000            122   _EIE2           DATA 0xf3
0000            123   _EIP1           DATA 0xbb
0000            124   _EIP1H          DATA 0xee
0000            125   _EIP2           DATA 0xed
0000            126   _EIP2H          DATA 0xf6
0000            127   _EMI0CN         DATA 0xe7
0000            128   _FLKEY          DATA 0xb7
0000            129   _HFO0CAL        DATA 0xc7
0000            130   _HFO1CAL        DATA 0xd6
0000            131   _HFOCN          DATA 0xef
0000            132   _I2C0ADM        DATA 0xff
0000            133   _I2C0CN0        DATA 0xba
0000            134   _I2C0DIN        DATA 0xbc
0000            135   _I2C0DOUT       DATA 0xbb
0000            136   _I2C0FCN0       DATA 0xad
0000            137   _I2C0FCN1       DATA 0xab
0000            138   _I2C0FCT        DATA 0xf5
0000            139   _I2C0SLAD       DATA 0xbd
0000            140   _I2C0STAT       DATA 0xb9
0000            141   _IE             DATA 0xa8
0000            142   _IP             DATA 0xb8
0000            143   _IPH            DATA 0xf2
0000            144   _IT01CF         DATA 0xe4
0000            145   _LFO0CN         DATA 0xb1
0000            146   _P0             DATA 0x80
0000            147   _P0MASK         DATA 0xfe
0000            148   _P0MAT          DATA 0xfd
0000            149   _P0MDIN         DATA 0xf1
0000            150   _P0MDOUT        DATA 0xa4
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1             DATA 0x90
0000            153   _P1MASK         DATA 0xee
0000            154   _P1MAT          DATA 0xed
0000            155   _P1MDIN         DATA 0xf2
0000            156   _P1MDOUT        DATA 0xa5
0000            157   _P1SKIP         DATA 0xd5
0000            158   _P2             DATA 0xa0
0000            159   _P2MASK         DATA 0xfc
0000            160   _P2MAT          DATA 0xfb
0000            161   _P2MDIN         DATA 0xf3
0000            162   _P2MDOUT        DATA 0xa6
0000            163   _P2SKIP         DATA 0xcc
0000            164   _P3             DATA 0xb0
0000            165   _P3MDIN         DATA 0xf4
0000            166   _P3MDOUT        DATA 0x9c
0000            167   _PCA0CENT       DATA 0x9e
0000            168   _PCA0CLR        DATA 0x9c
0000            169   _PCA0CN0        DATA 0xd8
0000            170   _PCA0CPH0       DATA 0xfc
0000            171   _PCA0CPH1       DATA 0xea
0000            172   _PCA0CPH2       DATA 0xec
0000            173   _PCA0CPH3       DATA 0xf5
0000            174   _PCA0CPH4       DATA 0x85
0000            175   _PCA0CPH5       DATA 0xde
0000            176   _PCA0CPL0       DATA 0xfb
0000            177   _PCA0CPL1       DATA 0xe9
0000            178   _PCA0CPL2       DATA 0xeb
0000            179   _PCA0CPL3       DATA 0xf4
0000            180   _PCA0CPL4       DATA 0x84
0000            181   _PCA0CPL5       DATA 0xdd
0000            182   _PCA0CPM0       DATA 0xda
0000            183   _PCA0CPM1       DATA 0xdb
0000            184   _PCA0CPM2       DATA 0xdc
0000            185   _PCA0CPM3       DATA 0xae
0000            186   _PCA0CPM4       DATA 0xaf
0000            187   _PCA0CPM5       DATA 0xcc
0000            188   _PCA0H          DATA 0xfa
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0MD         DATA 0xd9
0000            191   _PCA0POL        DATA 0x96
0000            192   _PCA0PWM        DATA 0xf7
0000            193   _PCON0          DATA 0x87
0000            194   _PCON1          DATA 0xcd
0000            195   _PFE0CN         DATA 0xc1
0000            196   _PRTDRV         DATA 0xf6
0000            197   _PSCTL          DATA 0x8f
0000            198   _PSTAT0         DATA 0xaa
0000            199   _PSW            DATA 0xd0
0000            200   _REF0CN         DATA 0xd1
0000            201   _REG0CN         DATA 0xc9
0000            202   _REVID          DATA 0xb6
0000            203   _RSTSRC         DATA 0xef
0000            204   _SBCON1         DATA 0x94
0000            205   _SBRLH1         DATA 0x96
0000            206   _SBRLL1         DATA 0x95
0000            207   _SBUF           DATA 0x99
0000            208   _SBUF0          DATA 0x99
0000            209   _SBUF1          DATA 0x92
0000            210   _SCON           DATA 0x98
0000            211   _SCON0          DATA 0x98
0000            212   _SCON1          DATA 0xc8
0000            213   _SFRPAGE        DATA 0xa7
0000            214   _SFRPGCN        DATA 0xbc
0000            215   _SFRSTACK       DATA 0xd7
0000            216   _SMB0ADM        DATA 0xd6
0000            217   _SMB0ADR        DATA 0xd7
0000            218   _SMB0CF         DATA 0xc1
0000            219   _SMB0CN0        DATA 0xc0
0000            220   _SMB0DAT        DATA 0xc2
0000            221   _SMB0FCN0       DATA 0xc3
0000            222   _SMB0FCN1       DATA 0xc4
0000            223   _SMB0FCT        DATA 0xef
0000            224   _SMB0RXLN       DATA 0xc5
0000            225   _SMB0TC         DATA 0xac
0000            226   _SMOD1          DATA 0x93
0000            227   _SP             DATA 0x81
0000            228   _SPI0CFG        DATA 0xa1
0000            229   _SPI0CKR        DATA 0xa2
0000            230   _SPI0CN0        DATA 0xf8
0000            231   _SPI0DAT        DATA 0xa3
0000            232   _SPI0FCN0       DATA 0x9a
0000            233   _SPI0FCN1       DATA 0x9b
0000            234   _SPI0FCT        DATA 0xf7
0000            235   _SPI0PCF        DATA 0xdf
0000            236   _TCON           DATA 0x88
0000            237   _TH0            DATA 0x8c
0000            238   _TH1            DATA 0x8d
0000            239   _TL0            DATA 0x8a
0000            240   _TL1            DATA 0x8b
0000            241   _TMOD           DATA 0x89
0000            242   _TMR2CN0        DATA 0xc8
0000            243   _TMR2CN1        DATA 0xfd
0000            244   _TMR2H          DATA 0xcf
0000            245   _TMR2L          DATA 0xce
0000            246   _TMR2RLH        DATA 0xcb
0000            247   _TMR2RLL        DATA 0xca
0000            248   _TMR3CN0        DATA 0x91
0000            249   _TMR3CN1        DATA 0xfe
0000            250   _TMR3H          DATA 0x95
0000            251   _TMR3L          DATA 0x94
0000            252   _TMR3RLH        DATA 0x93
0000            253   _TMR3RLL        DATA 0x92
0000            254   _TMR4CN0        DATA 0x98
0000            255   _TMR4CN1        DATA 0xff
0000            256   _TMR4H          DATA 0xa5
0000            257   _TMR4L          DATA 0xa4
0000            258   _TMR4RLH        DATA 0xa3
0000            259   _TMR4RLL        DATA 0xa2
0000            260   _TMR5CN0        DATA 0xc0
0000            261   _TMR5CN1        DATA 0xf1
0000            262   _TMR5H          DATA 0xd5
0000            263   _TMR5L          DATA 0xd4
0000            264   _TMR5RLH        DATA 0xd3
0000            265   _TMR5RLL        DATA 0xd2
0000            266   _UART0PCF       DATA 0xd9
0000            267   _UART1FCN0      DATA 0x9d
0000            268   _UART1FCN1      DATA 0xd8
0000            269   _UART1FCT       DATA 0xfa
0000            270   _UART1LIN       DATA 0x9e
0000            271   _UART1PCF       DATA 0xda
0000            272   _VDM0CN         DATA 0xff
0000            273   _WDTCN          DATA 0x97
0000            274   _XBR0           DATA 0xe1
0000            275   _XBR1           DATA 0xe2
0000            276   _XBR2           DATA 0xe3
0000            277   _XOSC0CN        DATA 0x86
0000            278   _DPTR           DATA 0x8382
0000            279   _TMR2RL         DATA 0xcbca
0000            280   _TMR3RL         DATA 0x9392
0000            281   _TMR4RL         DATA 0xa3a2
0000            282   _TMR5RL         DATA 0xd3d2
0000            283   _TMR0           DATA 0x8c8a
0000            284   _TMR1           DATA 0x8d8b
0000            285   _TMR2           DATA 0xcfce
0000            286   _TMR3           DATA 0x9594
0000            287   _TMR4           DATA 0xa5a4
0000            288   _TMR5           DATA 0xd5d4
0000            289   _SBRL1          DATA 0x9695
0000            290   _PCA0           DATA 0xfaf9
0000            291   _PCA0CP0        DATA 0xfcfb
0000            292   _PCA0CP1        DATA 0xeae9
0000            293   _PCA0CP2        DATA 0xeceb
0000            294   _PCA0CP3        DATA 0xf5f4
0000            295   _PCA0CP4        DATA 0x8584
0000            296   _PCA0CP5        DATA 0xdedd
0000            297   _ADC0ASA        DATA 0xb6b5
0000            298   _ADC0GT         DATA 0xc4c3
0000            299   _ADC0           DATA 0xbebd
0000            300   _ADC0LT         DATA 0xc6c5
0000            301   _DAC0           DATA 0x8584
0000            302   _DAC1           DATA 0x8a89
0000            303   _DAC2           DATA 0x8c8b
0000            304   _DAC3           DATA 0x8e8d
0000            305   ;--------------------------------------------------------
0000            306   ; special function bits
0000            307   ;--------------------------------------------------------
0000            308   _ACC_0          BIT 0xe0
0000            309   _ACC_1          BIT 0xe1
0000            310   _ACC_2          BIT 0xe2
0000            311   _ACC_3          BIT 0xe3
0000            312   _ACC_4          BIT 0xe4
0000            313   _ACC_5          BIT 0xe5
0000            314   _ACC_6          BIT 0xe6
0000            315   _ACC_7          BIT 0xe7
0000            316   _TEMPE          BIT 0xe8
0000            317   _ADGN0          BIT 0xe9
0000            318   _ADGN1          BIT 0xea
0000            319   _ADWINT         BIT 0xeb
0000            320   _ADBUSY         BIT 0xec
0000            321   _ADINT          BIT 0xed
0000            322   _IPOEN          BIT 0xee
0000            323   _ADEN           BIT 0xef
0000            324   _B_0            BIT 0xf0
0000            325   _B_1            BIT 0xf1
0000            326   _B_2            BIT 0xf2
0000            327   _B_3            BIT 0xf3
0000            328   _B_4            BIT 0xf4
0000            329   _B_5            BIT 0xf5
0000            330   _B_6            BIT 0xf6
0000            331   _B_7            BIT 0xf7
0000            332   _C0FIF          BIT 0xe8
0000            333   _C0RIF          BIT 0xe9
0000            334   _C1FIF          BIT 0xea
0000            335   _C1RIF          BIT 0xeb
0000            336   _C2FIF          BIT 0xec
0000            337   _C2RIF          BIT 0xed
0000            338   _C3FIF          BIT 0xee
0000            339   _C3RIF          BIT 0xef
0000            340   _D1SRC0         BIT 0x88
0000            341   _D1SRC1         BIT 0x89
0000            342   _D1AMEN         BIT 0x8a
0000            343   _D01REFSL       BIT 0x8b
0000            344   _D3SRC0         BIT 0x8c
0000            345   _D3SRC1         BIT 0x8d
0000            346   _D3AMEN         BIT 0x8e
0000            347   _D23REFSL       BIT 0x8f
0000            348   _D0UDIS         BIT 0x98
0000            349   _D1UDIS         BIT 0x99
0000            350   _D2UDIS         BIT 0x9a
0000            351   _D3UDIS         BIT 0x9b
0000            352   _EX0            BIT 0xa8
0000            353   _ET0            BIT 0xa9
0000            354   _EX1            BIT 0xaa
0000            355   _ET1            BIT 0xab
0000            356   _ES0            BIT 0xac
0000            357   _ET2            BIT 0xad
0000            358   _ESPI0          BIT 0xae
0000            359   _EA             BIT 0xaf
0000            360   _PX0            BIT 0xb8
0000            361   _PT0            BIT 0xb9
0000            362   _PX1            BIT 0xba
0000            363   _PT1            BIT 0xbb
0000            364   _PS0            BIT 0xbc
0000            365   _PT2            BIT 0xbd
0000            366   _PSPI0          BIT 0xbe
0000            367   _P0_0           BIT 0x80
0000            368   _P0_1           BIT 0x81
0000            369   _P0_2           BIT 0x82
0000            370   _P0_3           BIT 0x83
0000            371   _P0_4           BIT 0x84
0000            372   _P0_5           BIT 0x85
0000            373   _P0_6           BIT 0x86
0000            374   _P0_7           BIT 0x87
0000            375   _P1_0           BIT 0x90
0000            376   _P1_1           BIT 0x91
0000            377   _P1_2           BIT 0x92
0000            378   _P1_3           BIT 0x93
0000            379   _P1_4           BIT 0x94
0000            380   _P1_5           BIT 0x95
0000            381   _P1_6           BIT 0x96
0000            382   _P1_7           BIT 0x97
0000            383   _P2_0           BIT 0xa0
0000            384   _P2_1           BIT 0xa1
0000            385   _P2_2           BIT 0xa2
0000            386   _P2_3           BIT 0xa3
0000            387   _P2_4           BIT 0xa4
0000            388   _P2_5           BIT 0xa5
0000            389   _P2_6           BIT 0xa6
0000            390   _P3_0           BIT 0xb0
0000            391   _P3_1           BIT 0xb1
0000            392   _P3_2           BIT 0xb2
0000            393   _P3_3           BIT 0xb3
0000            394   _P3_4           BIT 0xb4
0000            395   _P3_7           BIT 0xb7
0000            396   _CCF0           BIT 0xd8
0000            397   _CCF1           BIT 0xd9
0000            398   _CCF2           BIT 0xda
0000            399   _CCF3           BIT 0xdb
0000            400   _CCF4           BIT 0xdc
0000            401   _CCF5           BIT 0xdd
0000            402   _CR             BIT 0xde
0000            403   _CF             BIT 0xdf
0000            404   _PARITY         BIT 0xd0
0000            405   _F1             BIT 0xd1
0000            406   _OV             BIT 0xd2
0000            407   _RS0            BIT 0xd3
0000            408   _RS1            BIT 0xd4
0000            409   _F0             BIT 0xd5
0000            410   _AC             BIT 0xd6
0000            411   _CY             BIT 0xd7
0000            412   _RI             BIT 0x98
0000            413   _TI             BIT 0x99
0000            414   _RB8            BIT 0x9a
0000            415   _TB8            BIT 0x9b
0000            416   _REN            BIT 0x9c
0000            417   _CE             BIT 0x9d
0000            418   _SMODE          BIT 0x9e
0000            419   _RI1            BIT 0xc8
0000            420   _TI1            BIT 0xc9
0000            421   _RBX1           BIT 0xca
0000            422   _TBX1           BIT 0xcb
0000            423   _REN1           BIT 0xcc
0000            424   _PERR1          BIT 0xcd
0000            425   _OVR1           BIT 0xce
0000            426   _SI             BIT 0xc0
0000            427   _ACK            BIT 0xc1
0000            428   _ARBLOST        BIT 0xc2
0000            429   _ACKRQ          BIT 0xc3
0000            430   _STO            BIT 0xc4
0000            431   _STA            BIT 0xc5
0000            432   _TXMODE         BIT 0xc6
0000            433   _MASTER         BIT 0xc7
0000            434   _SPIEN          BIT 0xf8
0000            435   _TXNF           BIT 0xf9
0000            436   _NSSMD0         BIT 0xfa
0000            437   _NSSMD1         BIT 0xfb
0000            438   _RXOVRN         BIT 0xfc
0000            439   _MODF           BIT 0xfd
0000            440   _WCOL           BIT 0xfe
0000            441   _SPIF           BIT 0xff
0000            442   _IT0            BIT 0x88
0000            443   _IE0            BIT 0x89
0000            444   _IT1            BIT 0x8a
0000            445   _IE1            BIT 0x8b
0000            446   _TR0            BIT 0x8c
0000            447   _TF0            BIT 0x8d
0000            448   _TR1            BIT 0x8e
0000            449   _TF1            BIT 0x8f
0000            450   _T2XCLK0        BIT 0xc8
0000            451   _T2XCLK1        BIT 0xc9
0000            452   _TR2            BIT 0xca
0000            453   _T2SPLIT        BIT 0xcb
0000            454   _TF2CEN         BIT 0xcc
0000            455   _TF2LEN         BIT 0xcd
0000            456   _TF2L           BIT 0xce
0000            457   _TF2H           BIT 0xcf
0000            458   _T4XCLK0        BIT 0x98
0000            459   _T4XCLK1        BIT 0x99
0000            460   _TR4            BIT 0x9a
0000            461   _T4SPLIT        BIT 0x9b
0000            462   _TF4CEN         BIT 0x9c
0000            463   _TF4LEN         BIT 0x9d
0000            464   _TF4L           BIT 0x9e
0000            465   _TF4H           BIT 0x9f
0000            466   _T5XCLK0        BIT 0xc0
0000            467   _T5XCLK1        BIT 0xc1
0000            468   _TR5            BIT 0xc2
0000            469   _T5SPLIT        BIT 0xc3
0000            470   _TF5CEN         BIT 0xc4
0000            471   _TF5LEN         BIT 0xc5
0000            472   _TF5L           BIT 0xc6
0000            473   _TF5H           BIT 0xc7
0000            474   _RIE            BIT 0xd8
0000            475   _RXTO0          BIT 0xd9
0000            476   _RXTO1          BIT 0xda
0000            477   _RFRQ           BIT 0xdb
0000            478   _TIE            BIT 0xdc
0000            479   _TXHOLD         BIT 0xdd
0000            480   _TXNF1          BIT 0xde
0000            481   _TFRQ           BIT 0xdf
0000            482   ;--------------------------------------------------------
0000            483   ; overlayable register banks
0000            484   ;--------------------------------------------------------
0000            485            rbank0 segment data overlay
0000            486   ;--------------------------------------------------------
0000            487   ; internal ram data
0000            488   ;--------------------------------------------------------
0000            489            rseg R_DSEG
0000            490   _overflow_count:
0000            491            ds 1
0001            492   _LCDprint_PARM_2:
0001            493            ds 1
0002            494   _getsn_PARM_2:
0002            495            ds 2
0004            496   _getsn_buff_1_46:
0004            497            ds 3
0007            498   _getsn_sloc0_1_0:
0007            499            ds 2
0009            500   _main_sC_1_52:
0009            501            ds 4
000D            502   _main_measurements_1_52:
000D            503            ds 2
000F            504   _main_str_1_52:
000F            505            ds 6
0015            506   _main_test_num_1_52:
0015            507            ds 20
0029            508   _main_sloc0_1_0:
0029            509            ds 4
002D            510   ;--------------------------------------------------------
002D            511   ; overlayable items in internal ram 
002D            512   ;--------------------------------------------------------
0000            513            rseg    R_OSEG
0000            514   ;--------------------------------------------------------
0000            515   ; indirectly addressable internal ram data
0000            516   ;--------------------------------------------------------
0000            517            rseg R_ISEG
0000            518   ;--------------------------------------------------------
0000            519   ; absolute internal ram data
0000            520   ;--------------------------------------------------------
0000            521            DSEG
0000            522   ;--------------------------------------------------------
0000            523   ; bit data
0000            524   ;--------------------------------------------------------
0000            525            rseg R_BSEG
0000            526   _LCDprint_PARM_3:
0000            527            DBIT    1
0001            528   ;--------------------------------------------------------
0001            529   ; paged external ram data
0001            530   ;--------------------------------------------------------
0000            531            rseg R_PSEG
0000            532   ;--------------------------------------------------------
0000            533   ; external ram data
0000            534   ;--------------------------------------------------------
0000            535            rseg R_XSEG
0000            536   ;--------------------------------------------------------
0000            537   ; absolute external ram data
0000            538   ;--------------------------------------------------------
0000            539            XSEG
0000            540   ;--------------------------------------------------------
0000            541   ; external initialized ram data
0000            542   ;--------------------------------------------------------
0000            543            rseg R_IXSEG
0000            544            rseg R_HOME
0000            545            rseg R_GSINIT
0000            546            rseg R_CSEG
0000            547   ;--------------------------------------------------------
0000            548   ; Reset entry point and interrupt vectors
0000            549   ;--------------------------------------------------------
0000            550            CSEG at 0x0000
0000 020000     551            ljmp    _crt0
0003            552   ;--------------------------------------------------------
0003            553   ; global & static initialisations
0003            554   ;--------------------------------------------------------
0000            555            rseg R_HOME
0000            556            rseg R_GSINIT
0000            557            rseg R_GSINIT
0000            558   ;--------------------------------------------------------
0000            559   ; data variables initialization
0000            560   ;--------------------------------------------------------
0000            561            rseg R_DINIT
0000            562            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            563   ;--------------------------------------------------------
0000            564   ; code
0000            565   ;--------------------------------------------------------
0000            566            rseg R_CSEG
0000            567   ;------------------------------------------------------------
0000            568   ;Allocation info for local variables in function '_c51_external_startup'
0000            569   ;------------------------------------------------------------
0000            570   ;------------------------------------------------------------
0000            571   ;        FreqEFM8.c:25: char _c51_external_startup (void)
0000            572   ;        -----------------------------------------
0000            573   ;         function _c51_external_startup
0000            574   ;        -----------------------------------------
0000            575   __c51_external_startup:
0000            576            using   0
0000            577   ;        FreqEFM8.c:28: SFRPAGE = 0x00;
0000 75A700     578            mov     _SFRPAGE,#0x00
0003            579   ;        FreqEFM8.c:29: WDTCN = 0xDE; //First key
0003 7597DE     580            mov     _WDTCN,#0xDE
0006            581   ;        FreqEFM8.c:30: WDTCN = 0xAD; //Second key
0006 7597AD     582            mov     _WDTCN,#0xAD
0009            583   ;        FreqEFM8.c:32: VDM0CN |= 0x80;
0009 43FF80     584            orl     _VDM0CN,#0x80
000C            585   ;        FreqEFM8.c:33: RSTSRC = 0x02;
000C 75EF02     586            mov     _RSTSRC,#0x02
000F            587   ;        FreqEFM8.c:40: SFRPAGE = 0x10;
000F 75A710     588            mov     _SFRPAGE,#0x10
0012            589   ;        FreqEFM8.c:41: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     590            mov     _PFE0CN,#0x20
0015            591   ;        FreqEFM8.c:42: SFRPAGE = 0x00;
0015 75A700     592            mov     _SFRPAGE,#0x00
0018            593   ;        FreqEFM8.c:63: CLKSEL = 0x00;
0018 75A900     594            mov     _CLKSEL,#0x00
001B            595   ;        FreqEFM8.c:64: CLKSEL = 0x00;
001B 75A900     596            mov     _CLKSEL,#0x00
001E            597   ;        FreqEFM8.c:65: while ((CLKSEL & 0x80) == 0);
001E            598   L002001?:
001E E5A9       599            mov     a,_CLKSEL
0020 30E720     600            jnb     acc.7,L002001?
0023            601   ;        FreqEFM8.c:66: CLKSEL = 0x03;
0023 75A903     602            mov     _CLKSEL,#0x03
0026            603   ;        FreqEFM8.c:67: CLKSEL = 0x03;
0026 75A903     604            mov     _CLKSEL,#0x03
0029            605   ;        FreqEFM8.c:68: while ((CLKSEL & 0x80) == 0);
0029            606   L002004?:
0029 E5A9       607            mov     a,_CLKSEL
002B 30E700     608            jnb     acc.7,L002004?
002E            609   ;        FreqEFM8.c:73: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     610            orl     _P0MDOUT,#0x10
0031            611   ;        FreqEFM8.c:74: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     612            mov     _XBR0,#0x01
0034            613   ;        FreqEFM8.c:75: XBR1     = 0X10; // Enable T0 on P0.0
0034 75E210     614            mov     _XBR1,#0x10
0037            615   ;        FreqEFM8.c:76: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     616            mov     _XBR2,#0x40
003A            617   ;        FreqEFM8.c:82: SCON0 = 0x10;
003A 759810     618            mov     _SCON0,#0x10
003D            619   ;        FreqEFM8.c:83: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
003D 858E8E     620            mov     _CKCON0,_CKCON0
0040            621   ;        FreqEFM8.c:84: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     622            mov     _TH1,#0xE6
0043            623   ;        FreqEFM8.c:85: TL1 = TH1;      // Init Timer1
0043 858D8B     624            mov     _TL1,_TH1
0046            625   ;        FreqEFM8.c:86: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     626            anl     _TMOD,#0x0F
0049            627   ;        FreqEFM8.c:87: TMOD |=  0x20;                       
0049 438920     628            orl     _TMOD,#0x20
004C            629   ;        FreqEFM8.c:88: TR1 = 1; // START Timer1
004C D28E       630            setb    _TR1
004E            631   ;        FreqEFM8.c:89: TI = 1;  // Indicate TX0 ready
004E D299       632            setb    _TI
0050            633   ;        FreqEFM8.c:91: return 0;
0050 758200     634            mov     dpl,#0x00
0053 22         635            ret
0054            636   ;------------------------------------------------------------
0054            637   ;Allocation info for local variables in function 'Timer3us'
0054            638   ;------------------------------------------------------------
0054            639   ;us                        Allocated to registers r2 
0054            640   ;i                         Allocated to registers r3 
0054            641   ;------------------------------------------------------------
0054            642   ;        FreqEFM8.c:95: void Timer3us(unsigned char us)
0054            643   ;        -----------------------------------------
0054            644   ;         function Timer3us
0054            645   ;        -----------------------------------------
0054            646   _Timer3us:
0054 AA82       647            mov     r2,dpl
0056            648   ;        FreqEFM8.c:100: CKCON0|=0b_0100_0000;
0056 438E40     649            orl     _CKCON0,#0x40
0059            650   ;        FreqEFM8.c:102: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0059 7592B8     651            mov     _TMR3RL,#0xB8
005C 7593FF     652            mov     (_TMR3RL >> 8),#0xFF
005F            653   ;        FreqEFM8.c:103: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005F 859294     654            mov     _TMR3,_TMR3RL
0062 859395     655            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0065            656   ;        FreqEFM8.c:105: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0065 759104     657            mov     _TMR3CN0,#0x04
0068            658   ;        FreqEFM8.c:106: for (i = 0; i < us; i++)       // Count <us> overflows
0068 7B00       659            mov     r3,#0x00
006A            660   L003006?:
006A C3         661            clr     c
006B EB         662            mov     a,r3
006C 9A         663            subb    a,r2
006D 5000       664            jnc     L003009?
006F            665   ;        FreqEFM8.c:108: while (!(TMR3CN0 & 0x80));  // Wait for overflow
006F            666   L003001?:
006F E591       667            mov     a,_TMR3CN0
0071 30E7C0     668            jnb     acc.7,L003001?
0074            669   ;        FreqEFM8.c:109: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0074 53917F     670            anl     _TMR3CN0,#0x7F
0077            671   ;        FreqEFM8.c:110: if (TF0)
0077            672   ;        FreqEFM8.c:112: TF0=0;
0077 108D30     673            jbc     _TF0,L003019?
007A 8000       674            sjmp    L003008?
007C            675   L003019?:
007C            676   ;        FreqEFM8.c:113: overflow_count++;
007C 05E0       677            inc     _overflow_count
007E            678   L003008?:
007E            679   ;        FreqEFM8.c:106: for (i = 0; i < us; i++)       // Count <us> overflows
007E 0B         680            inc     r3
007F 8000       681            sjmp    L003006?
0081            682   L003009?:
0081            683   ;        FreqEFM8.c:116: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0081 759100     684            mov     _TMR3CN0,#0x00
0084 22         685            ret
0085            686   ;------------------------------------------------------------
0085            687   ;Allocation info for local variables in function 'waitms'
0085            688   ;------------------------------------------------------------
0085            689   ;ms                        Allocated to registers r2 r3 
0085            690   ;j                         Allocated to registers r2 r3 
0085            691   ;------------------------------------------------------------
0085            692   ;        FreqEFM8.c:119: void waitms (unsigned int ms)
0085            693   ;        -----------------------------------------
0085            694   ;         function waitms
0085            695   ;        -----------------------------------------
0085            696   _waitms:
0085 AA82       697            mov     r2,dpl
0087 AB83       698            mov     r3,dph
0089            699   ;        FreqEFM8.c:122: for(j=ms; j!=0; j--)
0089            700   L004001?:
0089 BA00F0     701            cjne    r2,#0x00,L004010?
008C BB00F0     702            cjne    r3,#0x00,L004010?
008F 22         703            ret
0090            704   L004010?:
0090            705   ;        FreqEFM8.c:124: Timer3us(249);
0090 7582F9     706            mov     dpl,#0xF9
0093 C002       707            push    ar2
0095 C003       708            push    ar3
0097 120000     709            lcall   _Timer3us
009A            710   ;        FreqEFM8.c:125: Timer3us(249);
009A 7582F9     711            mov     dpl,#0xF9
009D 120000     712            lcall   _Timer3us
00A0            713   ;        FreqEFM8.c:126: Timer3us(249);
00A0 7582F9     714            mov     dpl,#0xF9
00A3 120000     715            lcall   _Timer3us
00A6            716   ;        FreqEFM8.c:127: Timer3us(250);
00A6 7582FA     717            mov     dpl,#0xFA
00A9 120000     718            lcall   _Timer3us
00AC D003       719            pop     ar3
00AE D002       720            pop     ar2
00B0            721   ;        FreqEFM8.c:122: for(j=ms; j!=0; j--)
00B0 1A         722            dec     r2
00B1 BAFF60     723            cjne    r2,#0xff,L004011?
00B4 1B         724            dec     r3
00B5            725   L004011?:
00B5 8000       726            sjmp    L004001?
00B7            727   ;------------------------------------------------------------
00B7            728   ;Allocation info for local variables in function 'TIMER0_Init'
00B7            729   ;------------------------------------------------------------
00B7            730   ;------------------------------------------------------------
00B7            731   ;        FreqEFM8.c:131: void TIMER0_Init(void)
00B7            732   ;        -----------------------------------------
00B7            733   ;         function TIMER0_Init
00B7            734   ;        -----------------------------------------
00B7            735   _TIMER0_Init:
00B7            736   ;        FreqEFM8.c:133: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
00B7 5389F0     737            anl     _TMOD,#0xF0
00BA            738   ;        FreqEFM8.c:134: TMOD|=0b_0000_0101; // Timer/Counter 0 used as a 16-bit counter
00BA 438905     739            orl     _TMOD,#0x05
00BD            740   ;        FreqEFM8.c:135: TR0=0; // Stop Timer/Counter 0
00BD C28C       741            clr     _TR0
00BF 22         742            ret
00C0            743   ;------------------------------------------------------------
00C0            744   ;Allocation info for local variables in function 'LCD_pulse'
00C0            745   ;------------------------------------------------------------
00C0            746   ;------------------------------------------------------------
00C0            747   ;        FreqEFM8.c:138: void LCD_pulse (void)
00C0            748   ;        -----------------------------------------
00C0            749   ;         function LCD_pulse
00C0            750   ;        -----------------------------------------
00C0            751   _LCD_pulse:
00C0            752   ;        FreqEFM8.c:140: LCD_E=1;
00C0 D2A0       753            setb    _P2_0
00C2            754   ;        FreqEFM8.c:141: Timer3us(40);
00C2 758228     755            mov     dpl,#0x28
00C5 120000     756            lcall   _Timer3us
00C8            757   ;        FreqEFM8.c:142: LCD_E=0;
00C8 C2A0       758            clr     _P2_0
00CA 22         759            ret
00CB            760   ;------------------------------------------------------------
00CB            761   ;Allocation info for local variables in function 'LCD_byte'
00CB            762   ;------------------------------------------------------------
00CB            763   ;x                         Allocated to registers r2 
00CB            764   ;------------------------------------------------------------
00CB            765   ;        FreqEFM8.c:145: void LCD_byte (unsigned char x)
00CB            766   ;        -----------------------------------------
00CB            767   ;         function LCD_byte
00CB            768   ;        -----------------------------------------
00CB            769   _LCD_byte:
00CB AA82       770            mov     r2,dpl
00CD            771   ;        FreqEFM8.c:148: ACC=x; //Send high nible
00CD 8AE0       772            mov     _ACC,r2
00CF            773   ;        FreqEFM8.c:149: LCD_D7=ACC_7;
00CF A2E7       774            mov     c,_ACC_7
00D1 9290       775            mov     _P1_0,c
00D3            776   ;        FreqEFM8.c:150: LCD_D6=ACC_6;
00D3 A2E6       777            mov     c,_ACC_6
00D5 9291       778            mov     _P1_1,c
00D7            779   ;        FreqEFM8.c:151: LCD_D5=ACC_5;
00D7 A2E5       780            mov     c,_ACC_5
00D9 9292       781            mov     _P1_2,c
00DB            782   ;        FreqEFM8.c:152: LCD_D4=ACC_4;
00DB A2E4       783            mov     c,_ACC_4
00DD 9293       784            mov     _P1_3,c
00DF            785   ;        FreqEFM8.c:153: LCD_pulse();
00DF C002       786            push    ar2
00E1 120000     787            lcall   _LCD_pulse
00E4            788   ;        FreqEFM8.c:154: Timer3us(40);
00E4 758228     789            mov     dpl,#0x28
00E7 120000     790            lcall   _Timer3us
00EA D002       791            pop     ar2
00EC            792   ;        FreqEFM8.c:155: ACC=x; //Send low nible
00EC 8AE0       793            mov     _ACC,r2
00EE            794   ;        FreqEFM8.c:156: LCD_D7=ACC_3;
00EE A2E3       795            mov     c,_ACC_3
00F0 9290       796            mov     _P1_0,c
00F2            797   ;        FreqEFM8.c:157: LCD_D6=ACC_2;
00F2 A2E2       798            mov     c,_ACC_2
00F4 9291       799            mov     _P1_1,c
00F6            800   ;        FreqEFM8.c:158: LCD_D5=ACC_1;
00F6 A2E1       801            mov     c,_ACC_1
00F8 9292       802            mov     _P1_2,c
00FA            803   ;        FreqEFM8.c:159: LCD_D4=ACC_0;
00FA A2E0       804            mov     c,_ACC_0
00FC 9293       805            mov     _P1_3,c
00FE            806   ;        FreqEFM8.c:160: LCD_pulse();
00FE 020000     807            ljmp    _LCD_pulse
0101            808   ;------------------------------------------------------------
0101            809   ;Allocation info for local variables in function 'WriteData'
0101            810   ;------------------------------------------------------------
0101            811   ;x                         Allocated to registers r2 
0101            812   ;------------------------------------------------------------
0101            813   ;        FreqEFM8.c:163: void WriteData (unsigned char x)
0101            814   ;        -----------------------------------------
0101            815   ;         function WriteData
0101            816   ;        -----------------------------------------
0101            817   _WriteData:
0101 AA82       818            mov     r2,dpl
0103            819   ;        FreqEFM8.c:165: LCD_RS=1;
0103 D297       820            setb    _P1_7
0105            821   ;        FreqEFM8.c:166: LCD_byte(x);
0105 8A82       822            mov     dpl,r2
0107 120000     823            lcall   _LCD_byte
010A            824   ;        FreqEFM8.c:167: waitms(2);
010A 900002     825            mov     dptr,#0x0002
010D 020000     826            ljmp    _waitms
0110            827   ;------------------------------------------------------------
0110            828   ;Allocation info for local variables in function 'WriteCommand'
0110            829   ;------------------------------------------------------------
0110            830   ;x                         Allocated to registers r2 
0110            831   ;------------------------------------------------------------
0110            832   ;        FreqEFM8.c:170: void WriteCommand (unsigned char x)
0110            833   ;        -----------------------------------------
0110            834   ;         function WriteCommand
0110            835   ;        -----------------------------------------
0110            836   _WriteCommand:
0110 AA82       837            mov     r2,dpl
0112            838   ;        FreqEFM8.c:172: LCD_RS=0;
0112 C297       839            clr     _P1_7
0114            840   ;        FreqEFM8.c:173: LCD_byte(x);
0114 8A82       841            mov     dpl,r2
0116 120000     842            lcall   _LCD_byte
0119            843   ;        FreqEFM8.c:174: waitms(5);
0119 900005     844            mov     dptr,#0x0005
011C 020000     845            ljmp    _waitms
011F            846   ;------------------------------------------------------------
011F            847   ;Allocation info for local variables in function 'LCD_4BIT'
011F            848   ;------------------------------------------------------------
011F            849   ;------------------------------------------------------------
011F            850   ;        FreqEFM8.c:177: void LCD_4BIT (void)
011F            851   ;        -----------------------------------------
011F            852   ;         function LCD_4BIT
011F            853   ;        -----------------------------------------
011F            854   _LCD_4BIT:
011F            855   ;        FreqEFM8.c:179: LCD_E=0; // Resting state of LCD's enable is zero
011F C2A0       856            clr     _P2_0
0121            857   ;        FreqEFM8.c:181: waitms(20);
0121 900014     858            mov     dptr,#0x0014
0124 120000     859            lcall   _waitms
0127            860   ;        FreqEFM8.c:183: WriteCommand(0x33);
0127 758233     861            mov     dpl,#0x33
012A 120000     862            lcall   _WriteCommand
012D            863   ;        FreqEFM8.c:184: WriteCommand(0x33);
012D 758233     864            mov     dpl,#0x33
0130 120000     865            lcall   _WriteCommand
0133            866   ;        FreqEFM8.c:185: WriteCommand(0x32); // Change to 4-bit mode
0133 758232     867            mov     dpl,#0x32
0136 120000     868            lcall   _WriteCommand
0139            869   ;        FreqEFM8.c:188: WriteCommand(0x28);
0139 758228     870            mov     dpl,#0x28
013C 120000     871            lcall   _WriteCommand
013F            872   ;        FreqEFM8.c:189: WriteCommand(0x0c);
013F 75820C     873            mov     dpl,#0x0C
0142 120000     874            lcall   _WriteCommand
0145            875   ;        FreqEFM8.c:190: WriteCommand(0x01); // Clear screen command (takes some time)
0145 758201     876            mov     dpl,#0x01
0148 120000     877            lcall   _WriteCommand
014B            878   ;        FreqEFM8.c:191: waitms(20); // Wait for clear screen command to finsih.
014B 900014     879            mov     dptr,#0x0014
014E 020000     880            ljmp    _waitms
0151            881   ;------------------------------------------------------------
0151            882   ;Allocation info for local variables in function 'LCDprint'
0151            883   ;------------------------------------------------------------
0151            884   ;line                      Allocated with name '_LCDprint_PARM_2'
0151            885   ;string                    Allocated to registers r2 r3 r4 
0151            886   ;j                         Allocated to registers r5 r6 
0151            887   ;------------------------------------------------------------
0151            888   ;        FreqEFM8.c:194: void LCDprint(char * string, unsigned char line, bit clear)
0151            889   ;        -----------------------------------------
0151            890   ;         function LCDprint
0151            891   ;        -----------------------------------------
0151            892   _LCDprint:
0151 AA82       893            mov     r2,dpl
0153 AB83       894            mov     r3,dph
0155 ACF0       895            mov     r4,b
0157            896   ;        FreqEFM8.c:198: WriteCommand(line==2?0xc0:0x80);
0157 7402       897            mov     a,#0x02
0159 B57040     898            cjne    a,_LCDprint_PARM_2,L011013?
015C 7DC0       899            mov     r5,#0xC0
015E 8000       900            sjmp    L011014?
0160            901   L011013?:
0160 7D80       902            mov     r5,#0x80
0162            903   L011014?:
0162 8D82       904            mov     dpl,r5
0164 C002       905            push    ar2
0166 C003       906            push    ar3
0168 C004       907            push    ar4
016A 120000     908            lcall   _WriteCommand
016D            909   ;        FreqEFM8.c:199: waitms(5);
016D 900005     910            mov     dptr,#0x0005
0170 120000     911            lcall   _waitms
0173 D004       912            pop     ar4
0175 D003       913            pop     ar3
0177 D002       914            pop     ar2
0179            915   ;        FreqEFM8.c:200: for(j=0; string[j]!=0; j++)     WriteData(string[j]);// Write the message
0179 7D00       916            mov     r5,#0x00
017B 7E00       917            mov     r6,#0x00
017D            918   L011003?:
017D ED         919            mov     a,r5
017E 2A         920            add     a,r2
017F FF         921            mov     r7,a
0180 EE         922            mov     a,r6
0181 3B         923            addc    a,r3
0182 F8         924            mov     r0,a
0183 8C01       925            mov     ar1,r4
0185 8F82       926            mov     dpl,r7
0187 8883       927            mov     dph,r0
0189 89F0       928            mov     b,r1
018B 120000     929            lcall   __gptrget
018E FF         930            mov     r7,a
018F 6000       931            jz      L011006?
0191 8F82       932            mov     dpl,r7
0193 C002       933            push    ar2
0195 C003       934            push    ar3
0197 C004       935            push    ar4
0199 C005       936            push    ar5
019B C006       937            push    ar6
019D 120000     938            lcall   _WriteData
01A0 D006       939            pop     ar6
01A2 D005       940            pop     ar5
01A4 D004       941            pop     ar4
01A6 D003       942            pop     ar3
01A8 D002       943            pop     ar2
01AA 0D         944            inc     r5
01AB BD0020     945            cjne    r5,#0x00,L011003?
01AE 0E         946            inc     r6
01AF 8000       947            sjmp    L011003?
01B1            948   L011006?:
01B1            949   ;        FreqEFM8.c:201: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
01B1 309070     950            jnb     _LCDprint_PARM_3,L011011?
01B4 8D02       951            mov     ar2,r5
01B6 8E03       952            mov     ar3,r6
01B8            953   L011007?:
01B8 C3         954            clr     c
01B9 EA         955            mov     a,r2
01BA 9410       956            subb    a,#0x10
01BC EB         957            mov     a,r3
01BD 6480       958            xrl     a,#0x80
01BF 9480       959            subb    a,#0x80
01C1 5000       960            jnc     L011011?
01C3 758220     961            mov     dpl,#0x20
01C6 C002       962            push    ar2
01C8 C003       963            push    ar3
01CA 120000     964            lcall   _WriteData
01CD D003       965            pop     ar3
01CF D002       966            pop     ar2
01D1 0A         967            inc     r2
01D2 BA00E0     968            cjne    r2,#0x00,L011007?
01D5 0B         969            inc     r3
01D6 8000       970            sjmp    L011007?
01D8            971   L011011?:
01D8 22         972            ret
01D9            973   ;------------------------------------------------------------
01D9            974   ;Allocation info for local variables in function 'getsn'
01D9            975   ;------------------------------------------------------------
01D9            976   ;len                       Allocated with name '_getsn_PARM_2'
01D9            977   ;buff                      Allocated with name '_getsn_buff_1_46'
01D9            978   ;j                         Allocated with name '_getsn_sloc0_1_0'
01D9            979   ;c                         Allocated to registers r3 
01D9            980   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
01D9            981   ;------------------------------------------------------------
01D9            982   ;        FreqEFM8.c:204: int getsn (char * buff, int len)
01D9            983   ;        -----------------------------------------
01D9            984   ;         function getsn
01D9            985   ;        -----------------------------------------
01D9            986   _getsn:
01D9 8582A0     987            mov     _getsn_buff_1_46,dpl
01DC 8583A1     988            mov     (_getsn_buff_1_46 + 1),dph
01DF 85F0A2     989            mov     (_getsn_buff_1_46 + 2),b
01E2            990   ;        FreqEFM8.c:209: for(j=0; j<(len-1); j++)
01E2 E4         991            clr     a
01E3 F510       992            mov     _getsn_sloc0_1_0,a
01E5 F511       993            mov     (_getsn_sloc0_1_0 + 1),a
01E7 E500       994            mov     a,_getsn_PARM_2
01E9 24FF       995            add     a,#0xff
01EB FF         996            mov     r7,a
01EC E501       997            mov     a,(_getsn_PARM_2 + 1)
01EE 34FF       998            addc    a,#0xff
01F0 F8         999            mov     r0,a
01F1 7900      1000            mov     r1,#0x00
01F3 7A00      1001            mov     r2,#0x00
01F5           1002   L012005?:
01F5 C3        1003            clr     c
01F6 E9        1004            mov     a,r1
01F7 9F        1005            subb    a,r7
01F8 EA        1006            mov     a,r2
01F9 6480      1007            xrl     a,#0x80
01FB 88F0      1008            mov     b,r0
01FD 63F080    1009            xrl     b,#0x80
0200 95F0      1010            subb    a,b
0202 5000      1011            jnc     L012008?
0204           1012   ;        FreqEFM8.c:211: c=getchar();
0204 C002      1013            push    ar2
0206 C007      1014            push    ar7
0208 C000      1015            push    ar0
020A C001      1016            push    ar1
020C 120000    1017            lcall   _getchar
020F AB82      1018            mov     r3,dpl
0211 D001      1019            pop     ar1
0213 D000      1020            pop     ar0
0215 D007      1021            pop     ar7
0217 D002      1022            pop     ar2
0219           1023   ;        FreqEFM8.c:212: if ( (c=='\n') || (c=='\r') )
0219 BB0AA0    1024            cjne    r3,#0x0A,L012015?
021C 8000      1025            sjmp    L012001?
021E           1026   L012015?:
021E BB0D80    1027            cjne    r3,#0x0D,L012002?
0221           1028   L012001?:
0221           1029   ;        FreqEFM8.c:214: buff[j]=0;
0221 E510      1030            mov     a,_getsn_sloc0_1_0
0223 25A0      1031            add     a,_getsn_buff_1_46
0225 FC        1032            mov     r4,a
0226 E511      1033            mov     a,(_getsn_sloc0_1_0 + 1)
0228 35A1      1034            addc    a,(_getsn_buff_1_46 + 1)
022A FD        1035            mov     r5,a
022B AEA2      1036            mov     r6,(_getsn_buff_1_46 + 2)
022D 8C82      1037            mov     dpl,r4
022F 8D83      1038            mov     dph,r5
0231 8EF0      1039            mov     b,r6
0233 E4        1040            clr     a
0234 120000    1041            lcall   __gptrput
0237           1042   ;        FreqEFM8.c:215: return j;
0237 851082    1043            mov     dpl,_getsn_sloc0_1_0
023A 851183    1044            mov     dph,(_getsn_sloc0_1_0 + 1)
023D 22        1045            ret
023E           1046   L012002?:
023E           1047   ;        FreqEFM8.c:219: buff[j]=c;
023E E9        1048            mov     a,r1
023F 25A0      1049            add     a,_getsn_buff_1_46
0241 FC        1050            mov     r4,a
0242 EA        1051            mov     a,r2
0243 35A1      1052            addc    a,(_getsn_buff_1_46 + 1)
0245 FD        1053            mov     r5,a
0246 AEA2      1054            mov     r6,(_getsn_buff_1_46 + 2)
0248 8C82      1055            mov     dpl,r4
024A 8D83      1056            mov     dph,r5
024C 8EF0      1057            mov     b,r6
024E EB        1058            mov     a,r3
024F 120000    1059            lcall   __gptrput
0252           1060   ;        FreqEFM8.c:209: for(j=0; j<(len-1); j++)
0252 09        1061            inc     r1
0253 B90060    1062            cjne    r1,#0x00,L012018?
0256 0A        1063            inc     r2
0257           1064   L012018?:
0257 8910      1065            mov     _getsn_sloc0_1_0,r1
0259 8A11      1066            mov     (_getsn_sloc0_1_0 + 1),r2
025B 8000      1067            sjmp    L012005?
025D           1068   L012008?:
025D           1069   ;        FreqEFM8.c:222: buff[j]=0;
025D E510      1070            mov     a,_getsn_sloc0_1_0
025F 25A0      1071            add     a,_getsn_buff_1_46
0261 FA        1072            mov     r2,a
0262 E511      1073            mov     a,(_getsn_sloc0_1_0 + 1)
0264 35A1      1074            addc    a,(_getsn_buff_1_46 + 1)
0266 FB        1075            mov     r3,a
0267 ACA2      1076            mov     r4,(_getsn_buff_1_46 + 2)
0269 8A82      1077            mov     dpl,r2
026B 8B83      1078            mov     dph,r3
026D 8CF0      1079            mov     b,r4
026F E4        1080            clr     a
0270 120000    1081            lcall   __gptrput
0273           1082   ;        FreqEFM8.c:223: return len;
0273 850082    1083            mov     dpl,_getsn_PARM_2
0276 850183    1084            mov     dph,(_getsn_PARM_2 + 1)
0279 22        1085            ret
027A           1086   ;------------------------------------------------------------
027A           1087   ;Allocation info for local variables in function 'main'
027A           1088   ;------------------------------------------------------------
027A           1089   ;F                         Allocated to registers 
027A           1090   ;C                         Allocated to registers r2 r3 r4 r5 
027A           1091   ;sC                        Allocated with name '_main_sC_1_52'
027A           1092   ;measurements              Allocated with name '_main_measurements_1_52'
027A           1093   ;str                       Allocated with name '_main_str_1_52'
027A           1094   ;test_num                  Allocated with name '_main_test_num_1_52'
027A           1095   ;sloc0                     Allocated with name '_main_sloc0_1_0'
027A           1096   ;------------------------------------------------------------
027A           1097   ;        FreqEFM8.c:228: void main (void) 
027A           1098   ;        -----------------------------------------
027A           1099   ;         function main
027A           1100   ;        -----------------------------------------
027A           1101   _main:
027A           1102   ;        FreqEFM8.c:232: unsigned long sC = 0;
027A           1103   ;        FreqEFM8.c:233: unsigned int measurements = 0;
027A E4        1104            clr     a
027B F580      1105            mov     _main_sC_1_52,a
027D F581      1106            mov     (_main_sC_1_52 + 1),a
027F F582      1107            mov     (_main_sC_1_52 + 2),a
0281 F583      1108            mov     (_main_sC_1_52 + 3),a
0283 F5F0      1109            mov     _main_measurements_1_52,a
0285 F5F1      1110            mov     (_main_measurements_1_52 + 1),a
0287           1111   ;        FreqEFM8.c:234: char str[] = "Hello";
0287 756048    1112            mov     _main_str_1_52,#0x48
028A 756165    1113            mov     (_main_str_1_52 + 0x0001),#0x65
028D 75626C    1114            mov     (_main_str_1_52 + 0x0002),#0x6C
0290 75636C    1115            mov     (_main_str_1_52 + 0x0003),#0x6C
0293 75646F    1116            mov     (_main_str_1_52 + 0x0004),#0x6F
0296 756500    1117            mov     (_main_str_1_52 + 0x0005),#0x00
0299           1118   ;        FreqEFM8.c:236: TIMER0_Init();
0299 120000    1119            lcall   _TIMER0_Init
029C           1120   ;        FreqEFM8.c:238: waitms(500); // Give PuTTY a chance to start.
029C 9001F4    1121            mov     dptr,#0x01F4
029F 120000    1122            lcall   _waitms
02A2           1123   ;        FreqEFM8.c:239: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
02A2 74D0      1124            mov     a,#__str_1
02A4 C0E0      1125            push    acc
02A6 743A      1126            mov     a,#(__str_1 >> 8)
02A8 C0E0      1127            push    acc
02AA 7480      1128            mov     a,#0x80
02AC C0E0      1129            push    acc
02AE 120000    1130            lcall   _printf
02B1 1581      1131            dec     sp
02B3 1581      1132            dec     sp
02B5 1581      1133            dec     sp
02B7           1134   ;        FreqEFM8.c:244: __FILE__, __DATE__, __TIME__);
02B7           1135   ;        FreqEFM8.c:243: "Compiled: %s, %s\n\n",
02B7 7420      1136            mov     a,#__str_5
02B9 C0E0      1137            push    acc
02BB 743C      1138            mov     a,#(__str_5 >> 8)
02BD C0E0      1139            push    acc
02BF 7480      1140            mov     a,#0x80
02C1 C0E0      1141            push    acc
02C3 7490      1142            mov     a,#__str_4
02C5 C0E0      1143            push    acc
02C7 743C      1144            mov     a,#(__str_4 >> 8)
02C9 C0E0      1145            push    acc
02CB 7480      1146            mov     a,#0x80
02CD C0E0      1147            push    acc
02CF 7400      1148            mov     a,#__str_3
02D1 C0E0      1149            push    acc
02D3 743D      1150            mov     a,#(__str_3 >> 8)
02D5 C0E0      1151            push    acc
02D7 7480      1152            mov     a,#0x80
02D9 C0E0      1153            push    acc
02DB 7470      1154            mov     a,#__str_2
02DD C0E0      1155            push    acc
02DF 743D      1156            mov     a,#(__str_2 >> 8)
02E1 C0E0      1157            push    acc
02E3 7480      1158            mov     a,#0x80
02E5 C0E0      1159            push    acc
02E7 120000    1160            lcall   _printf
02EA E581      1161            mov     a,sp
02EC 24F4      1162            add     a,#0xf4
02EE F581      1163            mov     sp,a
02F0           1164   ;        FreqEFM8.c:248: LCD_4BIT();
02F0 120000    1165            lcall   _LCD_4BIT
02F3           1166   ;        FreqEFM8.c:249: LCDprint(str, 1, 1);
02F3 757001    1167            mov     _LCDprint_PARM_2,#0x01
02F6 D290      1168            setb    _LCDprint_PARM_3
02F8 902C60    1169            mov     dptr,#_main_str_1_52
02FB 75F040    1170            mov     b,#0x40
02FE 120000    1171            lcall   _LCDprint
0301           1172   ;        FreqEFM8.c:253: while(1)
0301           1173   L013004?:
0301           1174   ;        FreqEFM8.c:255: TL0=0;
0301 758A00    1175            mov     _TL0,#0x00
0304           1176   ;        FreqEFM8.c:256: TH0=0;
0304 758C00    1177            mov     _TH0,#0x00
0307           1178   ;        FreqEFM8.c:257: overflow_count=0;
0307 75E000    1179            mov     _overflow_count,#0x00
030A           1180   ;        FreqEFM8.c:258: TF0=0;
030A C28D      1181            clr     _TF0
030C           1182   ;        FreqEFM8.c:259: TR0=1; // Start Timer/Counter 0
030C D28C      1183            setb    _TR0
030E           1184   ;        FreqEFM8.c:260: waitms(1000);
030E 9003E8    1185            mov     dptr,#0x03E8
0311 120000    1186            lcall   _waitms
0314           1187   ;        FreqEFM8.c:261: TR0=0; // Stop Timer/Counter 0
0314 C28C      1188            clr     _TR0
0316           1189   ;        FreqEFM8.c:262: F=(overflow_count*0x10000L+TH0*0x100L+TL0);
0316 AAE0      1190            mov     r2,_overflow_count
0318 7B00      1191            mov     r3,#0x00
031A 8B43      1192            mov     (_main_sloc0_1_0 + 3),r3
031C 8A42      1193            mov     (_main_sloc0_1_0 + 2),r2
031E 754100    1194            mov     (_main_sloc0_1_0 + 1),#0x00
0321 754000    1195            mov     _main_sloc0_1_0,#0x00
0324 AE8C      1196            mov     r6,_TH0
0326 7F00      1197            mov     r7,#0x00
0328 7A00      1198            mov     r2,#0x00
032A 8A03      1199            mov     ar3,r2
032C 8F02      1200            mov     ar2,r7
032E 8E07      1201            mov     ar7,r6
0330 7E00      1202            mov     r6,#0x00
0332 EE        1203            mov     a,r6
0333 2540      1204            add     a,_main_sloc0_1_0
0335 F540      1205            mov     _main_sloc0_1_0,a
0337 EF        1206            mov     a,r7
0338 3541      1207            addc    a,(_main_sloc0_1_0 + 1)
033A F541      1208            mov     (_main_sloc0_1_0 + 1),a
033C EA        1209            mov     a,r2
033D 3542      1210            addc    a,(_main_sloc0_1_0 + 2)
033F F542      1211            mov     (_main_sloc0_1_0 + 2),a
0341 EB        1212            mov     a,r3
0342 3543      1213            addc    a,(_main_sloc0_1_0 + 3)
0344 F543      1214            mov     (_main_sloc0_1_0 + 3),a
0346 AC8A      1215            mov     r4,_TL0
0348 E4        1216            clr     a
0349 FD        1217            mov     r5,a
034A 33        1218            rlc     a
034B 95E0      1219            subb    a,acc
034D FA        1220            mov     r2,a
034E FB        1221            mov     r3,a
034F EC        1222            mov     a,r4
0350 2540      1223            add     a,_main_sloc0_1_0
0352 F500      1224            mov     __mullong_PARM_2,a
0354 ED        1225            mov     a,r5
0355 3541      1226            addc    a,(_main_sloc0_1_0 + 1)
0357 F501      1227            mov     (__mullong_PARM_2 + 1),a
0359 EA        1228            mov     a,r2
035A 3542      1229            addc    a,(_main_sloc0_1_0 + 2)
035C F502      1230            mov     (__mullong_PARM_2 + 2),a
035E EB        1231            mov     a,r3
035F 3543      1232            addc    a,(_main_sloc0_1_0 + 3)
0361 F503      1233            mov     (__mullong_PARM_2 + 3),a
0363           1234   ;        FreqEFM8.c:263: C = 1000*1000000* 1.44 / (3*3900*F);
0363 902DB4    1235            mov     dptr,#0x2DB4
0366 E4        1236            clr     a
0367 F5F0      1237            mov     b,a
0369 120000    1238            lcall   __mullong
036C 120000    1239            lcall   ___ulong2fs
036F AA82      1240            mov     r2,dpl
0371 AB83      1241            mov     r3,dph
0373 ACF0      1242            mov     r4,b
0375 FD        1243            mov     r5,a
0376 C002      1244            push    ar2
0378 C003      1245            push    ar3
037A C004      1246            push    ar4
037C C005      1247            push    ar5
037E 90A950    1248            mov     dptr,#0xA950
0381 75F0AB    1249            mov     b,#0xAB
0384 744E      1250            mov     a,#0x4E
0386 120000    1251            lcall   ___fsdiv
0389 AA82      1252            mov     r2,dpl
038B AB83      1253            mov     r3,dph
038D ACF0      1254            mov     r4,b
038F FD        1255            mov     r5,a
0390 E581      1256            mov     a,sp
0392 24FC      1257            add     a,#0xfc
0394 F581      1258            mov     sp,a
0396 8A82      1259            mov     dpl,r2
0398 8B83      1260            mov     dph,r3
039A 8CF0      1261            mov     b,r4
039C ED        1262            mov     a,r5
039D 120000    1263            lcall   ___fs2ulong
03A0 AA82      1264            mov     r2,dpl
03A2 AB83      1265            mov     r3,dph
03A4 ACF0      1266            mov     r4,b
03A6 FD        1267            mov     r5,a
03A7           1268   ;        FreqEFM8.c:264: sC += C;
03A7 EA        1269            mov     a,r2
03A8 2580      1270            add     a,_main_sC_1_52
03AA F580      1271            mov     _main_sC_1_52,a
03AC EB        1272            mov     a,r3
03AD 3581      1273            addc    a,(_main_sC_1_52 + 1)
03AF F581      1274            mov     (_main_sC_1_52 + 1),a
03B1 EC        1275            mov     a,r4
03B2 3582      1276            addc    a,(_main_sC_1_52 + 2)
03B4 F582      1277            mov     (_main_sC_1_52 + 2),a
03B6 ED        1278            mov     a,r5
03B7 3583      1279            addc    a,(_main_sC_1_52 + 3)
03B9 F583      1280            mov     (_main_sC_1_52 + 3),a
03BB           1281   ;        FreqEFM8.c:265: measurements++;
03BB 05F0      1282            inc     _main_measurements_1_52
03BD E4        1283            clr     a
03BE B5F080    1284            cjne    a,_main_measurements_1_52,L013010?
03C1 05F1      1285            inc     (_main_measurements_1_52 + 1)
03C3           1286   L013010?:
03C3           1287   ;        FreqEFM8.c:266: sprintf(test_num, "C=%lu.%lu mF", sC / (measurements * 1000), (sC / measurements) % 1000);
03C3 85F000    1288            mov     __divulong_PARM_2,_main_measurements_1_52
03C6 85F101    1289            mov     (__divulong_PARM_2 + 1),(_main_measurements_1_52 + 1)
03C9 750200    1290            mov     (__divulong_PARM_2 + 2),#0x00
03CC 750300    1291            mov     (__divulong_PARM_2 + 3),#0x00
03CF 858082    1292            mov     dpl,_main_sC_1_52
03D2 858183    1293            mov     dph,(_main_sC_1_52 + 1)
03D5 8582F0    1294            mov     b,(_main_sC_1_52 + 2)
03D8 E583      1295            mov     a,(_main_sC_1_52 + 3)
03DA 120000    1296            lcall   __divulong
03DD 7500E8    1297            mov     __modulong_PARM_2,#0xE8
03E0 750103    1298            mov     (__modulong_PARM_2 + 1),#0x03
03E3 750200    1299            mov     (__modulong_PARM_2 + 2),#0x00
03E6 750300    1300            mov     (__modulong_PARM_2 + 3),#0x00
03E9 120000    1301            lcall   __modulong
03EC 858240    1302            mov     _main_sloc0_1_0,dpl
03EF 858341    1303            mov     (_main_sloc0_1_0 + 1),dph
03F2 85F042    1304            mov     (_main_sloc0_1_0 + 2),b
03F5 F543      1305            mov     (_main_sloc0_1_0 + 3),a
03F7 85F000    1306            mov     __mulint_PARM_2,_main_measurements_1_52
03FA 85F101    1307            mov     (__mulint_PARM_2 + 1),(_main_measurements_1_52 + 1)
03FD 9003E8    1308            mov     dptr,#0x03E8
0400 120000    1309            lcall   __mulint
0403 AE82      1310            mov     r6,dpl
0405 AF83      1311            mov     r7,dph
0407 8E00      1312            mov     __divulong_PARM_2,r6
0409 8F01      1313            mov     (__divulong_PARM_2 + 1),r7
040B 750200    1314            mov     (__divulong_PARM_2 + 2),#0x00
040E 750300    1315            mov     (__divulong_PARM_2 + 3),#0x00
0411 858082    1316            mov     dpl,_main_sC_1_52
0414 858183    1317            mov     dph,(_main_sC_1_52 + 1)
0417 8582F0    1318            mov     b,(_main_sC_1_52 + 2)
041A E583      1319            mov     a,(_main_sC_1_52 + 3)
041C 120000    1320            lcall   __divulong
041F AE82      1321            mov     r6,dpl
0421 AF83      1322            mov     r7,dph
0423 AAF0      1323            mov     r2,b
0425 FB        1324            mov     r3,a
0426 C040      1325            push    _main_sloc0_1_0
0428 C041      1326            push    (_main_sloc0_1_0 + 1)
042A C042      1327            push    (_main_sloc0_1_0 + 2)
042C C043      1328            push    (_main_sloc0_1_0 + 3)
042E C006      1329            push    ar6
0430 C007      1330            push    ar7
0432 C002      1331            push    ar2
0434 C003      1332            push    ar3
0436 7490      1333            mov     a,#__str_6
0438 C0E0      1334            push    acc
043A 7443      1335            mov     a,#(__str_6 >> 8)
043C C0E0      1336            push    acc
043E 7480      1337            mov     a,#0x80
0440 C0E0      1338            push    acc
0442 74D0      1339            mov     a,#_main_test_num_1_52
0444 C0E0      1340            push    acc
0446 742C      1341            mov     a,#(_main_test_num_1_52 >> 8)
0448 C0E0      1342            push    acc
044A 7440      1343            mov     a,#0x40
044C C0E0      1344            push    acc
044E 120000    1345            lcall   _sprintf
0451 E581      1346            mov     a,sp
0453 24F2      1347            add     a,#0xf2
0455 F581      1348            mov     sp,a
0457           1349   ;        FreqEFM8.c:267: if (measurements > 20)
0457 C3        1350            clr     c
0458 7414      1351            mov     a,#0x14
045A 95F0      1352            subb    a,_main_measurements_1_52
045C E4        1353            clr     a
045D 95F1      1354            subb    a,(_main_measurements_1_52 + 1)
045F 5000      1355            jnc     L013002?
0461           1356   ;        FreqEFM8.c:269: sC /= 2;
0461 E583      1357            mov     a,(_main_sC_1_52 + 3)
0463 C3        1358            clr     c
0464 13        1359            rrc     a
0465 F583      1360            mov     (_main_sC_1_52 + 3),a
0467 E582      1361            mov     a,(_main_sC_1_52 + 2)
0469 13        1362            rrc     a
046A F582      1363            mov     (_main_sC_1_52 + 2),a
046C E581      1364            mov     a,(_main_sC_1_52 + 1)
046E 13        1365            rrc     a
046F F581      1366            mov     (_main_sC_1_52 + 1),a
0471 E580      1367            mov     a,_main_sC_1_52
0473 13        1368            rrc     a
0474 F580      1369            mov     _main_sC_1_52,a
0476           1370   ;        FreqEFM8.c:270: measurements /= 2;
0476 E5F1      1371            mov     a,(_main_measurements_1_52 + 1)
0478 C3        1372            clr     c
0479 13        1373            rrc     a
047A C5F0      1374            xch     a,_main_measurements_1_52
047C 13        1375            rrc     a
047D C5F0      1376            xch     a,_main_measurements_1_52
047F F5F1      1377            mov     (_main_measurements_1_52 + 1),a
0481           1378   L013002?:
0481           1379   ;        FreqEFM8.c:272: LCDprint(test_num, 2, 1);
0481 757002    1380            mov     _LCDprint_PARM_2,#0x02
0484 D290      1381            setb    _LCDprint_PARM_3
0486 902CD0    1382            mov     dptr,#_main_test_num_1_52
0489 75F040    1383            mov     b,#0x40
048C 120000    1384            lcall   _LCDprint
048F 020000    1385            ljmp    L013004?
0492           1386            rseg R_CSEG
0492           1387   
0000           1388            rseg R_XINIT
0000           1389   
0000           1390            rseg R_CONST
0000           1391   __str_1:
0000 1B        1392            db 0x1B
0001 5B324A    1393            db '[2J'
0004 00        1394            db 0x00
0005           1395   __str_2:
0005 45464D38  1396            db 'EFM8 Frequency measurement using Timer/Counter 0.'
     20467265
     7175656E
     6379206D
     65617375
     72656D65
     6E742075
     73696E67
     2054696D
     65722F43
     6F756E74
     65722030
     2E
0036 0A        1397            db 0x0A
0037 46696C65  1398            db 'File: %s'
     3A202573
003F 0A        1399            db 0x0A
0040 43        1400            db 'C'
0041 6F6D7069  1401            db 'ompiled: %s, %s'
     6C65643A
     2025732C
     202573
0050 0A        1402            db 0x0A
0051 0A        1403            db 0x0A
0052 00        1404            db 0x00
0053           1405   __str_3:
0053 46726571  1406            db 'FreqEFM8.c'
     45464D38
     2E63
005D 00        1407            db 0x00
005E           1408   __str_4:
005E 46656220  1409            db 'Feb 29 2024'
     32392032
     303234
0069 00        1410            db 0x00
006A           1411   __str_5:
006A 30343A30  1412            db '04:06:51'
     363A3531
0072 00        1413            db 0x00
0073           1414   __str_6:
0073 433D256C  1415            db 'C=%lu.%lu mF'
     752E256C
     75206D46
007F 00        1416            db 0x00
0080           1417   
0003           1418            CSEG
0003           1419   
0003           1420   end
