0000              1   ; LCD_test_4bit.asm: Initializes and uses an LCD in 4-bit mode
0000              2   ; using the most common procedure found on the internet and datasheets.
                  4   $LIST
0000              6   
0000              7   org 0000H
0000 020178       8       ljmp myprogram
0003              9   
0003             10   ;  N76E003 pinout:
0003             11   ;                               -------
0003             12   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0003             13   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0003             14   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0003             15   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0003             16   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0003             17   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0003             18   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0003             19   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0003             20   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0003             21   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0003             22   ;                               -------
0003             23   ;
0003             24   
0003             25   ; These 'equ' must match the hardware wiring
0003             26   LCD_RS equ P1.3
0003             27   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0003             28   LCD_E  equ P1.4
0003             29   LCD_D4 equ P0.0
0003             30   LCD_D5 equ P0.1
0003             31   LCD_D6 equ P0.2
0003             32   LCD_D7 equ P0.3
0003             33   
0003             34   ; When using a 16.6MHz oscillator in the N76E003
0003             35   ; one cycle takes 1.0/16.6MHz = 60.24 ns
0003             36   
0003             37   ;---------------------------------;
0003             38   ; Wait 40 microseconds            ;
0003             39   ;---------------------------------;
0003             40   Wait40uSec:
0003 C000        41       push AR0
0005 7885        42       mov R0, #133
0007             43   L0:
0007 00          44       nop
0008 D8FD        45       djnz R0, L0 ; 1+4 cycles->5*60.24ns*133=40us
000A D000        46       pop AR0
000C 22          47       ret
000D             48   
000D             49   ;---------------------------------;
000D             50   ; Wait 'R2' milliseconds          ;
000D             51   ;---------------------------------;
000D             52   WaitmilliSec:
000D C000        53       push AR0
000F C001        54       push AR1
0011 7928        55   L3: mov R1, #40
0013 7868        56   L2: mov R0, #104
0015 D8FE        57   L1: djnz R0, L1 ; 4 cycles->4*60.24ns*104=25.0us
0017 D9FA        58       djnz R1, L2 ; 25us*40=1.0ms
0019 DAF6        59       djnz R2, L3 ; number of millisecons to wait passed in R2
001B D001        60       pop AR1
001D D000        61       pop AR0
001F 22          62       ret
0020             63   
0020             64   ;---------------------------------;
0020             65   ; Toggles the LCD's 'E' pin       ;
0020             66   ;---------------------------------;
0020             67   LCD_pulse:
0020 D294        68       setb LCD_E
0022 120003      69       lcall Wait40uSec
0025 C294        70       clr LCD_E
0027 22          71       ret
0028             72   
0028             73   ;---------------------------------;
0028             74   ; Writes data to LCD              ;
0028             75   ;---------------------------------;
0028             76   WriteData:
0028 D293        77       setb LCD_RS
002A 020032      78       ljmp LCD_byte
002D             79   
002D             80   ;---------------------------------;
002D             81   ; Writes command to LCD           ;
002D             82   ;---------------------------------;
002D             83   WriteCommand:
002D C293        84       clr LCD_RS
002F 020032      85       ljmp LCD_byte
0032             86   
0032             87   ;---------------------------------;
0032             88   ; Writes acc to LCD in 4-bit mode ;
0032             89   ;---------------------------------;
0032             90   LCD_byte:
0032             91       ; Write high 4 bits first
0032 A2E7        92       mov c, ACC.7
0034 9283        93       mov LCD_D7, c
0036 A2E6        94       mov c, ACC.6
0038 9282        95       mov LCD_D6, c
003A A2E5        96       mov c, ACC.5
003C 9281        97       mov LCD_D5, c
003E A2E4        98       mov c, ACC.4
0040 9280        99       mov LCD_D4, c
0042 120020     100       lcall LCD_pulse
0045            101   
0045            102       ; Write low 4 bits next
0045 A2E3       103       mov c, ACC.3
0047 9283       104       mov LCD_D7, c
0049 A2E2       105       mov c, ACC.2
004B 9282       106       mov LCD_D6, c
004D A2E1       107       mov c, ACC.1
004F 9281       108       mov LCD_D5, c
0051 A2E0       109       mov c, ACC.0
0053 9280       110       mov LCD_D4, c
0055 120020     111       lcall LCD_pulse
0058 22         112       ret
0059            113   
0059            114   ;---------------------------------;
0059            115   ; Configure LCD in 4-bit mode     ;
0059            116   ;---------------------------------;
0059            117   LCD_4BIT:
0059 C294       118       clr LCD_E   ; Resting state of LCD's enable is zero
005B            119       ; clr LCD_RW  ; Not used, pin tied to GND
005B            120   
005B            121       ; After power on, wait for the LCD start up time before initializing
005B 7A28       122       mov R2, #40
005D 12000D     123       lcall WaitmilliSec
0060            124   
0060            125       ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
0060 7433       126       mov a, #0x33
0062 12002D     127       lcall WriteCommand
0065 7433       128       mov a, #0x33
0067 12002D     129       lcall WriteCommand
006A 7432       130       mov a, #0x32 ; change to 4-bit mode
006C 12002D     131       lcall WriteCommand
006F            132   
006F            133       ; Configure the LCD
006F 7428       134       mov a, #0x28
0071 12002D     135       lcall WriteCommand
0074 740C       136       mov a, #0x0c
0076 12002D     137       lcall WriteCommand
0079 7401       138       mov a, #0x01 ;  Clear screen command (takes some time)
007B 12002D     139       lcall WriteCommand
007E            140   
007E            141       ;Wait for clear screen command to finish. Usually takes 1.52ms.
007E 7A02       142       mov R2, #2
0080 12000D     143       lcall WaitmilliSec
0083 22         144       ret
0084            145   
0084            146   
0084            147   print: 
0084 7400       148       MOV A, #0
0086 7900       149       MOV R1, #0
0088 8000       150       sjmp nextchar
008A            151     
008A            152       
008A            153   nextchar:
008A E9         154            MOV A, R1                       ;Updates counter
008B 93         155            MOVC A, @A+DPTR                 ;Retrieves character
008C FB         156       MOV R3, A                    ;Saves character
008D E8         157            MOV A, R0               
008E 29         158            ADD A, R1                       ;Updates cursor
008F 12002D     159       lcall WriteCommand  
0092 EB         160       MOV A, R3                    ;Writes character
0093 120028     161       lcall WriteData
0096            162   
0096            163   
0096 7AFF       164       MOV R2, #0xFF                ;Delay (250ms)
0098 12000D     165       lcall WaitmilliSec
009B            166       
009B 09         167            INC R1
009C B907EB     168            CJNE R1, #7, nextchar; end condition
009F            169            
009F E9         170            MOV A, R1
00A0 93         171            MOVC A, @A+DPTR
00A1            172       
00A1            173       ; Final iteration to print the last character
00A1 E9         174       MOV A, R1                    ;Updates counter
00A2 93         175            MOVC A, @A+DPTR                 ;Retrieves character
00A3 FB         176       MOV R3, A                    ;Saves character
00A4 E8         177            MOV A, R0               
00A5 29         178            ADD A, R1                       ;Updates cursor
00A6 12002D     179       lcall WriteCommand  
00A9 EB         180       MOV A, R3                    ;Writes character
00AA 120028     181       lcall WriteData
00AD            182   
00AD            183   
00AD 7AFF       184       MOV R2, #0xFF                ;Delay (250ms)
00AF 12000D     185       lcall WaitmilliSec
00B2            186      
00B2 22         187       RET
00B3            188      
00B3            189   ; Input: DPTR for emoticon
00B3            190   ; Input: R3 with the cursor
00B3            191   PacManEat:
00B3            192   ;Pacman code
00B3            193   
00B3 7440       194       mov A, #0x40
00B5 12002D     195       lcall WriteCommand
00B8 7900       196       MOV R1, #0
00BA            197   
00BA            198   Loop2:
00BA E9         199            MOV A, R1
00BB 93         200            MOVC A, @A+DPTR
00BC 120028     201            lcall WriteData
00BF 09         202            INC R1
00C0 B908F7     203            CJNE R1, #8, Loop2
00C3            204            
00C3 EB         205            MOV A, R3
00C4 12002D     206            lcall WriteCommand
00C7 7400       207            MOV A, #0x00
00C9 120028     208            lcall WriteData
00CC            209            
00CC 7AFF       210            MOV R2, #0xFF
00CE 12000D     211            lcall WaitmilliSec
00D1 7AFF       212            MOV R2, #0xFF
00D3 12000D     213            lcall WaitmilliSec
00D6            214            
00D6 EB         215            MOV A, R3
00D7 12002D     216            lcall WriteCommand
00DA 7420       217            MOV A, #' '
00DC 120028     218            lcall WriteData
00DF            219            
00DF            220            
00DF 22         221            RET
00E0            222            
00E0            223   Ghost:
00E0            224       
00E0 7440       225       mov A, #0x40
00E2 12002D     226       lcall WriteCommand
00E5 7900       227       MOV R1, #0
00E7            228   
00E7            229   Loop4:
00E7 E9         230            MOV A, R1
00E8 93         231            MOVC A, @A+DPTR
00E9 120028     232            lcall WriteData
00EC 09         233            INC R1
00ED B908F7     234            CJNE R1, #8, Loop4
00F0            235            
00F0 EB         236            MOV A, R3
00F1 12002D     237            lcall WriteCommand
00F4 7400       238            MOV A, #0x00
00F6 120028     239            lcall WriteData
00F9            240            
00F9 22         241            RET
00FA            242   
00FA            243   EatStudentNumber:
00FA            244            ;Pacman code
00FA 900203     245       MOV DPTR, #Pacman
00FD 7B80       246       MOV R3, #0x80
00FF 1200B3     247       lcall PacManEat
0102            248       
0102 90020B     249            MOV DPTR, #AltPacman
0105 7B81       250       MOV R3, #0x81
0107 1200B3     251       lcall PacManEat
010A            252       
010A 900203     253       MOV DPTR, #Pacman
010D 7B82       254       MOV R3, #0x82
010F 1200B3     255       lcall PacManEat
0112            256       
0112 90020B     257       MOV DPTR, #AltPacman
0115 7B83       258       MOV R3, #0x83
0117 1200B3     259       lcall PacManEat
011A            260       
011A 900203     261       MOV DPTR, #Pacman
011D 7B84       262       MOV R3, #0x84
011F 1200B3     263       lcall PacManEat
0122            264       
0122 90020B     265       MOV DPTR, #AltPacman
0125 7B85       266       MOV R3, #0x85
0127 1200B3     267       lcall PacManEat
012A            268       
012A 900203     269       MOV DPTR, #Pacman
012D 7B86       270       MOV R3, #0x86
012F 1200B3     271       lcall PacManEat
0132            272       
0132 7AFF       273       MOV R2, #0xFF
0134 12000D     274       lcall WaitmilliSec
0137            275       
0137 900203     276       MOV DPTR, #Pacman
013A 7BC0       277       MOV R3, #0xC0
013C 1200B3     278       lcall PacManEat
013F            279       
013F 90020B     280            MOV DPTR, #AltPacman
0142 7BC1       281       MOV R3, #0xC1
0144 1200B3     282       lcall PacManEat
0147            283       
0147 900203     284       MOV DPTR, #Pacman
014A 7BC2       285       MOV R3, #0xC2
014C 1200B3     286       lcall PacManEat
014F            287       
014F 90020B     288       MOV DPTR, #AltPacman
0152 7BC3       289       MOV R3, #0xC3
0154 1200B3     290       lcall PacManEat
0157            291       
0157 900203     292       MOV DPTR, #Pacman
015A 7BC4       293       MOV R3, #0xC4
015C 1200B3     294       lcall PacManEat
015F            295       
015F 90020B     296       MOV DPTR, #AltPacman
0162 7BC5       297       MOV R3, #0xC5
0164 1200B3     298       lcall PacManEat
0167            299       
0167 900203     300       MOV DPTR, #Pacman
016A 7BC6       301       MOV R3, #0xC6
016C 1200B3     302       lcall PacManEat
016F            303       
016F 900203     304       MOV DPTR, #Pacman
0172 7BC7       305       MOV R3, #0xC7
0174 1200B3     306       lcall PacManEat
0177 22         307       RET
0178            308   
0178            309   ;---------------------------------;
0178            310   ; Main loop.  Initialize stack,   ;
0178            311   ; ports, LCD, and displays        ;
0178            312   ; letters on the LCD              ;
0178            313   ;---------------------------------;
0178            314   myprogram:
0178 75817F     315       mov SP, #7FH
017B            316       ; Configure the pins as bi-directional so we can use them as input/output
017B 75B100     317       mov P0M1, #0x00
017E 75B200     318       mov P0M2, #0x00
0181 75B300     319       mov P1M1, #0x00
0184 75B400     320       mov P1M2, #0x00
0187 75AD00     321       mov P3M2, #0x00
018A 75AD00     322       mov P3M2, #0x00
018D            323       
018D 120059     324       lcall LCD_4BIT
0190            325   
0190            326       ; Writing out my name - Hashaam
0190 9001F1     327       MOV DPTR, #FirstName
0193 7880       328       MOV R0, #0x80
0195 7A07       329       MOV R2, #7
0197 120084     330       lcall print
019A            331   
019A            332            ; Writing out student number - 10078020
019A 9001FA     333            MOV DPTR, #StudentNumber
019D 78C0       334            MOV R0, #0xC0
019F 7A08       335            MOV R2, #8
01A1 120084     336            lcall print
01A4            337            
01A4 1200FA     338            lcall EatStudentNumber
01A7            339   
01A7            340   
01A7            341            
01A7            342            
01A7            343            
01A7            344            
01A7            345            
01A7            346            
01A7            347            
01A7            348            
01A7            349            
01A7            350   forever:
01A7 7D00       351            MOV R5, #0
01A9 1201AE     352            lcall movementloop
01AC 80F9       353            sjmp forever
01AE            354            
01AE            355   movementloop:
01AE 7CC0       356            MOV R4, #0xC0
01B0            357            
01B0 900000     358            MOV DPTR, #0
01B3 900213     359            MOV DPTR, #Ghost1
01B6 7BC9       360            MOV R3, #0xC9
01B8 1200E0     361            lcall Ghost
01BB            362            
01BB 7AFF       363            MOV R2, #0xFF
01BD 12000D     364            lcall WaitmilliSec
01C0            365            
01C0 900000     366            MOV DPTR, #0
01C3 90021B     367            MOV DPTR, #Ghost2
01C6 7BCA       368            MOV R3, #0xCA
01C8 1200E0     369            lcall Ghost
01CB            370            
01CB 7AFF       371            MOV R2, #0xFF
01CD 12000D     372            lcall WaitmilliSec
01D0            373            
01D0 900000     374            MOV DPTR, #0
01D3 900223     375            MOV DPTR, #Ghost3
01D6 7BCB       376            MOV R3, #0xCB
01D8 1200E0     377            lcall Ghost
01DB            378            
01DB 7AFF       379            MOV R2, #0xFF
01DD 12000D     380            lcall WaitmilliSec
01E0            381            
01E0 900000     382            MOV DPTR, #0
01E3 90022B     383            MOV DPTR, #Ghost4
01E6 7BCC       384            MOV R3, #0xCC
01E8 1200E0     385            lcall Ghost
01EB            386       
01EB 7AFF       387       MOV R2, #0xFF
01ED 12000D     388            lcall WaitmilliSec
01F0 22         389            RET
01F1            390   
01F1            391   ; Data declarations
01F1 48617368   392   FirstName: DB 'Hashaam ' , 0
     61616D20
     00
01FA 31303037   393   StudentNumber: DB '10078020',0
     38303230
     00
0203            394   
0203            395   ; Custom Characters (8 allowed)
0203 000E1F1E   396   Pacman: DB  0x00, 0x0E, 0x1F, 0x1E, 0x1C, 0x1E, 0x1F, 0x0E
     1C1E1F0E
020B 000E1F1B   397   AltPacman: DB  0x00, 0x0E ,0x1F, 0x1B, 0x1F, 0x16, 0x19, 0x0E
     1F16190E
0213 00000E1F   398   Ghost1: DB 0x00, 0x00, 0x0E, 0x1F, 0x15, 0x1F, 0x1F, 0x0A
     151F1F0A
021B 00000E1F   399   Ghost2: DB 0x00, 0x00, 0x0E, 0x1F, 0x15, 0x1F, 0x1F, 0x15
     151F1F15
0223 0E1F151F   400   Ghost3: DB 0x0E, 0x1F, 0x15, 0x1F, 0x1F, 0x0A, 0x00, 0x00
     1F0A0000
022B 0E1F151F   401   Ghost4: DB 0x0E, 0x1F, 0x15, 0x1F, 0x1F, 0x15, 0x00, 0x00
     1F150000
0233            402   
0233 08090A0B   403   Path: DB 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0xCF, 0xCE, 0xCD, 0xCC, 0xCB, 0xCA, 0xC9, 0xC8,0x08, 0x09, 0x0A, 0x0B, 0x0C  
     0C0D0E0F
     CFCECDCC
     CBCAC9C8
     08090A0B
     0C
0248            404   END
