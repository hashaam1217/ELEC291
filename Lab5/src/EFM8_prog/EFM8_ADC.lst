0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 07 13:24:38 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _getsn
0000             30            public _LCDprint
0000             31            public _LCD_4BIT
0000             32            public _WriteCommand
0000             33            public _WriteData
0000             34            public _LCD_byte
0000             35            public _LCD_pulse
0000             36            public _get_period_2
0000             37            public _get_period
0000             38            public _Get_ADC
0000             39            public _Volts_at_Pin
0000             40            public _ADC_at_Pin
0000             41            public _InitPinADC
0000             42            public _waitms
0000             43            public _Timer3us
0000             44            public _InitADC
0000             45            public __c51_external_startup
0000             46            public _LCDprint_PARM_3
0000             47            public _getsn_PARM_2
0000             48            public _LCDprint_PARM_2
0000             49   ;--------------------------------------------------------
0000             50   ; Special Function Registers
0000             51   ;--------------------------------------------------------
0000             52   _ACC            DATA 0xe0
0000             53   _ADC0ASAH       DATA 0xb6
0000             54   _ADC0ASAL       DATA 0xb5
0000             55   _ADC0ASCF       DATA 0xa1
0000             56   _ADC0ASCT       DATA 0xc7
0000             57   _ADC0CF0        DATA 0xbc
0000             58   _ADC0CF1        DATA 0xb9
0000             59   _ADC0CF2        DATA 0xdf
0000             60   _ADC0CN0        DATA 0xe8
0000             61   _ADC0CN1        DATA 0xb2
0000             62   _ADC0CN2        DATA 0xb3
0000             63   _ADC0GTH        DATA 0xc4
0000             64   _ADC0GTL        DATA 0xc3
0000             65   _ADC0H          DATA 0xbe
0000             66   _ADC0L          DATA 0xbd
0000             67   _ADC0LTH        DATA 0xc6
0000             68   _ADC0LTL        DATA 0xc5
0000             69   _ADC0MX         DATA 0xbb
0000             70   _B              DATA 0xf0
0000             71   _CKCON0         DATA 0x8e
0000             72   _CKCON1         DATA 0xa6
0000             73   _CLEN0          DATA 0xc6
0000             74   _CLIE0          DATA 0xc7
0000             75   _CLIF0          DATA 0xe8
0000             76   _CLKSEL         DATA 0xa9
0000             77   _CLOUT0         DATA 0xd1
0000             78   _CLU0CF         DATA 0xb1
0000             79   _CLU0FN         DATA 0xaf
0000             80   _CLU0MX         DATA 0x84
0000             81   _CLU1CF         DATA 0xb3
0000             82   _CLU1FN         DATA 0xb2
0000             83   _CLU1MX         DATA 0x85
0000             84   _CLU2CF         DATA 0xb6
0000             85   _CLU2FN         DATA 0xb5
0000             86   _CLU2MX         DATA 0x91
0000             87   _CLU3CF         DATA 0xbf
0000             88   _CLU3FN         DATA 0xbe
0000             89   _CLU3MX         DATA 0xae
0000             90   _CMP0CN0        DATA 0x9b
0000             91   _CMP0CN1        DATA 0x99
0000             92   _CMP0MD         DATA 0x9d
0000             93   _CMP0MX         DATA 0x9f
0000             94   _CMP1CN0        DATA 0xbf
0000             95   _CMP1CN1        DATA 0xac
0000             96   _CMP1MD         DATA 0xab
0000             97   _CMP1MX         DATA 0xaa
0000             98   _CRC0CN0        DATA 0xce
0000             99   _CRC0CN1        DATA 0x86
0000            100   _CRC0CNT        DATA 0xd3
0000            101   _CRC0DAT        DATA 0xcb
0000            102   _CRC0FLIP       DATA 0xcf
0000            103   _CRC0IN         DATA 0xca
0000            104   _CRC0ST         DATA 0xd2
0000            105   _DAC0CF0        DATA 0x91
0000            106   _DAC0CF1        DATA 0x92
0000            107   _DAC0H          DATA 0x85
0000            108   _DAC0L          DATA 0x84
0000            109   _DAC1CF0        DATA 0x93
0000            110   _DAC1CF1        DATA 0x94
0000            111   _DAC1H          DATA 0x8a
0000            112   _DAC1L          DATA 0x89
0000            113   _DAC2CF0        DATA 0x95
0000            114   _DAC2CF1        DATA 0x96
0000            115   _DAC2H          DATA 0x8c
0000            116   _DAC2L          DATA 0x8b
0000            117   _DAC3CF0        DATA 0x9a
0000            118   _DAC3CF1        DATA 0x9c
0000            119   _DAC3H          DATA 0x8e
0000            120   _DAC3L          DATA 0x8d
0000            121   _DACGCF0        DATA 0x88
0000            122   _DACGCF1        DATA 0x98
0000            123   _DACGCF2        DATA 0xa2
0000            124   _DERIVID        DATA 0xad
0000            125   _DEVICEID       DATA 0xb5
0000            126   _DPH            DATA 0x83
0000            127   _DPL            DATA 0x82
0000            128   _EIE1           DATA 0xe6
0000            129   _EIE2           DATA 0xf3
0000            130   _EIP1           DATA 0xbb
0000            131   _EIP1H          DATA 0xee
0000            132   _EIP2           DATA 0xed
0000            133   _EIP2H          DATA 0xf6
0000            134   _EMI0CN         DATA 0xe7
0000            135   _FLKEY          DATA 0xb7
0000            136   _HFO0CAL        DATA 0xc7
0000            137   _HFO1CAL        DATA 0xd6
0000            138   _HFOCN          DATA 0xef
0000            139   _I2C0ADM        DATA 0xff
0000            140   _I2C0CN0        DATA 0xba
0000            141   _I2C0DIN        DATA 0xbc
0000            142   _I2C0DOUT       DATA 0xbb
0000            143   _I2C0FCN0       DATA 0xad
0000            144   _I2C0FCN1       DATA 0xab
0000            145   _I2C0FCT        DATA 0xf5
0000            146   _I2C0SLAD       DATA 0xbd
0000            147   _I2C0STAT       DATA 0xb9
0000            148   _IE             DATA 0xa8
0000            149   _IP             DATA 0xb8
0000            150   _IPH            DATA 0xf2
0000            151   _IT01CF         DATA 0xe4
0000            152   _LFO0CN         DATA 0xb1
0000            153   _P0             DATA 0x80
0000            154   _P0MASK         DATA 0xfe
0000            155   _P0MAT          DATA 0xfd
0000            156   _P0MDIN         DATA 0xf1
0000            157   _P0MDOUT        DATA 0xa4
0000            158   _P0SKIP         DATA 0xd4
0000            159   _P1             DATA 0x90
0000            160   _P1MASK         DATA 0xee
0000            161   _P1MAT          DATA 0xed
0000            162   _P1MDIN         DATA 0xf2
0000            163   _P1MDOUT        DATA 0xa5
0000            164   _P1SKIP         DATA 0xd5
0000            165   _P2             DATA 0xa0
0000            166   _P2MASK         DATA 0xfc
0000            167   _P2MAT          DATA 0xfb
0000            168   _P2MDIN         DATA 0xf3
0000            169   _P2MDOUT        DATA 0xa6
0000            170   _P2SKIP         DATA 0xcc
0000            171   _P3             DATA 0xb0
0000            172   _P3MDIN         DATA 0xf4
0000            173   _P3MDOUT        DATA 0x9c
0000            174   _PCA0CENT       DATA 0x9e
0000            175   _PCA0CLR        DATA 0x9c
0000            176   _PCA0CN0        DATA 0xd8
0000            177   _PCA0CPH0       DATA 0xfc
0000            178   _PCA0CPH1       DATA 0xea
0000            179   _PCA0CPH2       DATA 0xec
0000            180   _PCA0CPH3       DATA 0xf5
0000            181   _PCA0CPH4       DATA 0x85
0000            182   _PCA0CPH5       DATA 0xde
0000            183   _PCA0CPL0       DATA 0xfb
0000            184   _PCA0CPL1       DATA 0xe9
0000            185   _PCA0CPL2       DATA 0xeb
0000            186   _PCA0CPL3       DATA 0xf4
0000            187   _PCA0CPL4       DATA 0x84
0000            188   _PCA0CPL5       DATA 0xdd
0000            189   _PCA0CPM0       DATA 0xda
0000            190   _PCA0CPM1       DATA 0xdb
0000            191   _PCA0CPM2       DATA 0xdc
0000            192   _PCA0CPM3       DATA 0xae
0000            193   _PCA0CPM4       DATA 0xaf
0000            194   _PCA0CPM5       DATA 0xcc
0000            195   _PCA0H          DATA 0xfa
0000            196   _PCA0L          DATA 0xf9
0000            197   _PCA0MD         DATA 0xd9
0000            198   _PCA0POL        DATA 0x96
0000            199   _PCA0PWM        DATA 0xf7
0000            200   _PCON0          DATA 0x87
0000            201   _PCON1          DATA 0xcd
0000            202   _PFE0CN         DATA 0xc1
0000            203   _PRTDRV         DATA 0xf6
0000            204   _PSCTL          DATA 0x8f
0000            205   _PSTAT0         DATA 0xaa
0000            206   _PSW            DATA 0xd0
0000            207   _REF0CN         DATA 0xd1
0000            208   _REG0CN         DATA 0xc9
0000            209   _REVID          DATA 0xb6
0000            210   _RSTSRC         DATA 0xef
0000            211   _SBCON1         DATA 0x94
0000            212   _SBRLH1         DATA 0x96
0000            213   _SBRLL1         DATA 0x95
0000            214   _SBUF           DATA 0x99
0000            215   _SBUF0          DATA 0x99
0000            216   _SBUF1          DATA 0x92
0000            217   _SCON           DATA 0x98
0000            218   _SCON0          DATA 0x98
0000            219   _SCON1          DATA 0xc8
0000            220   _SFRPAGE        DATA 0xa7
0000            221   _SFRPGCN        DATA 0xbc
0000            222   _SFRSTACK       DATA 0xd7
0000            223   _SMB0ADM        DATA 0xd6
0000            224   _SMB0ADR        DATA 0xd7
0000            225   _SMB0CF         DATA 0xc1
0000            226   _SMB0CN0        DATA 0xc0
0000            227   _SMB0DAT        DATA 0xc2
0000            228   _SMB0FCN0       DATA 0xc3
0000            229   _SMB0FCN1       DATA 0xc4
0000            230   _SMB0FCT        DATA 0xef
0000            231   _SMB0RXLN       DATA 0xc5
0000            232   _SMB0TC         DATA 0xac
0000            233   _SMOD1          DATA 0x93
0000            234   _SP             DATA 0x81
0000            235   _SPI0CFG        DATA 0xa1
0000            236   _SPI0CKR        DATA 0xa2
0000            237   _SPI0CN0        DATA 0xf8
0000            238   _SPI0DAT        DATA 0xa3
0000            239   _SPI0FCN0       DATA 0x9a
0000            240   _SPI0FCN1       DATA 0x9b
0000            241   _SPI0FCT        DATA 0xf7
0000            242   _SPI0PCF        DATA 0xdf
0000            243   _TCON           DATA 0x88
0000            244   _TH0            DATA 0x8c
0000            245   _TH1            DATA 0x8d
0000            246   _TL0            DATA 0x8a
0000            247   _TL1            DATA 0x8b
0000            248   _TMOD           DATA 0x89
0000            249   _TMR2CN0        DATA 0xc8
0000            250   _TMR2CN1        DATA 0xfd
0000            251   _TMR2H          DATA 0xcf
0000            252   _TMR2L          DATA 0xce
0000            253   _TMR2RLH        DATA 0xcb
0000            254   _TMR2RLL        DATA 0xca
0000            255   _TMR3CN0        DATA 0x91
0000            256   _TMR3CN1        DATA 0xfe
0000            257   _TMR3H          DATA 0x95
0000            258   _TMR3L          DATA 0x94
0000            259   _TMR3RLH        DATA 0x93
0000            260   _TMR3RLL        DATA 0x92
0000            261   _TMR4CN0        DATA 0x98
0000            262   _TMR4CN1        DATA 0xff
0000            263   _TMR4H          DATA 0xa5
0000            264   _TMR4L          DATA 0xa4
0000            265   _TMR4RLH        DATA 0xa3
0000            266   _TMR4RLL        DATA 0xa2
0000            267   _TMR5CN0        DATA 0xc0
0000            268   _TMR5CN1        DATA 0xf1
0000            269   _TMR5H          DATA 0xd5
0000            270   _TMR5L          DATA 0xd4
0000            271   _TMR5RLH        DATA 0xd3
0000            272   _TMR5RLL        DATA 0xd2
0000            273   _UART0PCF       DATA 0xd9
0000            274   _UART1FCN0      DATA 0x9d
0000            275   _UART1FCN1      DATA 0xd8
0000            276   _UART1FCT       DATA 0xfa
0000            277   _UART1LIN       DATA 0x9e
0000            278   _UART1PCF       DATA 0xda
0000            279   _VDM0CN         DATA 0xff
0000            280   _WDTCN          DATA 0x97
0000            281   _XBR0           DATA 0xe1
0000            282   _XBR1           DATA 0xe2
0000            283   _XBR2           DATA 0xe3
0000            284   _XOSC0CN        DATA 0x86
0000            285   _DPTR           DATA 0x8382
0000            286   _TMR2RL         DATA 0xcbca
0000            287   _TMR3RL         DATA 0x9392
0000            288   _TMR4RL         DATA 0xa3a2
0000            289   _TMR5RL         DATA 0xd3d2
0000            290   _TMR0           DATA 0x8c8a
0000            291   _TMR1           DATA 0x8d8b
0000            292   _TMR2           DATA 0xcfce
0000            293   _TMR3           DATA 0x9594
0000            294   _TMR4           DATA 0xa5a4
0000            295   _TMR5           DATA 0xd5d4
0000            296   _SBRL1          DATA 0x9695
0000            297   _PCA0           DATA 0xfaf9
0000            298   _PCA0CP0        DATA 0xfcfb
0000            299   _PCA0CP1        DATA 0xeae9
0000            300   _PCA0CP2        DATA 0xeceb
0000            301   _PCA0CP3        DATA 0xf5f4
0000            302   _PCA0CP4        DATA 0x8584
0000            303   _PCA0CP5        DATA 0xdedd
0000            304   _ADC0ASA        DATA 0xb6b5
0000            305   _ADC0GT         DATA 0xc4c3
0000            306   _ADC0           DATA 0xbebd
0000            307   _ADC0LT         DATA 0xc6c5
0000            308   _DAC0           DATA 0x8584
0000            309   _DAC1           DATA 0x8a89
0000            310   _DAC2           DATA 0x8c8b
0000            311   _DAC3           DATA 0x8e8d
0000            312   ;--------------------------------------------------------
0000            313   ; special function bits
0000            314   ;--------------------------------------------------------
0000            315   _ACC_0          BIT 0xe0
0000            316   _ACC_1          BIT 0xe1
0000            317   _ACC_2          BIT 0xe2
0000            318   _ACC_3          BIT 0xe3
0000            319   _ACC_4          BIT 0xe4
0000            320   _ACC_5          BIT 0xe5
0000            321   _ACC_6          BIT 0xe6
0000            322   _ACC_7          BIT 0xe7
0000            323   _TEMPE          BIT 0xe8
0000            324   _ADGN0          BIT 0xe9
0000            325   _ADGN1          BIT 0xea
0000            326   _ADWINT         BIT 0xeb
0000            327   _ADBUSY         BIT 0xec
0000            328   _ADINT          BIT 0xed
0000            329   _IPOEN          BIT 0xee
0000            330   _ADEN           BIT 0xef
0000            331   _B_0            BIT 0xf0
0000            332   _B_1            BIT 0xf1
0000            333   _B_2            BIT 0xf2
0000            334   _B_3            BIT 0xf3
0000            335   _B_4            BIT 0xf4
0000            336   _B_5            BIT 0xf5
0000            337   _B_6            BIT 0xf6
0000            338   _B_7            BIT 0xf7
0000            339   _C0FIF          BIT 0xe8
0000            340   _C0RIF          BIT 0xe9
0000            341   _C1FIF          BIT 0xea
0000            342   _C1RIF          BIT 0xeb
0000            343   _C2FIF          BIT 0xec
0000            344   _C2RIF          BIT 0xed
0000            345   _C3FIF          BIT 0xee
0000            346   _C3RIF          BIT 0xef
0000            347   _D1SRC0         BIT 0x88
0000            348   _D1SRC1         BIT 0x89
0000            349   _D1AMEN         BIT 0x8a
0000            350   _D01REFSL       BIT 0x8b
0000            351   _D3SRC0         BIT 0x8c
0000            352   _D3SRC1         BIT 0x8d
0000            353   _D3AMEN         BIT 0x8e
0000            354   _D23REFSL       BIT 0x8f
0000            355   _D0UDIS         BIT 0x98
0000            356   _D1UDIS         BIT 0x99
0000            357   _D2UDIS         BIT 0x9a
0000            358   _D3UDIS         BIT 0x9b
0000            359   _EX0            BIT 0xa8
0000            360   _ET0            BIT 0xa9
0000            361   _EX1            BIT 0xaa
0000            362   _ET1            BIT 0xab
0000            363   _ES0            BIT 0xac
0000            364   _ET2            BIT 0xad
0000            365   _ESPI0          BIT 0xae
0000            366   _EA             BIT 0xaf
0000            367   _PX0            BIT 0xb8
0000            368   _PT0            BIT 0xb9
0000            369   _PX1            BIT 0xba
0000            370   _PT1            BIT 0xbb
0000            371   _PS0            BIT 0xbc
0000            372   _PT2            BIT 0xbd
0000            373   _PSPI0          BIT 0xbe
0000            374   _P0_0           BIT 0x80
0000            375   _P0_1           BIT 0x81
0000            376   _P0_2           BIT 0x82
0000            377   _P0_3           BIT 0x83
0000            378   _P0_4           BIT 0x84
0000            379   _P0_5           BIT 0x85
0000            380   _P0_6           BIT 0x86
0000            381   _P0_7           BIT 0x87
0000            382   _P1_0           BIT 0x90
0000            383   _P1_1           BIT 0x91
0000            384   _P1_2           BIT 0x92
0000            385   _P1_3           BIT 0x93
0000            386   _P1_4           BIT 0x94
0000            387   _P1_5           BIT 0x95
0000            388   _P1_6           BIT 0x96
0000            389   _P1_7           BIT 0x97
0000            390   _P2_0           BIT 0xa0
0000            391   _P2_1           BIT 0xa1
0000            392   _P2_2           BIT 0xa2
0000            393   _P2_3           BIT 0xa3
0000            394   _P2_4           BIT 0xa4
0000            395   _P2_5           BIT 0xa5
0000            396   _P2_6           BIT 0xa6
0000            397   _P3_0           BIT 0xb0
0000            398   _P3_1           BIT 0xb1
0000            399   _P3_2           BIT 0xb2
0000            400   _P3_3           BIT 0xb3
0000            401   _P3_4           BIT 0xb4
0000            402   _P3_7           BIT 0xb7
0000            403   _CCF0           BIT 0xd8
0000            404   _CCF1           BIT 0xd9
0000            405   _CCF2           BIT 0xda
0000            406   _CCF3           BIT 0xdb
0000            407   _CCF4           BIT 0xdc
0000            408   _CCF5           BIT 0xdd
0000            409   _CR             BIT 0xde
0000            410   _CF             BIT 0xdf
0000            411   _PARITY         BIT 0xd0
0000            412   _F1             BIT 0xd1
0000            413   _OV             BIT 0xd2
0000            414   _RS0            BIT 0xd3
0000            415   _RS1            BIT 0xd4
0000            416   _F0             BIT 0xd5
0000            417   _AC             BIT 0xd6
0000            418   _CY             BIT 0xd7
0000            419   _RI             BIT 0x98
0000            420   _TI             BIT 0x99
0000            421   _RB8            BIT 0x9a
0000            422   _TB8            BIT 0x9b
0000            423   _REN            BIT 0x9c
0000            424   _CE             BIT 0x9d
0000            425   _SMODE          BIT 0x9e
0000            426   _RI1            BIT 0xc8
0000            427   _TI1            BIT 0xc9
0000            428   _RBX1           BIT 0xca
0000            429   _TBX1           BIT 0xcb
0000            430   _REN1           BIT 0xcc
0000            431   _PERR1          BIT 0xcd
0000            432   _OVR1           BIT 0xce
0000            433   _SI             BIT 0xc0
0000            434   _ACK            BIT 0xc1
0000            435   _ARBLOST        BIT 0xc2
0000            436   _ACKRQ          BIT 0xc3
0000            437   _STO            BIT 0xc4
0000            438   _STA            BIT 0xc5
0000            439   _TXMODE         BIT 0xc6
0000            440   _MASTER         BIT 0xc7
0000            441   _SPIEN          BIT 0xf8
0000            442   _TXNF           BIT 0xf9
0000            443   _NSSMD0         BIT 0xfa
0000            444   _NSSMD1         BIT 0xfb
0000            445   _RXOVRN         BIT 0xfc
0000            446   _MODF           BIT 0xfd
0000            447   _WCOL           BIT 0xfe
0000            448   _SPIF           BIT 0xff
0000            449   _IT0            BIT 0x88
0000            450   _IE0            BIT 0x89
0000            451   _IT1            BIT 0x8a
0000            452   _IE1            BIT 0x8b
0000            453   _TR0            BIT 0x8c
0000            454   _TF0            BIT 0x8d
0000            455   _TR1            BIT 0x8e
0000            456   _TF1            BIT 0x8f
0000            457   _T2XCLK0        BIT 0xc8
0000            458   _T2XCLK1        BIT 0xc9
0000            459   _TR2            BIT 0xca
0000            460   _T2SPLIT        BIT 0xcb
0000            461   _TF2CEN         BIT 0xcc
0000            462   _TF2LEN         BIT 0xcd
0000            463   _TF2L           BIT 0xce
0000            464   _TF2H           BIT 0xcf
0000            465   _T4XCLK0        BIT 0x98
0000            466   _T4XCLK1        BIT 0x99
0000            467   _TR4            BIT 0x9a
0000            468   _T4SPLIT        BIT 0x9b
0000            469   _TF4CEN         BIT 0x9c
0000            470   _TF4LEN         BIT 0x9d
0000            471   _TF4L           BIT 0x9e
0000            472   _TF4H           BIT 0x9f
0000            473   _T5XCLK0        BIT 0xc0
0000            474   _T5XCLK1        BIT 0xc1
0000            475   _TR5            BIT 0xc2
0000            476   _T5SPLIT        BIT 0xc3
0000            477   _TF5CEN         BIT 0xc4
0000            478   _TF5LEN         BIT 0xc5
0000            479   _TF5L           BIT 0xc6
0000            480   _TF5H           BIT 0xc7
0000            481   _RIE            BIT 0xd8
0000            482   _RXTO0          BIT 0xd9
0000            483   _RXTO1          BIT 0xda
0000            484   _RFRQ           BIT 0xdb
0000            485   _TIE            BIT 0xdc
0000            486   _TXHOLD         BIT 0xdd
0000            487   _TXNF1          BIT 0xde
0000            488   _TFRQ           BIT 0xdf
0000            489   ;--------------------------------------------------------
0000            490   ; overlayable register banks
0000            491   ;--------------------------------------------------------
0000            492            rbank0 segment data overlay
0000            493   ;--------------------------------------------------------
0000            494   ; internal ram data
0000            495   ;--------------------------------------------------------
0000            496            rseg R_DSEG
0000            497   _LCDprint_PARM_2:
0000            498            ds 1
0001            499   _getsn_PARM_2:
0001            500            ds 2
0003            501   _getsn_buff_1_76:
0003            502            ds 3
0006            503   _getsn_sloc0_1_0:
0006            504            ds 2
0008            505   _main_i_1_82:
0008            506            ds 2
000A            507   _main_hello_1_82:
000A            508            ds 4
000E            509   _main_peak_voltage_other_1_82:
000E            510            ds 4
0012            511   _main_first_line_1_82:
0012            512            ds 16
0022            513   _main_second_line_1_82:
0022            514            ds 16
0032            515   _main_sloc0_1_0:
0032            516            ds 2
0034            517   _main_sloc1_1_0:
0034            518            ds 4
0038            519   ;--------------------------------------------------------
0038            520   ; overlayable items in internal ram 
0038            521   ;--------------------------------------------------------
0000            522            rseg    R_OSEG
0000            523            rseg    R_OSEG
0000            524   _InitPinADC_PARM_2:
0000            525            ds 1
0001            526            rseg    R_OSEG
0001            527   ;--------------------------------------------------------
0001            528   ; indirectly addressable internal ram data
0001            529   ;--------------------------------------------------------
0000            530            rseg R_ISEG
0000            531   ;--------------------------------------------------------
0000            532   ; absolute internal ram data
0000            533   ;--------------------------------------------------------
0000            534            DSEG
0000            535   ;--------------------------------------------------------
0000            536   ; bit data
0000            537   ;--------------------------------------------------------
0000            538            rseg R_BSEG
0000            539   _LCDprint_PARM_3:
0000            540            DBIT    1
0001            541   ;--------------------------------------------------------
0001            542   ; paged external ram data
0001            543   ;--------------------------------------------------------
0000            544            rseg R_PSEG
0000            545   ;--------------------------------------------------------
0000            546   ; external ram data
0000            547   ;--------------------------------------------------------
0000            548            rseg R_XSEG
0000            549   _main_p_1_82:
0000            550            ds 12
000C            551   _main_vt_1_82:
000C            552            ds 12
0018            553   _main_per_1_82:
0018            554            ds 12
0024            555   ;--------------------------------------------------------
0024            556   ; absolute external ram data
0024            557   ;--------------------------------------------------------
0000            558            XSEG
0000            559   ;--------------------------------------------------------
0000            560   ; external initialized ram data
0000            561   ;--------------------------------------------------------
0000            562            rseg R_IXSEG
0000            563            rseg R_HOME
0000            564            rseg R_GSINIT
0000            565            rseg R_CSEG
0000            566   ;--------------------------------------------------------
0000            567   ; Reset entry point and interrupt vectors
0000            568   ;--------------------------------------------------------
0000            569            CSEG at 0x0000
0000 020000     570            ljmp    _crt0
0003            571   ;--------------------------------------------------------
0003            572   ; global & static initialisations
0003            573   ;--------------------------------------------------------
0000            574            rseg R_HOME
0000            575            rseg R_GSINIT
0000            576            rseg R_GSINIT
0000            577   ;--------------------------------------------------------
0000            578   ; data variables initialization
0000            579   ;--------------------------------------------------------
0000            580            rseg R_DINIT
0000            581            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            582   ;--------------------------------------------------------
0000            583   ; code
0000            584   ;--------------------------------------------------------
0000            585            rseg R_CSEG
0000            586   ;------------------------------------------------------------
0000            587   ;Allocation info for local variables in function '_c51_external_startup'
0000            588   ;------------------------------------------------------------
0000            589   ;------------------------------------------------------------
0000            590   ;        EFM8_ADC.c:29: char _c51_external_startup (void)
0000            591   ;        -----------------------------------------
0000            592   ;         function _c51_external_startup
0000            593   ;        -----------------------------------------
0000            594   __c51_external_startup:
0000            595            using   0
0000            596   ;        EFM8_ADC.c:32: SFRPAGE = 0x00;
0000 75A700     597            mov     _SFRPAGE,#0x00
0003            598   ;        EFM8_ADC.c:33: WDTCN = 0xDE; //First key
0003 7597DE     599            mov     _WDTCN,#0xDE
0006            600   ;        EFM8_ADC.c:34: WDTCN = 0xAD; //Second key
0006 7597AD     601            mov     _WDTCN,#0xAD
0009            602   ;        EFM8_ADC.c:36: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     603            mov     _VDM0CN,#0x80
000C            604   ;        EFM8_ADC.c:37: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     605            mov     _RSTSRC,#0x06
000F            606   ;        EFM8_ADC.c:44: SFRPAGE = 0x10;
000F 75A710     607            mov     _SFRPAGE,#0x10
0012            608   ;        EFM8_ADC.c:45: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     609            mov     _PFE0CN,#0x20
0015            610   ;        EFM8_ADC.c:46: SFRPAGE = 0x00;
0015 75A700     611            mov     _SFRPAGE,#0x00
0018            612   ;        EFM8_ADC.c:67: CLKSEL = 0x00;
0018 75A900     613            mov     _CLKSEL,#0x00
001B            614   ;        EFM8_ADC.c:68: CLKSEL = 0x00;
001B 75A900     615            mov     _CLKSEL,#0x00
001E            616   ;        EFM8_ADC.c:69: while ((CLKSEL & 0x80) == 0);
001E            617   L002001?:
001E E5A9       618            mov     a,_CLKSEL
0020 30E710     619            jnb     acc.7,L002001?
0023            620   ;        EFM8_ADC.c:70: CLKSEL = 0x03;
0023 75A903     621            mov     _CLKSEL,#0x03
0026            622   ;        EFM8_ADC.c:71: CLKSEL = 0x03;
0026 75A903     623            mov     _CLKSEL,#0x03
0029            624   ;        EFM8_ADC.c:72: while ((CLKSEL & 0x80) == 0);
0029            625   L002004?:
0029 E5A9       626            mov     a,_CLKSEL
002B 30E790     627            jnb     acc.7,L002004?
002E            628   ;        EFM8_ADC.c:77: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     629            orl     _P0MDOUT,#0x10
0031            630   ;        EFM8_ADC.c:78: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     631            mov     _XBR0,#0x01
0034            632   ;        EFM8_ADC.c:79: XBR1     = 0X00;
0034 75E200     633            mov     _XBR1,#0x00
0037            634   ;        EFM8_ADC.c:80: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     635            mov     _XBR2,#0x40
003A            636   ;        EFM8_ADC.c:86: SCON0 = 0x10;
003A 759810     637            mov     _SCON0,#0x10
003D            638   ;        EFM8_ADC.c:87: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     639            mov     _TH1,#0xE6
0040            640   ;        EFM8_ADC.c:88: TL1 = TH1;      // Init Timer1
0040 858D8B     641            mov     _TL1,_TH1
0043            642   ;        EFM8_ADC.c:89: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     643            anl     _TMOD,#0x0F
0046            644   ;        EFM8_ADC.c:90: TMOD |=  0x21;
0046 438921     645            orl     _TMOD,#0x21
0049            646   ;        EFM8_ADC.c:91: TR1 = 1; // START Timer1
0049 D28E       647            setb    _TR1
004B            648   ;        EFM8_ADC.c:92: TI = 1;  // Indicate TX0 ready
004B D299       649            setb    _TI
004D            650   ;        EFM8_ADC.c:94: return 0;
004D 758200     651            mov     dpl,#0x00
0050 22         652            ret
0051            653   ;------------------------------------------------------------
0051            654   ;Allocation info for local variables in function 'InitADC'
0051            655   ;------------------------------------------------------------
0051            656   ;------------------------------------------------------------
0051            657   ;        EFM8_ADC.c:99: void InitADC (void)
0051            658   ;        -----------------------------------------
0051            659   ;         function InitADC
0051            660   ;        -----------------------------------------
0051            661   _InitADC:
0051            662   ;        EFM8_ADC.c:101: SFRPAGE = 0x00;
0051 75A700     663            mov     _SFRPAGE,#0x00
0054            664   ;        EFM8_ADC.c:102: ADEN=0; // Disable ADC
0054 C2EF       665            clr     _ADEN
0056            666   ;        EFM8_ADC.c:107: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     667            mov     _ADC0CN1,#0x80
0059            668   ;        EFM8_ADC.c:111: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     669            mov     _ADC0CF0,#0x20
005C            670   ;        EFM8_ADC.c:115: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     671            mov     _ADC0CF1,#0x1E
005F            672   ;        EFM8_ADC.c:124: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     673            mov     _ADC0CN0,#0x00
0062            674   ;        EFM8_ADC.c:129: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     675            mov     _ADC0CF2,#0x3F
0065            676   ;        EFM8_ADC.c:133: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     677            mov     _ADC0CN2,#0x00
0068            678   ;        EFM8_ADC.c:135: ADEN=1; // Enable ADC
0068 D2EF       679            setb    _ADEN
006A 22         680            ret
006B            681   ;------------------------------------------------------------
006B            682   ;Allocation info for local variables in function 'Timer3us'
006B            683   ;------------------------------------------------------------
006B            684   ;us                        Allocated to registers r2 
006B            685   ;i                         Allocated to registers r3 
006B            686   ;------------------------------------------------------------
006B            687   ;        EFM8_ADC.c:139: void Timer3us(unsigned char us)
006B            688   ;        -----------------------------------------
006B            689   ;         function Timer3us
006B            690   ;        -----------------------------------------
006B            691   _Timer3us:
006B AA82       692            mov     r2,dpl
006D            693   ;        EFM8_ADC.c:144: CKCON0|=0b_0100_0000;
006D 438E40     694            orl     _CKCON0,#0x40
0070            695   ;        EFM8_ADC.c:146: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     696            mov     _TMR3RL,#0xB8
0073 7593FF     697            mov     (_TMR3RL >> 8),#0xFF
0076            698   ;        EFM8_ADC.c:147: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     699            mov     _TMR3,_TMR3RL
0079 859395     700            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            701   ;        EFM8_ADC.c:149: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     702            mov     _TMR3CN0,#0x04
007F            703   ;        EFM8_ADC.c:150: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       704            mov     r3,#0x00
0081            705   L004004?:
0081 C3         706            clr     c
0082 EB         707            mov     a,r3
0083 9A         708            subb    a,r2
0084 5000       709            jnc     L004007?
0086            710   ;        EFM8_ADC.c:152: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            711   L004001?:
0086 E591       712            mov     a,_TMR3CN0
0088 30E790     713            jnb     acc.7,L004001?
008B            714   ;        EFM8_ADC.c:153: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     715            anl     _TMR3CN0,#0x7F
008E            716   ;        EFM8_ADC.c:150: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         717            inc     r3
008F 8000       718            sjmp    L004004?
0091            719   L004007?:
0091            720   ;        EFM8_ADC.c:155: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     721            mov     _TMR3CN0,#0x00
0094 22         722            ret
0095            723   ;------------------------------------------------------------
0095            724   ;Allocation info for local variables in function 'waitms'
0095            725   ;------------------------------------------------------------
0095            726   ;ms                        Allocated to registers r2 r3 
0095            727   ;j                         Allocated to registers r4 r5 
0095            728   ;k                         Allocated to registers r6 
0095            729   ;------------------------------------------------------------
0095            730   ;        EFM8_ADC.c:158: void waitms (unsigned int ms)
0095            731   ;        -----------------------------------------
0095            732   ;         function waitms
0095            733   ;        -----------------------------------------
0095            734   _waitms:
0095 AA82       735            mov     r2,dpl
0097 AB83       736            mov     r3,dph
0099            737   ;        EFM8_ADC.c:162: for(j=0; j<ms; j++)
0099 7C00       738            mov     r4,#0x00
009B 7D00       739            mov     r5,#0x00
009D            740   L005005?:
009D C3         741            clr     c
009E EC         742            mov     a,r4
009F 9A         743            subb    a,r2
00A0 ED         744            mov     a,r5
00A1 9B         745            subb    a,r3
00A2 5000       746            jnc     L005009?
00A4            747   ;        EFM8_ADC.c:163: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       748            mov     r6,#0x00
00A6            749   L005001?:
00A6 BE04D0     750            cjne    r6,#0x04,L005018?
00A9            751   L005018?:
00A9 5000       752            jnc     L005007?
00AB 7582FA     753            mov     dpl,#0xFA
00AE C002       754            push    ar2
00B0 C003       755            push    ar3
00B2 C004       756            push    ar4
00B4 C005       757            push    ar5
00B6 C006       758            push    ar6
00B8 120000     759            lcall   _Timer3us
00BB D006       760            pop     ar6
00BD D005       761            pop     ar5
00BF D004       762            pop     ar4
00C1 D003       763            pop     ar3
00C3 D002       764            pop     ar2
00C5 0E         765            inc     r6
00C6 8000       766            sjmp    L005001?
00C8            767   L005007?:
00C8            768   ;        EFM8_ADC.c:162: for(j=0; j<ms; j++)
00C8 0C         769            inc     r4
00C9 BC0010     770            cjne    r4,#0x00,L005005?
00CC 0D         771            inc     r5
00CD 8000       772            sjmp    L005005?
00CF            773   L005009?:
00CF 22         774            ret
00D0            775   ;------------------------------------------------------------
00D0            776   ;Allocation info for local variables in function 'InitPinADC'
00D0            777   ;------------------------------------------------------------
00D0            778   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            779   ;portno                    Allocated to registers r2 
00D0            780   ;mask                      Allocated to registers r3 
00D0            781   ;------------------------------------------------------------
00D0            782   ;        EFM8_ADC.c:168: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            783   ;        -----------------------------------------
00D0            784   ;         function InitPinADC
00D0            785   ;        -----------------------------------------
00D0            786   _InitPinADC:
00D0 AA82       787            mov     r2,dpl
00D2            788   ;        EFM8_ADC.c:172: mask=1<<pinno;
00D2 8500F0     789            mov     b,_InitPinADC_PARM_2
00D5 05F0       790            inc     b
00D7 7401       791            mov     a,#0x01
00D9 8000       792            sjmp    L006013?
00DB            793   L006011?:
00DB 25E0       794            add     a,acc
00DD            795   L006013?:
00DD D5F0D0     796            djnz    b,L006011?
00E0 FB         797            mov     r3,a
00E1            798   ;        EFM8_ADC.c:174: SFRPAGE = 0x20;
00E1 75A720     799            mov     _SFRPAGE,#0x20
00E4            800   ;        EFM8_ADC.c:175: switch (portno)
00E4 BA0010     801            cjne    r2,#0x00,L006014?
00E7 8000       802            sjmp    L006001?
00E9            803   L006014?:
00E9 BA0190     804            cjne    r2,#0x01,L006015?
00EC 8000       805            sjmp    L006002?
00EE            806   L006015?:
00EE            807   ;        EFM8_ADC.c:177: case 0:
00EE BA0210     808            cjne    r2,#0x02,L006005?
00F1 8000       809            sjmp    L006003?
00F3            810   L006001?:
00F3            811   ;        EFM8_ADC.c:178: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         812            mov     a,r3
00F4 F4         813            cpl     a
00F5 FA         814            mov     r2,a
00F6 52F1       815            anl     _P0MDIN,a
00F8            816   ;        EFM8_ADC.c:179: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         817            mov     a,r3
00F9 42D4       818            orl     _P0SKIP,a
00FB            819   ;        EFM8_ADC.c:180: break;
00FB            820   ;        EFM8_ADC.c:181: case 1:
00FB 8000       821            sjmp    L006005?
00FD            822   L006002?:
00FD            823   ;        EFM8_ADC.c:182: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         824            mov     a,r3
00FE F4         825            cpl     a
00FF FA         826            mov     r2,a
0100 52F2       827            anl     _P1MDIN,a
0102            828   ;        EFM8_ADC.c:183: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         829            mov     a,r3
0103 42D5       830            orl     _P1SKIP,a
0105            831   ;        EFM8_ADC.c:184: break;
0105            832   ;        EFM8_ADC.c:185: case 2:
0105 8000       833            sjmp    L006005?
0107            834   L006003?:
0107            835   ;        EFM8_ADC.c:186: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         836            mov     a,r3
0108 F4         837            cpl     a
0109 FA         838            mov     r2,a
010A 52F3       839            anl     _P2MDIN,a
010C            840   ;        EFM8_ADC.c:187: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         841            mov     a,r3
010D 42CC       842            orl     _P2SKIP,a
010F            843   ;        EFM8_ADC.c:191: }
010F            844   L006005?:
010F            845   ;        EFM8_ADC.c:192: SFRPAGE = 0x00;
010F 75A700     846            mov     _SFRPAGE,#0x00
0112 22         847            ret
0113            848   ;------------------------------------------------------------
0113            849   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            850   ;------------------------------------------------------------
0113            851   ;pin                       Allocated to registers 
0113            852   ;------------------------------------------------------------
0113            853   ;        EFM8_ADC.c:195: unsigned int ADC_at_Pin(unsigned char pin)
0113            854   ;        -----------------------------------------
0113            855   ;         function ADC_at_Pin
0113            856   ;        -----------------------------------------
0113            857   _ADC_at_Pin:
0113 8582BB     858            mov     _ADC0MX,dpl
0116            859   ;        EFM8_ADC.c:198: ADINT = 0;
0116 C2ED       860            clr     _ADINT
0118            861   ;        EFM8_ADC.c:199: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       862            setb    _ADBUSY
011A            863   ;        EFM8_ADC.c:200: while (!ADINT); // Wait for conversion to complete
011A            864   L007001?:
011A 30ED90     865            jnb     _ADINT,L007001?
011D            866   ;        EFM8_ADC.c:201: return (ADC0);
011D 85BD82     867            mov     dpl,_ADC0
0120 85BE83     868            mov     dph,(_ADC0 >> 8)
0123 22         869            ret
0124            870   ;------------------------------------------------------------
0124            871   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            872   ;------------------------------------------------------------
0124            873   ;pin                       Allocated to registers r2 
0124            874   ;------------------------------------------------------------
0124            875   ;        EFM8_ADC.c:204: float Volts_at_Pin(unsigned char pin)
0124            876   ;        -----------------------------------------
0124            877   ;         function Volts_at_Pin
0124            878   ;        -----------------------------------------
0124            879   _Volts_at_Pin:
0124            880   ;        EFM8_ADC.c:206: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     881            lcall   _ADC_at_Pin
0127 120000     882            lcall   ___uint2fs
012A AA82       883            mov     r2,dpl
012C AB83       884            mov     r3,dph
012E ACF0       885            mov     r4,b
0130 FD         886            mov     r5,a
0131 C002       887            push    ar2
0133 C003       888            push    ar3
0135 C004       889            push    ar4
0137 C005       890            push    ar5
0139 906C8B     891            mov     dptr,#0x6C8B
013C 75F053     892            mov     b,#0x53
013F 7440       893            mov     a,#0x40
0141 120000     894            lcall   ___fsmul
0144 AA82       895            mov     r2,dpl
0146 AB83       896            mov     r3,dph
0148 ACF0       897            mov     r4,b
014A FD         898            mov     r5,a
014B E581       899            mov     a,sp
014D 24FC       900            add     a,#0xfc
014F F581       901            mov     sp,a
0151 E4         902            clr     a
0152 C0E0       903            push    acc
0154 74FC       904            mov     a,#0xFC
0156 C0E0       905            push    acc
0158 747F       906            mov     a,#0x7F
015A C0E0       907            push    acc
015C 7446       908            mov     a,#0x46
015E C0E0       909            push    acc
0160 8A82       910            mov     dpl,r2
0162 8B83       911            mov     dph,r3
0164 8CF0       912            mov     b,r4
0166 ED         913            mov     a,r5
0167 120000     914            lcall   ___fsdiv
016A AA82       915            mov     r2,dpl
016C AB83       916            mov     r3,dph
016E ACF0       917            mov     r4,b
0170 FD         918            mov     r5,a
0171 E581       919            mov     a,sp
0173 24FC       920            add     a,#0xfc
0175 F581       921            mov     sp,a
0177 8A82       922            mov     dpl,r2
0179 8B83       923            mov     dph,r3
017B 8CF0       924            mov     b,r4
017D ED         925            mov     a,r5
017E 22         926            ret
017F            927   ;------------------------------------------------------------
017F            928   ;Allocation info for local variables in function 'Get_ADC'
017F            929   ;------------------------------------------------------------
017F            930   ;------------------------------------------------------------
017F            931   ;        EFM8_ADC.c:210: unsigned int Get_ADC (void)
017F            932   ;        -----------------------------------------
017F            933   ;         function Get_ADC
017F            934   ;        -----------------------------------------
017F            935   _Get_ADC:
017F            936   ;        EFM8_ADC.c:212: ADINT = 0;
017F C2ED       937            clr     _ADINT
0181            938   ;        EFM8_ADC.c:213: ADBUSY = 1;
0181 D2EC       939            setb    _ADBUSY
0183            940   ;        EFM8_ADC.c:214: while (!ADINT); // Wait for conversion to complete
0183            941   L009001?:
0183 30EDD0     942            jnb     _ADINT,L009001?
0186            943   ;        EFM8_ADC.c:215: return (ADC0);
0186 85BD82     944            mov     dpl,_ADC0
0189 85BE83     945            mov     dph,(_ADC0 >> 8)
018C 22         946            ret
018D            947   ;------------------------------------------------------------
018D            948   ;Allocation info for local variables in function 'get_period'
018D            949   ;------------------------------------------------------------
018D            950   ;half_period               Allocated to registers r2 r3 r4 r5 
018D            951   ;overflow_count            Allocated to registers 
018D            952   ;------------------------------------------------------------
018D            953   ;        EFM8_ADC.c:218: float get_period(void)
018D            954   ;        -----------------------------------------
018D            955   ;         function get_period
018D            956   ;        -----------------------------------------
018D            957   _get_period:
018D            958   ;        EFM8_ADC.c:223: ADC0MX=QFP32_MUX_P2_4;
018D 75BB11     959            mov     _ADC0MX,#0x11
0190            960   ;        EFM8_ADC.c:224: ADINT = 0;
0190 C2ED       961            clr     _ADINT
0192            962   ;        EFM8_ADC.c:225: ADBUSY=1;
0192 D2EC       963            setb    _ADBUSY
0194            964   ;        EFM8_ADC.c:226: while (!ADINT); // Wait for conversion to complete
0194            965   L010001?:
0194 30ED10     966            jnb     _ADINT,L010001?
0197            967   ;        EFM8_ADC.c:228: TL0=0;
0197 758A00     968            mov     _TL0,#0x00
019A            969   ;        EFM8_ADC.c:229: TH0=0;
019A 758C00     970            mov     _TH0,#0x00
019D            971   ;        EFM8_ADC.c:230: while (Get_ADC()!=0); // Wait for the signal to be zero
019D            972   L010004?:
019D 120000     973            lcall   _Get_ADC
01A0 E582       974            mov     a,dpl
01A2 8583F0     975            mov     b,dph
01A5 45F0       976            orl     a,b
01A7 7000       977            jnz     L010004?
01A9            978   ;        EFM8_ADC.c:231: while (Get_ADC()==0); // Wait for the signal to be positive
01A9            979   L010007?:
01A9 120000     980            lcall   _Get_ADC
01AC E582       981            mov     a,dpl
01AE 8583F0     982            mov     b,dph
01B1 45F0       983            orl     a,b
01B3 6000       984            jz      L010007?
01B5            985   ;        EFM8_ADC.c:232: TR0=1; // Start the timer 0
01B5 D28C       986            setb    _TR0
01B7            987   ;        EFM8_ADC.c:233: while (Get_ADC()!=0); // Wait for the signal to be zero again
01B7            988   L010010?:
01B7 120000     989            lcall   _Get_ADC
01BA E582       990            mov     a,dpl
01BC 8583F0     991            mov     b,dph
01BF 45F0       992            orl     a,b
01C1 7000       993            jnz     L010010?
01C3            994   ;        EFM8_ADC.c:234: TR0=0; // Stop timer 0
01C3 C28C       995            clr     _TR0
01C5            996   ;        EFM8_ADC.c:236: half_period=TH0*256.0+TL0; // The 16-bit number [TH0-TL0]
01C5 858C82     997            mov     dpl,_TH0
01C8 120000     998            lcall   ___uchar2fs
01CB AA82       999            mov     r2,dpl
01CD AB83      1000            mov     r3,dph
01CF ACF0      1001            mov     r4,b
01D1 FD        1002            mov     r5,a
01D2 C002      1003            push    ar2
01D4 C003      1004            push    ar3
01D6 C004      1005            push    ar4
01D8 C005      1006            push    ar5
01DA 900000    1007            mov     dptr,#0x0000
01DD 75F080    1008            mov     b,#0x80
01E0 7443      1009            mov     a,#0x43
01E2 120000    1010            lcall   ___fsmul
01E5 AA82      1011            mov     r2,dpl
01E7 AB83      1012            mov     r3,dph
01E9 ACF0      1013            mov     r4,b
01EB FD        1014            mov     r5,a
01EC E581      1015            mov     a,sp
01EE 24FC      1016            add     a,#0xfc
01F0 F581      1017            mov     sp,a
01F2 AE8A      1018            mov     r6,_TL0
01F4 7F00      1019            mov     r7,#0x00
01F6 8E82      1020            mov     dpl,r6
01F8 8F83      1021            mov     dph,r7
01FA C002      1022            push    ar2
01FC C003      1023            push    ar3
01FE C004      1024            push    ar4
0200 C005      1025            push    ar5
0202 120000    1026            lcall   ___sint2fs
0205 AE82      1027            mov     r6,dpl
0207 AF83      1028            mov     r7,dph
0209 A8F0      1029            mov     r0,b
020B F9        1030            mov     r1,a
020C D005      1031            pop     ar5
020E D004      1032            pop     ar4
0210 D003      1033            pop     ar3
0212 D002      1034            pop     ar2
0214 C006      1035            push    ar6
0216 C007      1036            push    ar7
0218 C000      1037            push    ar0
021A C001      1038            push    ar1
021C 8A82      1039            mov     dpl,r2
021E 8B83      1040            mov     dph,r3
0220 8CF0      1041            mov     b,r4
0222 ED        1042            mov     a,r5
0223 120000    1043            lcall   ___fsadd
0226 AA82      1044            mov     r2,dpl
0228 AB83      1045            mov     r3,dph
022A ACF0      1046            mov     r4,b
022C FD        1047            mov     r5,a
022D E581      1048            mov     a,sp
022F 24FC      1049            add     a,#0xfc
0231 F581      1050            mov     sp,a
0233           1051   ;        EFM8_ADC.c:239: return half_period;
0233 8A82      1052            mov     dpl,r2
0235 8B83      1053            mov     dph,r3
0237 8CF0      1054            mov     b,r4
0239 ED        1055            mov     a,r5
023A 22        1056            ret
023B           1057   ;------------------------------------------------------------
023B           1058   ;Allocation info for local variables in function 'get_period_2'
023B           1059   ;------------------------------------------------------------
023B           1060   ;half_period               Allocated to registers r2 r3 r4 r5 
023B           1061   ;overflow_count            Allocated to registers 
023B           1062   ;------------------------------------------------------------
023B           1063   ;        EFM8_ADC.c:242: float get_period_2(void)
023B           1064   ;        -----------------------------------------
023B           1065   ;         function get_period_2
023B           1066   ;        -----------------------------------------
023B           1067   _get_period_2:
023B           1068   ;        EFM8_ADC.c:247: ADC0MX=QFP32_MUX_P2_4;
023B 75BB11    1069            mov     _ADC0MX,#0x11
023E           1070   ;        EFM8_ADC.c:248: ADINT = 0;
023E C2ED      1071            clr     _ADINT
0240           1072   ;        EFM8_ADC.c:249: ADBUSY=1;
0240 D2EC      1073            setb    _ADBUSY
0242           1074   ;        EFM8_ADC.c:250: while (!ADINT); // Wait for conversion to complete
0242           1075   L011001?:
0242 30EDD0    1076            jnb     _ADINT,L011001?
0245           1077   ;        EFM8_ADC.c:252: TL0=0;
0245 758A00    1078            mov     _TL0,#0x00
0248           1079   ;        EFM8_ADC.c:253: TH0=0;
0248 758C00    1080            mov     _TH0,#0x00
024B           1081   ;        EFM8_ADC.c:254: while (Get_ADC()!=0); // Wait for the signal to be zero
024B           1082   L011004?:
024B 120000    1083            lcall   _Get_ADC
024E E582      1084            mov     a,dpl
0250 8583F0    1085            mov     b,dph
0253 45F0      1086            orl     a,b
0255 7000      1087            jnz     L011004?
0257           1088   ;        EFM8_ADC.c:255: while (Get_ADC()==0); // Wait for the signal to be positive
0257           1089   L011007?:
0257 120000    1090            lcall   _Get_ADC
025A E582      1091            mov     a,dpl
025C 8583F0    1092            mov     b,dph
025F 45F0      1093            orl     a,b
0261 6000      1094            jz      L011007?
0263           1095   ;        EFM8_ADC.c:256: TR0=1; // Start the timer 0
0263 D28C      1096            setb    _TR0
0265           1097   ;        EFM8_ADC.c:257: ADC0MX=QFP32_MUX_P2_5;
0265 75BB12    1098            mov     _ADC0MX,#0x12
0268           1099   ;        EFM8_ADC.c:258: while (Get_ADC()!=0); // Wait for the signal to be zero again
0268           1100   L011010?:
0268 120000    1101            lcall   _Get_ADC
026B E582      1102            mov     a,dpl
026D 8583F0    1103            mov     b,dph
0270 45F0      1104            orl     a,b
0272 7000      1105            jnz     L011010?
0274           1106   ;        EFM8_ADC.c:259: TR0=0; // Stop timer 0
0274 C28C      1107            clr     _TR0
0276           1108   ;        EFM8_ADC.c:261: half_period=TH0*256.0+TL0; // The 16-bit number [TH0-TL0]
0276 858C82    1109            mov     dpl,_TH0
0279 120000    1110            lcall   ___uchar2fs
027C AA82      1111            mov     r2,dpl
027E AB83      1112            mov     r3,dph
0280 ACF0      1113            mov     r4,b
0282 FD        1114            mov     r5,a
0283 C002      1115            push    ar2
0285 C003      1116            push    ar3
0287 C004      1117            push    ar4
0289 C005      1118            push    ar5
028B 900000    1119            mov     dptr,#0x0000
028E 75F080    1120            mov     b,#0x80
0291 7443      1121            mov     a,#0x43
0293 120000    1122            lcall   ___fsmul
0296 AA82      1123            mov     r2,dpl
0298 AB83      1124            mov     r3,dph
029A ACF0      1125            mov     r4,b
029C FD        1126            mov     r5,a
029D E581      1127            mov     a,sp
029F 24FC      1128            add     a,#0xfc
02A1 F581      1129            mov     sp,a
02A3 AE8A      1130            mov     r6,_TL0
02A5 7F00      1131            mov     r7,#0x00
02A7 8E82      1132            mov     dpl,r6
02A9 8F83      1133            mov     dph,r7
02AB C002      1134            push    ar2
02AD C003      1135            push    ar3
02AF C004      1136            push    ar4
02B1 C005      1137            push    ar5
02B3 120000    1138            lcall   ___sint2fs
02B6 AE82      1139            mov     r6,dpl
02B8 AF83      1140            mov     r7,dph
02BA A8F0      1141            mov     r0,b
02BC F9        1142            mov     r1,a
02BD D005      1143            pop     ar5
02BF D004      1144            pop     ar4
02C1 D003      1145            pop     ar3
02C3 D002      1146            pop     ar2
02C5 C006      1147            push    ar6
02C7 C007      1148            push    ar7
02C9 C000      1149            push    ar0
02CB C001      1150            push    ar1
02CD 8A82      1151            mov     dpl,r2
02CF 8B83      1152            mov     dph,r3
02D1 8CF0      1153            mov     b,r4
02D3 ED        1154            mov     a,r5
02D4 120000    1155            lcall   ___fsadd
02D7 AA82      1156            mov     r2,dpl
02D9 AB83      1157            mov     r3,dph
02DB ACF0      1158            mov     r4,b
02DD FD        1159            mov     r5,a
02DE E581      1160            mov     a,sp
02E0 24FC      1161            add     a,#0xfc
02E2 F581      1162            mov     sp,a
02E4           1163   ;        EFM8_ADC.c:264: return half_period;
02E4 8A82      1164            mov     dpl,r2
02E6 8B83      1165            mov     dph,r3
02E8 8CF0      1166            mov     b,r4
02EA ED        1167            mov     a,r5
02EB 22        1168            ret
02EC           1169   ;------------------------------------------------------------
02EC           1170   ;Allocation info for local variables in function 'LCD_pulse'
02EC           1171   ;------------------------------------------------------------
02EC           1172   ;------------------------------------------------------------
02EC           1173   ;        EFM8_ADC.c:271: void LCD_pulse (void)
02EC           1174   ;        -----------------------------------------
02EC           1175   ;         function LCD_pulse
02EC           1176   ;        -----------------------------------------
02EC           1177   _LCD_pulse:
02EC           1178   ;        EFM8_ADC.c:273: LCD_E=1;
02EC D2A0      1179            setb    _P2_0
02EE           1180   ;        EFM8_ADC.c:274: Timer3us(40);
02EE 758228    1181            mov     dpl,#0x28
02F1 120000    1182            lcall   _Timer3us
02F4           1183   ;        EFM8_ADC.c:275: LCD_E=0;
02F4 C2A0      1184            clr     _P2_0
02F6 22        1185            ret
02F7           1186   ;------------------------------------------------------------
02F7           1187   ;Allocation info for local variables in function 'LCD_byte'
02F7           1188   ;------------------------------------------------------------
02F7           1189   ;x                         Allocated to registers r2 
02F7           1190   ;------------------------------------------------------------
02F7           1191   ;        EFM8_ADC.c:278: void LCD_byte (unsigned char x)
02F7           1192   ;        -----------------------------------------
02F7           1193   ;         function LCD_byte
02F7           1194   ;        -----------------------------------------
02F7           1195   _LCD_byte:
02F7 AA82      1196            mov     r2,dpl
02F9           1197   ;        EFM8_ADC.c:281: ACC=x; //Send high nible
02F9 8AE0      1198            mov     _ACC,r2
02FB           1199   ;        EFM8_ADC.c:282: LCD_D7=ACC_7;
02FB A2E7      1200            mov     c,_ACC_7
02FD 9290      1201            mov     _P1_0,c
02FF           1202   ;        EFM8_ADC.c:283: LCD_D6=ACC_6;
02FF A2E6      1203            mov     c,_ACC_6
0301 9291      1204            mov     _P1_1,c
0303           1205   ;        EFM8_ADC.c:284: LCD_D5=ACC_5;
0303 A2E5      1206            mov     c,_ACC_5
0305 9292      1207            mov     _P1_2,c
0307           1208   ;        EFM8_ADC.c:285: LCD_D4=ACC_4;
0307 A2E4      1209            mov     c,_ACC_4
0309 9293      1210            mov     _P1_3,c
030B           1211   ;        EFM8_ADC.c:286: LCD_pulse();
030B C002      1212            push    ar2
030D 120000    1213            lcall   _LCD_pulse
0310           1214   ;        EFM8_ADC.c:287: Timer3us(40);
0310 758228    1215            mov     dpl,#0x28
0313 120000    1216            lcall   _Timer3us
0316 D002      1217            pop     ar2
0318           1218   ;        EFM8_ADC.c:288: ACC=x; //Send low nible
0318 8AE0      1219            mov     _ACC,r2
031A           1220   ;        EFM8_ADC.c:289: LCD_D7=ACC_3;
031A A2E3      1221            mov     c,_ACC_3
031C 9290      1222            mov     _P1_0,c
031E           1223   ;        EFM8_ADC.c:290: LCD_D6=ACC_2;
031E A2E2      1224            mov     c,_ACC_2
0320 9291      1225            mov     _P1_1,c
0322           1226   ;        EFM8_ADC.c:291: LCD_D5=ACC_1;
0322 A2E1      1227            mov     c,_ACC_1
0324 9292      1228            mov     _P1_2,c
0326           1229   ;        EFM8_ADC.c:292: LCD_D4=ACC_0;
0326 A2E0      1230            mov     c,_ACC_0
0328 9293      1231            mov     _P1_3,c
032A           1232   ;        EFM8_ADC.c:293: LCD_pulse();
032A 020000    1233            ljmp    _LCD_pulse
032D           1234   ;------------------------------------------------------------
032D           1235   ;Allocation info for local variables in function 'WriteData'
032D           1236   ;------------------------------------------------------------
032D           1237   ;x                         Allocated to registers r2 
032D           1238   ;------------------------------------------------------------
032D           1239   ;        EFM8_ADC.c:296: void WriteData (unsigned char x)
032D           1240   ;        -----------------------------------------
032D           1241   ;         function WriteData
032D           1242   ;        -----------------------------------------
032D           1243   _WriteData:
032D AA82      1244            mov     r2,dpl
032F           1245   ;        EFM8_ADC.c:298: LCD_RS=1;
032F D297      1246            setb    _P1_7
0331           1247   ;        EFM8_ADC.c:299: LCD_byte(x);
0331 8A82      1248            mov     dpl,r2
0333 120000    1249            lcall   _LCD_byte
0336           1250   ;        EFM8_ADC.c:300: waitms(2);
0336 900002    1251            mov     dptr,#0x0002
0339 020000    1252            ljmp    _waitms
033C           1253   ;------------------------------------------------------------
033C           1254   ;Allocation info for local variables in function 'WriteCommand'
033C           1255   ;------------------------------------------------------------
033C           1256   ;x                         Allocated to registers r2 
033C           1257   ;------------------------------------------------------------
033C           1258   ;        EFM8_ADC.c:303: void WriteCommand (unsigned char x)
033C           1259   ;        -----------------------------------------
033C           1260   ;         function WriteCommand
033C           1261   ;        -----------------------------------------
033C           1262   _WriteCommand:
033C AA82      1263            mov     r2,dpl
033E           1264   ;        EFM8_ADC.c:305: LCD_RS=0;
033E C297      1265            clr     _P1_7
0340           1266   ;        EFM8_ADC.c:306: LCD_byte(x);
0340 8A82      1267            mov     dpl,r2
0342 120000    1268            lcall   _LCD_byte
0345           1269   ;        EFM8_ADC.c:307: waitms(5);
0345 900005    1270            mov     dptr,#0x0005
0348 020000    1271            ljmp    _waitms
034B           1272   ;------------------------------------------------------------
034B           1273   ;Allocation info for local variables in function 'LCD_4BIT'
034B           1274   ;------------------------------------------------------------
034B           1275   ;------------------------------------------------------------
034B           1276   ;        EFM8_ADC.c:310: void LCD_4BIT (void)
034B           1277   ;        -----------------------------------------
034B           1278   ;         function LCD_4BIT
034B           1279   ;        -----------------------------------------
034B           1280   _LCD_4BIT:
034B           1281   ;        EFM8_ADC.c:312: LCD_E=0; // Resting state of LCD's enable is zero
034B C2A0      1282            clr     _P2_0
034D           1283   ;        EFM8_ADC.c:314: waitms(20);
034D 900014    1284            mov     dptr,#0x0014
0350 120000    1285            lcall   _waitms
0353           1286   ;        EFM8_ADC.c:316: WriteCommand(0x33);
0353 758233    1287            mov     dpl,#0x33
0356 120000    1288            lcall   _WriteCommand
0359           1289   ;        EFM8_ADC.c:317: WriteCommand(0x33);
0359 758233    1290            mov     dpl,#0x33
035C 120000    1291            lcall   _WriteCommand
035F           1292   ;        EFM8_ADC.c:318: WriteCommand(0x32); // Change to 4-bit mode
035F 758232    1293            mov     dpl,#0x32
0362 120000    1294            lcall   _WriteCommand
0365           1295   ;        EFM8_ADC.c:321: WriteCommand(0x28);
0365 758228    1296            mov     dpl,#0x28
0368 120000    1297            lcall   _WriteCommand
036B           1298   ;        EFM8_ADC.c:322: WriteCommand(0x0c);
036B 75820C    1299            mov     dpl,#0x0C
036E 120000    1300            lcall   _WriteCommand
0371           1301   ;        EFM8_ADC.c:323: WriteCommand(0x01); // Clear screen command (takes some time)
0371 758201    1302            mov     dpl,#0x01
0374 120000    1303            lcall   _WriteCommand
0377           1304   ;        EFM8_ADC.c:324: waitms(20); // Wait for clear screen command to finsih.
0377 900014    1305            mov     dptr,#0x0014
037A 020000    1306            ljmp    _waitms
037D           1307   ;------------------------------------------------------------
037D           1308   ;Allocation info for local variables in function 'LCDprint'
037D           1309   ;------------------------------------------------------------
037D           1310   ;line                      Allocated with name '_LCDprint_PARM_2'
037D           1311   ;string                    Allocated to registers r2 r3 r4 
037D           1312   ;j                         Allocated to registers r5 r6 
037D           1313   ;------------------------------------------------------------
037D           1314   ;        EFM8_ADC.c:327: void LCDprint(char * string, unsigned char line, bit clear)
037D           1315   ;        -----------------------------------------
037D           1316   ;         function LCDprint
037D           1317   ;        -----------------------------------------
037D           1318   _LCDprint:
037D AA82      1319            mov     r2,dpl
037F AB83      1320            mov     r3,dph
0381 ACF0      1321            mov     r4,b
0383           1322   ;        EFM8_ADC.c:331: WriteCommand(line==2?0xc0:0x80);
0383 7402      1323            mov     a,#0x02
0385 B570D0    1324            cjne    a,_LCDprint_PARM_2,L017013?
0388 7DC0      1325            mov     r5,#0xC0
038A 8000      1326            sjmp    L017014?
038C           1327   L017013?:
038C 7D80      1328            mov     r5,#0x80
038E           1329   L017014?:
038E 8D82      1330            mov     dpl,r5
0390 C002      1331            push    ar2
0392 C003      1332            push    ar3
0394 C004      1333            push    ar4
0396 120000    1334            lcall   _WriteCommand
0399           1335   ;        EFM8_ADC.c:332: waitms(5);
0399 900005    1336            mov     dptr,#0x0005
039C 120000    1337            lcall   _waitms
039F D004      1338            pop     ar4
03A1 D003      1339            pop     ar3
03A3 D002      1340            pop     ar2
03A5           1341   ;        EFM8_ADC.c:333: for(j=0; string[j]!=0; j++)     WriteData(string[j]);// Write the message
03A5 7D00      1342            mov     r5,#0x00
03A7 7E00      1343            mov     r6,#0x00
03A9           1344   L017003?:
03A9 ED        1345            mov     a,r5
03AA 2A        1346            add     a,r2
03AB FF        1347            mov     r7,a
03AC EE        1348            mov     a,r6
03AD 3B        1349            addc    a,r3
03AE F8        1350            mov     r0,a
03AF 8C01      1351            mov     ar1,r4
03B1 8F82      1352            mov     dpl,r7
03B3 8883      1353            mov     dph,r0
03B5 89F0      1354            mov     b,r1
03B7 120000    1355            lcall   __gptrget
03BA FF        1356            mov     r7,a
03BB 6000      1357            jz      L017006?
03BD 8F82      1358            mov     dpl,r7
03BF C002      1359            push    ar2
03C1 C003      1360            push    ar3
03C3 C004      1361            push    ar4
03C5 C005      1362            push    ar5
03C7 C006      1363            push    ar6
03C9 120000    1364            lcall   _WriteData
03CC D006      1365            pop     ar6
03CE D005      1366            pop     ar5
03D0 D004      1367            pop     ar4
03D2 D003      1368            pop     ar3
03D4 D002      1369            pop     ar2
03D6 0D        1370            inc     r5
03D7 BD0050    1371            cjne    r5,#0x00,L017003?
03DA 0E        1372            inc     r6
03DB 8000      1373            sjmp    L017003?
03DD           1374   L017006?:
03DD           1375   ;        EFM8_ADC.c:334: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
03DD 30E010    1376            jnb     _LCDprint_PARM_3,L017011?
03E0 8D02      1377            mov     ar2,r5
03E2 8E03      1378            mov     ar3,r6
03E4           1379   L017007?:
03E4 C3        1380            clr     c
03E5 EA        1381            mov     a,r2
03E6 9410      1382            subb    a,#0x10
03E8 EB        1383            mov     a,r3
03E9 6480      1384            xrl     a,#0x80
03EB 9480      1385            subb    a,#0x80
03ED 5000      1386            jnc     L017011?
03EF 758220    1387            mov     dpl,#0x20
03F2 C002      1388            push    ar2
03F4 C003      1389            push    ar3
03F6 120000    1390            lcall   _WriteData
03F9 D003      1391            pop     ar3
03FB D002      1392            pop     ar2
03FD 0A        1393            inc     r2
03FE BA0050    1394            cjne    r2,#0x00,L017007?
0401 0B        1395            inc     r3
0402 8000      1396            sjmp    L017007?
0404           1397   L017011?:
0404 22        1398            ret
0405           1399   ;------------------------------------------------------------
0405           1400   ;Allocation info for local variables in function 'getsn'
0405           1401   ;------------------------------------------------------------
0405           1402   ;len                       Allocated with name '_getsn_PARM_2'
0405           1403   ;buff                      Allocated with name '_getsn_buff_1_76'
0405           1404   ;j                         Allocated with name '_getsn_sloc0_1_0'
0405           1405   ;c                         Allocated to registers r3 
0405           1406   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
0405           1407   ;------------------------------------------------------------
0405           1408   ;        EFM8_ADC.c:337: int getsn (char * buff, int len)
0405           1409   ;        -----------------------------------------
0405           1410   ;         function getsn
0405           1411   ;        -----------------------------------------
0405           1412   _getsn:
0405 858280    1413            mov     _getsn_buff_1_76,dpl
0408 858381    1414            mov     (_getsn_buff_1_76 + 1),dph
040B 85F082    1415            mov     (_getsn_buff_1_76 + 2),b
040E           1416   ;        EFM8_ADC.c:342: for(j=0; j<(len-1); j++)
040E E4        1417            clr     a
040F F5D0      1418            mov     _getsn_sloc0_1_0,a
0411 F5D1      1419            mov     (_getsn_sloc0_1_0 + 1),a
0413 E520      1420            mov     a,_getsn_PARM_2
0415 24FF      1421            add     a,#0xff
0417 FF        1422            mov     r7,a
0418 E521      1423            mov     a,(_getsn_PARM_2 + 1)
041A 34FF      1424            addc    a,#0xff
041C F8        1425            mov     r0,a
041D 7900      1426            mov     r1,#0x00
041F 7A00      1427            mov     r2,#0x00
0421           1428   L018005?:
0421 C3        1429            clr     c
0422 E9        1430            mov     a,r1
0423 9F        1431            subb    a,r7
0424 EA        1432            mov     a,r2
0425 6480      1433            xrl     a,#0x80
0427 88F0      1434            mov     b,r0
0429 63F080    1435            xrl     b,#0x80
042C 95F0      1436            subb    a,b
042E 5000      1437            jnc     L018008?
0430           1438   ;        EFM8_ADC.c:344: c=getchar();
0430 C002      1439            push    ar2
0432 C007      1440            push    ar7
0434 C000      1441            push    ar0
0436 C001      1442            push    ar1
0438 120000    1443            lcall   _getchar
043B AB82      1444            mov     r3,dpl
043D D001      1445            pop     ar1
043F D000      1446            pop     ar0
0441 D007      1447            pop     ar7
0443 D002      1448            pop     ar2
0445           1449   ;        EFM8_ADC.c:345: if ( (c=='\n') || (c=='\r') )
0445 BB0A50    1450            cjne    r3,#0x0A,L018015?
0448 8000      1451            sjmp    L018001?
044A           1452   L018015?:
044A BB0DD0    1453            cjne    r3,#0x0D,L018002?
044D           1454   L018001?:
044D           1455   ;        EFM8_ADC.c:347: buff[j]=0;
044D E5D0      1456            mov     a,_getsn_sloc0_1_0
044F 2580      1457            add     a,_getsn_buff_1_76
0451 FC        1458            mov     r4,a
0452 E5D1      1459            mov     a,(_getsn_sloc0_1_0 + 1)
0454 3581      1460            addc    a,(_getsn_buff_1_76 + 1)
0456 FD        1461            mov     r5,a
0457 AE82      1462            mov     r6,(_getsn_buff_1_76 + 2)
0459 8C82      1463            mov     dpl,r4
045B 8D83      1464            mov     dph,r5
045D 8EF0      1465            mov     b,r6
045F E4        1466            clr     a
0460 120000    1467            lcall   __gptrput
0463           1468   ;        EFM8_ADC.c:348: return j;
0463 85D082    1469            mov     dpl,_getsn_sloc0_1_0
0466 85D183    1470            mov     dph,(_getsn_sloc0_1_0 + 1)
0469 22        1471            ret
046A           1472   L018002?:
046A           1473   ;        EFM8_ADC.c:352: buff[j]=c;
046A E9        1474            mov     a,r1
046B 2580      1475            add     a,_getsn_buff_1_76
046D FC        1476            mov     r4,a
046E EA        1477            mov     a,r2
046F 3581      1478            addc    a,(_getsn_buff_1_76 + 1)
0471 FD        1479            mov     r5,a
0472 AE82      1480            mov     r6,(_getsn_buff_1_76 + 2)
0474 8C82      1481            mov     dpl,r4
0476 8D83      1482            mov     dph,r5
0478 8EF0      1483            mov     b,r6
047A EB        1484            mov     a,r3
047B 120000    1485            lcall   __gptrput
047E           1486   ;        EFM8_ADC.c:342: for(j=0; j<(len-1); j++)
047E 09        1487            inc     r1
047F B90050    1488            cjne    r1,#0x00,L018018?
0482 0A        1489            inc     r2
0483           1490   L018018?:
0483 89D0      1491            mov     _getsn_sloc0_1_0,r1
0485 8AD1      1492            mov     (_getsn_sloc0_1_0 + 1),r2
0487 8000      1493            sjmp    L018005?
0489           1494   L018008?:
0489           1495   ;        EFM8_ADC.c:355: buff[j]=0;
0489 E5D0      1496            mov     a,_getsn_sloc0_1_0
048B 2580      1497            add     a,_getsn_buff_1_76
048D FA        1498            mov     r2,a
048E E5D1      1499            mov     a,(_getsn_sloc0_1_0 + 1)
0490 3581      1500            addc    a,(_getsn_buff_1_76 + 1)
0492 FB        1501            mov     r3,a
0493 AC82      1502            mov     r4,(_getsn_buff_1_76 + 2)
0495 8A82      1503            mov     dpl,r2
0497 8B83      1504            mov     dph,r3
0499 8CF0      1505            mov     b,r4
049B E4        1506            clr     a
049C 120000    1507            lcall   __gptrput
049F           1508   ;        EFM8_ADC.c:356: return len;
049F 852082    1509            mov     dpl,_getsn_PARM_2
04A2 852183    1510            mov     dph,(_getsn_PARM_2 + 1)
04A5 22        1511            ret
04A6           1512   ;------------------------------------------------------------
04A6           1513   ;Allocation info for local variables in function 'main'
04A6           1514   ;------------------------------------------------------------
04A6           1515   ;i                         Allocated with name '_main_i_1_82'
04A6           1516   ;hello                     Allocated with name '_main_hello_1_82'
04A6           1517   ;hello2                    Allocated to registers r0 r1 r4 r5 
04A6           1518   ;peak_voltage_reference    Allocated with name '_main_peak_voltage_reference_1_82'
04A6           1519   ;peak_voltage_other        Allocated with name '_main_peak_voltage_other_1_82'
04A6           1520   ;y                         Allocated to registers r2 r3 r4 r5 
04A6           1521   ;first_line                Allocated with name '_main_first_line_1_82'
04A6           1522   ;second_line               Allocated with name '_main_second_line_1_82'
04A6           1523   ;sloc0                     Allocated with name '_main_sloc0_1_0'
04A6           1524   ;sloc1                     Allocated with name '_main_sloc1_1_0'
04A6           1525   ;p                         Allocated with name '_main_p_1_82'
04A6           1526   ;vt                        Allocated with name '_main_vt_1_82'
04A6           1527   ;per                       Allocated with name '_main_per_1_82'
04A6           1528   ;------------------------------------------------------------
04A6           1529   ;        EFM8_ADC.c:359: void main (void)
04A6           1530   ;        -----------------------------------------
04A6           1531   ;         function main
04A6           1532   ;        -----------------------------------------
04A6           1533   _main:
04A6           1534   ;        EFM8_ADC.c:375: LCD_4BIT();
04A6 120000    1535            lcall   _LCD_4BIT
04A9           1536   ;        EFM8_ADC.c:377: waitms(500); // Give PuTTy a chance to start before sending
04A9 9001F4    1537            mov     dptr,#0x01F4
04AC 120000    1538            lcall   _waitms
04AF           1539   ;        EFM8_ADC.c:378: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
04AF 7490      1540            mov     a,#__str_0
04B1 C0E0      1541            push    acc
04B3 74C8      1542            mov     a,#(__str_0 >> 8)
04B5 C0E0      1543            push    acc
04B7 7480      1544            mov     a,#0x80
04B9 C0E0      1545            push    acc
04BB 120000    1546            lcall   _printf
04BE 1581      1547            dec     sp
04C0 1581      1548            dec     sp
04C2 1581      1549            dec     sp
04C4           1550   ;        EFM8_ADC.c:383: __FILE__, __DATE__, __TIME__);
04C4           1551   ;        EFM8_ADC.c:382: "Compiled: %s, %s\n\n",
04C4 7410      1552            mov     a,#__str_4
04C6 C0E0      1553            push    acc
04C8 74C9      1554            mov     a,#(__str_4 >> 8)
04CA C0E0      1555            push    acc
04CC 7480      1556            mov     a,#0x80
04CE C0E0      1557            push    acc
04D0 7450      1558            mov     a,#__str_3
04D2 C0E0      1559            push    acc
04D4 74C9      1560            mov     a,#(__str_3 >> 8)
04D6 C0E0      1561            push    acc
04D8 7480      1562            mov     a,#0x80
04DA C0E0      1563            push    acc
04DC 7490      1564            mov     a,#__str_2
04DE C0E0      1565            push    acc
04E0 74C9      1566            mov     a,#(__str_2 >> 8)
04E2 C0E0      1567            push    acc
04E4 7480      1568            mov     a,#0x80
04E6 C0E0      1569            push    acc
04E8 74D0      1570            mov     a,#__str_1
04EA C0E0      1571            push    acc
04EC 74C9      1572            mov     a,#(__str_1 >> 8)
04EE C0E0      1573            push    acc
04F0 7480      1574            mov     a,#0x80
04F2 C0E0      1575            push    acc
04F4 120000    1576            lcall   _printf
04F7 E581      1577            mov     a,sp
04F9 24F4      1578            add     a,#0xf4
04FB F581      1579            mov     sp,a
04FD           1580   ;        EFM8_ADC.c:385: InitPinADC(2, 4); // Configure P2.4 as analog input
04FD 750004    1581            mov     _InitPinADC_PARM_2,#0x04
0500 758202    1582            mov     dpl,#0x02
0503 120000    1583            lcall   _InitPinADC
0506           1584   ;        EFM8_ADC.c:386: InitPinADC(2, 5); // Configure P2.5 as analog input
0506 750005    1585            mov     _InitPinADC_PARM_2,#0x05
0509 758202    1586            mov     dpl,#0x02
050C 120000    1587            lcall   _InitPinADC
050F           1588   ;        EFM8_ADC.c:387: InitADC();
050F 120000    1589            lcall   _InitADC
0512           1590   ;        EFM8_ADC.c:389: while(1)
0512           1591   L019011?:
0512           1592   ;        EFM8_ADC.c:390: for(i = 0; i < 100; i++)
0512 E4        1593            clr     a
0513 F510      1594            mov     _main_i_1_82,a
0515 F511      1595            mov     (_main_i_1_82 + 1),a
0517           1596   L019013?:
0517 C3        1597            clr     c
0518 E510      1598            mov     a,_main_i_1_82
051A 9464      1599            subb    a,#0x64
051C E511      1600            mov     a,(_main_i_1_82 + 1)
051E 6480      1601            xrl     a,#0x80
0520 9480      1602            subb    a,#0x80
0522 5000      1603            jnc     L019011?
0524           1604   ;        EFM8_ADC.c:397: hello = get_period();
0524 120000    1605            lcall   _get_period
0527 858260    1606            mov     _main_hello_1_82,dpl
052A 858361    1607            mov     (_main_hello_1_82 + 1),dph
052D 85F062    1608            mov     (_main_hello_1_82 + 2),b
0530 F563      1609            mov     (_main_hello_1_82 + 3),a
0532           1610   ;        EFM8_ADC.c:398: hello = hello*2*12*1000/SYSCLK;
0532 C060      1611            push    _main_hello_1_82
0534 C061      1612            push    (_main_hello_1_82 + 1)
0536 C062      1613            push    (_main_hello_1_82 + 2)
0538 C063      1614            push    (_main_hello_1_82 + 3)
053A 908000    1615            mov     dptr,#0x8000
053D 75F0BB    1616            mov     b,#0xBB
0540 7446      1617            mov     a,#0x46
0542 120000    1618            lcall   ___fsmul
0545 A882      1619            mov     r0,dpl
0547 A983      1620            mov     r1,dph
0549 AAF0      1621            mov     r2,b
054B FB        1622            mov     r3,a
054C E581      1623            mov     a,sp
054E 24FC      1624            add     a,#0xfc
0550 F581      1625            mov     sp,a
0552 7440      1626            mov     a,#0x40
0554 C0E0      1627            push    acc
0556 7454      1628            mov     a,#0x54
0558 C0E0      1629            push    acc
055A 7489      1630            mov     a,#0x89
055C C0E0      1631            push    acc
055E 744C      1632            mov     a,#0x4C
0560 C0E0      1633            push    acc
0562 8882      1634            mov     dpl,r0
0564 8983      1635            mov     dph,r1
0566 8AF0      1636            mov     b,r2
0568 EB        1637            mov     a,r3
0569 120000    1638            lcall   ___fsdiv
056C 858260    1639            mov     _main_hello_1_82,dpl
056F 858361    1640            mov     (_main_hello_1_82 + 1),dph
0572 85F062    1641            mov     (_main_hello_1_82 + 2),b
0575 F563      1642            mov     (_main_hello_1_82 + 3),a
0577 E581      1643            mov     a,sp
0579 24FC      1644            add     a,#0xfc
057B F581      1645            mov     sp,a
057D           1646   ;        EFM8_ADC.c:399: per[i%3] = hello;
057D 750003    1647            mov     __modsint_PARM_2,#0x03
0580 E4        1648            clr     a
0581 F501      1649            mov     (__modsint_PARM_2 + 1),a
0583 851082    1650            mov     dpl,_main_i_1_82
0586 851183    1651            mov     dph,(_main_i_1_82 + 1)
0589 120000    1652            lcall   __modsint
058C AA82      1653            mov     r2,dpl
058E AB83      1654            mov     r3,dph
0590 8A00      1655            mov     ar0,r2
0592 EB        1656            mov     a,r3
0593 C8        1657            xch     a,r0
0594 25E0      1658            add     a,acc
0596 C8        1659            xch     a,r0
0597 33        1660            rlc     a
0598 C8        1661            xch     a,r0
0599 25E0      1662            add     a,acc
059B C8        1663            xch     a,r0
059C 33        1664            rlc     a
059D F9        1665            mov     r1,a
059E E8        1666            mov     a,r0
059F 2490      1667            add     a,#_main_per_1_82
05A1 F582      1668            mov     dpl,a
05A3 E9        1669            mov     a,r1
05A4 34BA      1670            addc    a,#(_main_per_1_82 >> 8)
05A6 F583      1671            mov     dph,a
05A8 E560      1672            mov     a,_main_hello_1_82
05AA F0        1673            movx    @dptr,a
05AB A3        1674            inc     dptr
05AC E561      1675            mov     a,(_main_hello_1_82 + 1)
05AE F0        1676            movx    @dptr,a
05AF A3        1677            inc     dptr
05B0 E562      1678            mov     a,(_main_hello_1_82 + 2)
05B2 F0        1679            movx    @dptr,a
05B3 A3        1680            inc     dptr
05B4 E563      1681            mov     a,(_main_hello_1_82 + 3)
05B6 F0        1682            movx    @dptr,a
05B7           1683   ;        EFM8_ADC.c:400: printf("Period: %f\r", hello);
05B7 C002      1684            push    ar2
05B9 C003      1685            push    ar3
05BB C060      1686            push    _main_hello_1_82
05BD C061      1687            push    (_main_hello_1_82 + 1)
05BF C062      1688            push    (_main_hello_1_82 + 2)
05C1 C063      1689            push    (_main_hello_1_82 + 3)
05C3 7420      1690            mov     a,#__str_5
05C5 C0E0      1691            push    acc
05C7 74CB      1692            mov     a,#(__str_5 >> 8)
05C9 C0E0      1693            push    acc
05CB 7480      1694            mov     a,#0x80
05CD C0E0      1695            push    acc
05CF 120000    1696            lcall   _printf
05D2 E581      1697            mov     a,sp
05D4 24F9      1698            add     a,#0xf9
05D6 F581      1699            mov     sp,a
05D8 D003      1700            pop     ar3
05DA D002      1701            pop     ar2
05DC           1702   ;        EFM8_ADC.c:402: ADC0MX=QFP32_MUX_P2_5;
05DC 75BB12    1703            mov     _ADC0MX,#0x12
05DF           1704   ;        EFM8_ADC.c:405: while (Get_ADC()!=0); // Wait for the signal to be zero
05DF           1705   L019001?:
05DF C002      1706            push    ar2
05E1 C003      1707            push    ar3
05E3 120000    1708            lcall   _Get_ADC
05E6 E582      1709            mov     a,dpl
05E8 8583F0    1710            mov     b,dph
05EB D003      1711            pop     ar3
05ED D002      1712            pop     ar2
05EF 45F0      1713            orl     a,b
05F1 7000      1714            jnz     L019001?
05F3           1715   ;        EFM8_ADC.c:406: while (Get_ADC()==0); // Wait for the signal to be positive
05F3           1716   L019004?:
05F3 C002      1717            push    ar2
05F5 C003      1718            push    ar3
05F7 120000    1719            lcall   _Get_ADC
05FA E582      1720            mov     a,dpl
05FC 8583F0    1721            mov     b,dph
05FF D003      1722            pop     ar3
0601 D002      1723            pop     ar2
0603 45F0      1724            orl     a,b
0605 6000      1725            jz      L019004?
0607           1726   ;        EFM8_ADC.c:422: waitms(hello/4.0);
0607 C002      1727            push    ar2
0609 C003      1728            push    ar3
060B E4        1729            clr     a
060C C0E0      1730            push    acc
060E C0E0      1731            push    acc
0610 7480      1732            mov     a,#0x80
0612 C0E0      1733            push    acc
0614 7440      1734            mov     a,#0x40
0616 C0E0      1735            push    acc
0618 856082    1736            mov     dpl,_main_hello_1_82
061B 856183    1737            mov     dph,(_main_hello_1_82 + 1)
061E 8562F0    1738            mov     b,(_main_hello_1_82 + 2)
0621 E563      1739            mov     a,(_main_hello_1_82 + 3)
0623 120000    1740            lcall   ___fsdiv
0626 A882      1741            mov     r0,dpl
0628 A983      1742            mov     r1,dph
062A ACF0      1743            mov     r4,b
062C FD        1744            mov     r5,a
062D E581      1745            mov     a,sp
062F 24FC      1746            add     a,#0xfc
0631 F581      1747            mov     sp,a
0633 8882      1748            mov     dpl,r0
0635 8983      1749            mov     dph,r1
0637 8CF0      1750            mov     b,r4
0639 ED        1751            mov     a,r5
063A 120000    1752            lcall   ___fs2uint
063D 120000    1753            lcall   _waitms
0640           1754   ;        EFM8_ADC.c:423: P2_1=1;
0640 D2A1      1755            setb    _P2_1
0642           1756   ;        EFM8_ADC.c:424: peak_voltage_other=Volts_at_Pin(QFP32_MUX_P2_5);
0642 758212    1757            mov     dpl,#0x12
0645 120000    1758            lcall   _Volts_at_Pin
0648 8582B0    1759            mov     _main_peak_voltage_other_1_82,dpl
064B 8583B1    1760            mov     (_main_peak_voltage_other_1_82 + 1),dph
064E 85F0B2    1761            mov     (_main_peak_voltage_other_1_82 + 2),b
0651 F5B3      1762            mov     (_main_peak_voltage_other_1_82 + 3),a
0653           1763   ;        EFM8_ADC.c:425: P2_1=0;
0653 C2A1      1764            clr     _P2_1
0655           1765   ;        EFM8_ADC.c:426: printf("Peak Voltage Other: %f\r", peak_voltage_other);
0655 C0B0      1766            push    _main_peak_voltage_other_1_82
0657 C0B1      1767            push    (_main_peak_voltage_other_1_82 + 1)
0659 C0B2      1768            push    (_main_peak_voltage_other_1_82 + 2)
065B C0B3      1769            push    (_main_peak_voltage_other_1_82 + 3)
065D 7420      1770            mov     a,#__str_6
065F C0E0      1771            push    acc
0661 74CC      1772            mov     a,#(__str_6 >> 8)
0663 C0E0      1773            push    acc
0665 7480      1774            mov     a,#0x80
0667 C0E0      1775            push    acc
0669 120000    1776            lcall   _printf
066C E581      1777            mov     a,sp
066E 24F9      1778            add     a,#0xf9
0670 F581      1779            mov     sp,a
0672 D003      1780            pop     ar3
0674 D002      1781            pop     ar2
0676           1782   ;        EFM8_ADC.c:427: vt[i%3] = peak_voltage_other;
0676 8A90      1783            mov     _main_sloc0_1_0,r2
0678 EB        1784            mov     a,r3
0679 C590      1785            xch     a,_main_sloc0_1_0
067B 25E0      1786            add     a,acc
067D C590      1787            xch     a,_main_sloc0_1_0
067F 33        1788            rlc     a
0680 C590      1789            xch     a,_main_sloc0_1_0
0682 25E0      1790            add     a,acc
0684 C590      1791            xch     a,_main_sloc0_1_0
0686 33        1792            rlc     a
0687 F591      1793            mov     (_main_sloc0_1_0 + 1),a
0689 E590      1794            mov     a,_main_sloc0_1_0
068B 2450      1795            add     a,#_main_vt_1_82
068D F582      1796            mov     dpl,a
068F E591      1797            mov     a,(_main_sloc0_1_0 + 1)
0691 34BA      1798            addc    a,#(_main_vt_1_82 >> 8)
0693 F583      1799            mov     dph,a
0695 E5B0      1800            mov     a,_main_peak_voltage_other_1_82
0697 F0        1801            movx    @dptr,a
0698 A3        1802            inc     dptr
0699 E5B1      1803            mov     a,(_main_peak_voltage_other_1_82 + 1)
069B F0        1804            movx    @dptr,a
069C A3        1805            inc     dptr
069D E5B2      1806            mov     a,(_main_peak_voltage_other_1_82 + 2)
069F F0        1807            movx    @dptr,a
06A0 A3        1808            inc     dptr
06A1 E5B3      1809            mov     a,(_main_peak_voltage_other_1_82 + 3)
06A3 F0        1810            movx    @dptr,a
06A4           1811   ;        EFM8_ADC.c:429: hello2 = get_period_2();
06A4 120000    1812            lcall   _get_period_2
06A7 A882      1813            mov     r0,dpl
06A9 A983      1814            mov     r1,dph
06AB ACF0      1815            mov     r4,b
06AD FD        1816            mov     r5,a
06AE           1817   ;        EFM8_ADC.c:430: ADC0MX=QFP32_MUX_P2_5;
06AE 75BB12    1818            mov     _ADC0MX,#0x12
06B1           1819   ;        EFM8_ADC.c:431: hello2=(hello2*12*1000)/SYSCLK;
06B1 C000      1820            push    ar0
06B3 C001      1821            push    ar1
06B5 C004      1822            push    ar4
06B7 C005      1823            push    ar5
06B9 908000    1824            mov     dptr,#0x8000
06BC 75F03B    1825            mov     b,#0x3B
06BF 7446      1826            mov     a,#0x46
06C1 120000    1827            lcall   ___fsmul
06C4 AE82      1828            mov     r6,dpl
06C6 AF83      1829            mov     r7,dph
06C8 AAF0      1830            mov     r2,b
06CA FB        1831            mov     r3,a
06CB E581      1832            mov     a,sp
06CD 24FC      1833            add     a,#0xfc
06CF F581      1834            mov     sp,a
06D1 7440      1835            mov     a,#0x40
06D3 C0E0      1836            push    acc
06D5 7454      1837            mov     a,#0x54
06D7 C0E0      1838            push    acc
06D9 7489      1839            mov     a,#0x89
06DB C0E0      1840            push    acc
06DD 744C      1841            mov     a,#0x4C
06DF C0E0      1842            push    acc
06E1 8E82      1843            mov     dpl,r6
06E3 8F83      1844            mov     dph,r7
06E5 8AF0      1845            mov     b,r2
06E7 EB        1846            mov     a,r3
06E8 120000    1847            lcall   ___fsdiv
06EB A882      1848            mov     r0,dpl
06ED A983      1849            mov     r1,dph
06EF ACF0      1850            mov     r4,b
06F1 FD        1851            mov     r5,a
06F2 E581      1852            mov     a,sp
06F4 24FC      1853            add     a,#0xfc
06F6 F581      1854            mov     sp,a
06F8           1855   ;        EFM8_ADC.c:432: printf("Phase difference in ms: %f\r", hello2);
06F8 C004      1856            push    ar4
06FA C005      1857            push    ar5
06FC C000      1858            push    ar0
06FE C001      1859            push    ar1
0700 C000      1860            push    ar0
0702 C001      1861            push    ar1
0704 C004      1862            push    ar4
0706 C005      1863            push    ar5
0708 7460      1864            mov     a,#__str_7
070A C0E0      1865            push    acc
070C 74CC      1866            mov     a,#(__str_7 >> 8)
070E C0E0      1867            push    acc
0710 7480      1868            mov     a,#0x80
0712 C0E0      1869            push    acc
0714 120000    1870            lcall   _printf
0717 E581      1871            mov     a,sp
0719 24F9      1872            add     a,#0xf9
071B F581      1873            mov     sp,a
071D D001      1874            pop     ar1
071F D000      1875            pop     ar0
0721 D005      1876            pop     ar5
0723 D004      1877            pop     ar4
0725           1878   ;        EFM8_ADC.c:433: hello2=hello2*20.0/hello;
0725 C000      1879            push    ar0
0727 C001      1880            push    ar1
0729 C004      1881            push    ar4
072B C005      1882            push    ar5
072D 900000    1883            mov     dptr,#0x0000
0730 75F0A0    1884            mov     b,#0xA0
0733 7441      1885            mov     a,#0x41
0735 120000    1886            lcall   ___fsmul
0738 AA82      1887            mov     r2,dpl
073A AB83      1888            mov     r3,dph
073C AEF0      1889            mov     r6,b
073E FF        1890            mov     r7,a
073F E581      1891            mov     a,sp
0741 24FC      1892            add     a,#0xfc
0743 F581      1893            mov     sp,a
0745 C060      1894            push    _main_hello_1_82
0747 C061      1895            push    (_main_hello_1_82 + 1)
0749 C062      1896            push    (_main_hello_1_82 + 2)
074B C063      1897            push    (_main_hello_1_82 + 3)
074D 8A82      1898            mov     dpl,r2
074F 8B83      1899            mov     dph,r3
0751 8EF0      1900            mov     b,r6
0753 EF        1901            mov     a,r7
0754 120000    1902            lcall   ___fsdiv
0757 A882      1903            mov     r0,dpl
0759 A983      1904            mov     r1,dph
075B ACF0      1905            mov     r4,b
075D FD        1906            mov     r5,a
075E E581      1907            mov     a,sp
0760 24FC      1908            add     a,#0xfc
0762 F581      1909            mov     sp,a
0764           1910   ;        EFM8_ADC.c:434: y=179.0+hello2*1/(-0.056);
0764 7442      1911            mov     a,#0x42
0766 C0E0      1912            push    acc
0768 7460      1913            mov     a,#0x60
076A C0E0      1914            push    acc
076C 7465      1915            mov     a,#0x65
076E C0E0      1916            push    acc
0770 74BD      1917            mov     a,#0xBD
0772 C0E0      1918            push    acc
0774 8882      1919            mov     dpl,r0
0776 8983      1920            mov     dph,r1
0778 8CF0      1921            mov     b,r4
077A ED        1922            mov     a,r5
077B 120000    1923            lcall   ___fsdiv
077E AA82      1924            mov     r2,dpl
0780 AB83      1925            mov     r3,dph
0782 ACF0      1926            mov     r4,b
0784 FD        1927            mov     r5,a
0785 E581      1928            mov     a,sp
0787 24FC      1929            add     a,#0xfc
0789 F581      1930            mov     sp,a
078B E4        1931            clr     a
078C C0E0      1932            push    acc
078E C0E0      1933            push    acc
0790 7433      1934            mov     a,#0x33
0792 C0E0      1935            push    acc
0794 7443      1936            mov     a,#0x43
0796 C0E0      1937            push    acc
0798 8A82      1938            mov     dpl,r2
079A 8B83      1939            mov     dph,r3
079C 8CF0      1940            mov     b,r4
079E ED        1941            mov     a,r5
079F 120000    1942            lcall   ___fsadd
07A2 AA82      1943            mov     r2,dpl
07A4 AB83      1944            mov     r3,dph
07A6 ACF0      1945            mov     r4,b
07A8 FD        1946            mov     r5,a
07A9 E581      1947            mov     a,sp
07AB 24FC      1948            add     a,#0xfc
07AD F581      1949            mov     sp,a
07AF           1950   ;        EFM8_ADC.c:435: printf("Phase degrees: %f\r", y);
07AF C002      1951            push    ar2
07B1 C003      1952            push    ar3
07B3 C004      1953            push    ar4
07B5 C005      1954            push    ar5
07B7 C002      1955            push    ar2
07B9 C003      1956            push    ar3
07BB C004      1957            push    ar4
07BD C005      1958            push    ar5
07BF 74A0      1959            mov     a,#__str_8
07C1 C0E0      1960            push    acc
07C3 74CC      1961            mov     a,#(__str_8 >> 8)
07C5 C0E0      1962            push    acc
07C7 7480      1963            mov     a,#0x80
07C9 C0E0      1964            push    acc
07CB 120000    1965            lcall   _printf
07CE E581      1966            mov     a,sp
07D0 24F9      1967            add     a,#0xf9
07D2 F581      1968            mov     sp,a
07D4 D005      1969            pop     ar5
07D6 D004      1970            pop     ar4
07D8 D003      1971            pop     ar3
07DA D002      1972            pop     ar2
07DC           1973   ;        EFM8_ADC.c:436: p[i%3] = y;
07DC E590      1974            mov     a,_main_sloc0_1_0
07DE 2410      1975            add     a,#_main_p_1_82
07E0 F582      1976            mov     dpl,a
07E2 E591      1977            mov     a,(_main_sloc0_1_0 + 1)
07E4 34BA      1978            addc    a,#(_main_p_1_82 >> 8)
07E6 F583      1979            mov     dph,a
07E8 EA        1980            mov     a,r2
07E9 F0        1981            movx    @dptr,a
07EA A3        1982            inc     dptr
07EB EB        1983            mov     a,r3
07EC F0        1984            movx    @dptr,a
07ED A3        1985            inc     dptr
07EE EC        1986            mov     a,r4
07EF F0        1987            movx    @dptr,a
07F0 A3        1988            inc     dptr
07F1 ED        1989            mov     a,r5
07F2 F0        1990            movx    @dptr,a
07F3           1991   ;        EFM8_ADC.c:438: while(per[i%3] == 0) i--;
07F3 AA10      1992            mov     r2,_main_i_1_82
07F5 AB11      1993            mov     r3,(_main_i_1_82 + 1)
07F7           1994   L019007?:
07F7 750003    1995            mov     __modsint_PARM_2,#0x03
07FA E4        1996            clr     a
07FB F501      1997            mov     (__modsint_PARM_2 + 1),a
07FD 8A82      1998            mov     dpl,r2
07FF 8B83      1999            mov     dph,r3
0801 C002      2000            push    ar2
0803 C003      2001            push    ar3
0805 120000    2002            lcall   __modsint
0808 AC82      2003            mov     r4,dpl
080A AD83      2004            mov     r5,dph
080C D003      2005            pop     ar3
080E D002      2006            pop     ar2
0810 ED        2007            mov     a,r5
0811 CC        2008            xch     a,r4
0812 25E0      2009            add     a,acc
0814 CC        2010            xch     a,r4
0815 33        2011            rlc     a
0816 CC        2012            xch     a,r4
0817 25E0      2013            add     a,acc
0819 CC        2014            xch     a,r4
081A 33        2015            rlc     a
081B FD        2016            mov     r5,a
081C EC        2017            mov     a,r4
081D 2490      2018            add     a,#_main_per_1_82
081F F590      2019            mov     _main_sloc0_1_0,a
0821 ED        2020            mov     a,r5
0822 34BA      2021            addc    a,#(_main_per_1_82 >> 8)
0824 F591      2022            mov     (_main_sloc0_1_0 + 1),a
0826 859082    2023            mov     dpl,_main_sloc0_1_0
0829 859183    2024            mov     dph,(_main_sloc0_1_0 + 1)
082C E0        2025            movx    a,@dptr
082D F8        2026            mov     r0,a
082E A3        2027            inc     dptr
082F E0        2028            movx    a,@dptr
0830 F9        2029            mov     r1,a
0831 A3        2030            inc     dptr
0832 E0        2031            movx    a,@dptr
0833 FE        2032            mov     r6,a
0834 A3        2033            inc     dptr
0835 E0        2034            movx    a,@dptr
0836 FF        2035            mov     r7,a
0837 E8        2036            mov     a,r0
0838 49        2037            orl     a,r1
0839 4E        2038            orl     a,r6
083A 8FF0      2039            mov     b,r7
083C C2F7      2040            clr     b.7 ; Clear the sign bit
083E 45F0      2041            orl     a,b
0840 7000      2042            jnz     L019009?
0842 1A        2043            dec     r2
0843 BAFF60    2044            cjne    r2,#0xff,L019032?
0846 1B        2045            dec     r3
0847           2046   L019032?:
0847 8000      2047            sjmp    L019007?
0849           2048   L019009?:
0849           2049   ;        EFM8_ADC.c:440: sprintf(first_line, "Phase:%.2f deg", p[i%3]);
0849 EC        2050            mov     a,r4
084A 2410      2051            add     a,#_main_p_1_82
084C F582      2052            mov     dpl,a
084E ED        2053            mov     a,r5
084F 34BA      2054            addc    a,#(_main_p_1_82 >> 8)
0851 F583      2055            mov     dph,a
0853 E0        2056            movx    a,@dptr
0854 FC        2057            mov     r4,a
0855 A3        2058            inc     dptr
0856 E0        2059            movx    a,@dptr
0857 FD        2060            mov     r5,a
0858 A3        2061            inc     dptr
0859 E0        2062            movx    a,@dptr
085A FE        2063            mov     r6,a
085B A3        2064            inc     dptr
085C E0        2065            movx    a,@dptr
085D FF        2066            mov     r7,a
085E C002      2067            push    ar2
0860 C003      2068            push    ar3
0862 C004      2069            push    ar4
0864 C005      2070            push    ar5
0866 C006      2071            push    ar6
0868 C007      2072            push    ar7
086A 74A0      2073            mov     a,#__str_9
086C C0E0      2074            push    acc
086E 74CD      2075            mov     a,#(__str_9 >> 8)
0870 C0E0      2076            push    acc
0872 7480      2077            mov     a,#0x80
0874 C0E0      2078            push    acc
0876 7400      2079            mov     a,#_main_first_line_1_82
0878 C0E0      2080            push    acc
087A 74B9      2081            mov     a,#(_main_first_line_1_82 >> 8)
087C C0E0      2082            push    acc
087E 7440      2083            mov     a,#0x40
0880 C0E0      2084            push    acc
0882 120000    2085            lcall   _sprintf
0885 E581      2086            mov     a,sp
0887 24F6      2087            add     a,#0xf6
0889 F581      2088            mov     sp,a
088B           2089   ;        EFM8_ADC.c:441: sprintf(second_line, "Per:%.0f Vt:%.2f", per[i%3], peak_voltage_other/1.4142);
088B 7481      2090            mov     a,#0x81
088D C0E0      2091            push    acc
088F 7404      2092            mov     a,#0x04
0891 C0E0      2093            push    acc
0893 74B5      2094            mov     a,#0xB5
0895 C0E0      2095            push    acc
0897 743F      2096            mov     a,#0x3F
0899 C0E0      2097            push    acc
089B 85B082    2098            mov     dpl,_main_peak_voltage_other_1_82
089E 85B183    2099            mov     dph,(_main_peak_voltage_other_1_82 + 1)
08A1 85B2F0    2100            mov     b,(_main_peak_voltage_other_1_82 + 2)
08A4 E5B3      2101            mov     a,(_main_peak_voltage_other_1_82 + 3)
08A6 120000    2102            lcall   ___fsdiv
08A9 8582D0    2103            mov     _main_sloc1_1_0,dpl
08AC 8583D1    2104            mov     (_main_sloc1_1_0 + 1),dph
08AF 85F0D2    2105            mov     (_main_sloc1_1_0 + 2),b
08B2 F5D3      2106            mov     (_main_sloc1_1_0 + 3),a
08B4 E581      2107            mov     a,sp
08B6 24FC      2108            add     a,#0xfc
08B8 F581      2109            mov     sp,a
08BA 859082    2110            mov     dpl,_main_sloc0_1_0
08BD 859183    2111            mov     dph,(_main_sloc0_1_0 + 1)
08C0 E0        2112            movx    a,@dptr
08C1 F8        2113            mov     r0,a
08C2 A3        2114            inc     dptr
08C3 E0        2115            movx    a,@dptr
08C4 F9        2116            mov     r1,a
08C5 A3        2117            inc     dptr
08C6 E0        2118            movx    a,@dptr
08C7 FC        2119            mov     r4,a
08C8 A3        2120            inc     dptr
08C9 E0        2121            movx    a,@dptr
08CA FD        2122            mov     r5,a
08CB C0D0      2123            push    _main_sloc1_1_0
08CD C0D1      2124            push    (_main_sloc1_1_0 + 1)
08CF C0D2      2125            push    (_main_sloc1_1_0 + 2)
08D1 C0D3      2126            push    (_main_sloc1_1_0 + 3)
08D3 C000      2127            push    ar0
08D5 C001      2128            push    ar1
08D7 C004      2129            push    ar4
08D9 C005      2130            push    ar5
08DB 7420      2131            mov     a,#__str_10
08DD C0E0      2132            push    acc
08DF 74CE      2133            mov     a,#(__str_10 >> 8)
08E1 C0E0      2134            push    acc
08E3 7480      2135            mov     a,#0x80
08E5 C0E0      2136            push    acc
08E7 7450      2137            mov     a,#_main_second_line_1_82
08E9 C0E0      2138            push    acc
08EB 74B9      2139            mov     a,#(_main_second_line_1_82 >> 8)
08ED C0E0      2140            push    acc
08EF 7440      2141            mov     a,#0x40
08F1 C0E0      2142            push    acc
08F3 120000    2143            lcall   _sprintf
08F6 E581      2144            mov     a,sp
08F8 24F2      2145            add     a,#0xf2
08FA F581      2146            mov     sp,a
08FC           2147   ;        EFM8_ADC.c:442: LCDprint(first_line, 1, 1);
08FC 757001    2148            mov     _LCDprint_PARM_2,#0x01
08FF D2E0      2149            setb    _LCDprint_PARM_3
0901 90B900    2150            mov     dptr,#_main_first_line_1_82
0904 75F040    2151            mov     b,#0x40
0907 120000    2152            lcall   _LCDprint
090A           2153   ;        EFM8_ADC.c:443: LCDprint(second_line, 2, 1);
090A 757002    2154            mov     _LCDprint_PARM_2,#0x02
090D D2E0      2155            setb    _LCDprint_PARM_3
090F 90B950    2156            mov     dptr,#_main_second_line_1_82
0912 75F040    2157            mov     b,#0x40
0915 120000    2158            lcall   _LCDprint
0918           2159   ;        EFM8_ADC.c:445: waitms(500);
0918 9001F4    2160            mov     dptr,#0x01F4
091B 120000    2161            lcall   _waitms
091E D003      2162            pop     ar3
0920 D002      2163            pop     ar2
0922           2164   ;        EFM8_ADC.c:390: for(i = 0; i < 100; i++)
0922 7401      2165            mov     a,#0x01
0924 2A        2166            add     a,r2
0925 F510      2167            mov     _main_i_1_82,a
0927 E4        2168            clr     a
0928 3B        2169            addc    a,r3
0929 F511      2170            mov     (_main_i_1_82 + 1),a
092B 020000    2171            ljmp    L019013?
092E           2172            rseg R_CSEG
092E           2173   
0000           2174            rseg R_XINIT
0000           2175   
0000           2176            rseg R_CONST
0000           2177   __str_0:
0000 1B        2178            db 0x1B
0001 5B324A    2179            db '[2J'
0004 00        2180            db 0x00
0005           2181   __str_1:
0005 41444320  2182            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        2183            db 0x0A
0016 46696C65  2184            db 'File: %s'
     3A202573
001E 0A        2185            db 0x0A
001F 436F6D70  2186            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        2187            db 0x0A
0030 0A        2188            db 0x0A
0031 00        2189            db 0x00
0032           2190   __str_2:
0032 45464D38  2191            db 'EFM8_ADC.c'
     5F414443
     2E63
003C 00        2192            db 0x00
003D           2193   __str_3:
003D 4D617220  2194            db 'Mar  7 2024'
     20372032
     303234
0048 00        2195            db 0x00
0049           2196   __str_4:
0049 31333A32  2197            db '13:24:38'
     343A3338
0051 00        2198            db 0x00
0052           2199   __str_5:
0052 50657269  2200            db 'Period: %f'
     6F643A20
     2566
005C 0D        2201            db 0x0D
005D 00        2202            db 0x00
005E           2203   __str_6:
005E 5065616B  2204            db 'Peak Voltage Other: %f'
     20566F6C
     74616765
     204F7468
     65723A20
     2566
0074 0D        2205            db 0x0D
0075 00        2206            db 0x00
0076           2207   __str_7:
0076 50686173  2208            db 'Phase difference in ms: %f'
     65206469
     66666572
     656E6365
     20696E20
     6D733A20
     2566
0090 0D        2209            db 0x0D
0091 00        2210            db 0x00
0092           2211   __str_8:
0092 50686173  2212            db 'Phase degrees: %f'
     65206465
     67726565
     733A2025
     66
00A3 0D        2213            db 0x0D
00A4 00        2214            db 0x00
00A5           2215   __str_9:
00A5 50686173  2216            db 'Phase:%.2f deg'
     653A252E
     32662064
     6567
00B3 00        2217            db 0x00
00B4           2218   __str_10:
00B4 5065723A  2219            db 'Per:%.0f Vt:%.2f'
     252E3066
     2056743A
     252E3266
00C4 00        2220            db 0x00
00C5           2221   
0003           2222            CSEG
0003           2223   
0003           2224   end
