0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 07 11:04:09 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _get_period_2
0000             30            public _get_period
0000             31            public _Get_ADC
0000             32            public _Volts_at_Pin
0000             33            public _ADC_at_Pin
0000             34            public _InitPinADC
0000             35            public _waitms
0000             36            public _Timer3us
0000             37            public _InitADC
0000             38            public __c51_external_startup
0000             39   ;--------------------------------------------------------
0000             40   ; Special Function Registers
0000             41   ;--------------------------------------------------------
0000             42   _ACC            DATA 0xe0
0000             43   _ADC0ASAH       DATA 0xb6
0000             44   _ADC0ASAL       DATA 0xb5
0000             45   _ADC0ASCF       DATA 0xa1
0000             46   _ADC0ASCT       DATA 0xc7
0000             47   _ADC0CF0        DATA 0xbc
0000             48   _ADC0CF1        DATA 0xb9
0000             49   _ADC0CF2        DATA 0xdf
0000             50   _ADC0CN0        DATA 0xe8
0000             51   _ADC0CN1        DATA 0xb2
0000             52   _ADC0CN2        DATA 0xb3
0000             53   _ADC0GTH        DATA 0xc4
0000             54   _ADC0GTL        DATA 0xc3
0000             55   _ADC0H          DATA 0xbe
0000             56   _ADC0L          DATA 0xbd
0000             57   _ADC0LTH        DATA 0xc6
0000             58   _ADC0LTL        DATA 0xc5
0000             59   _ADC0MX         DATA 0xbb
0000             60   _B              DATA 0xf0
0000             61   _CKCON0         DATA 0x8e
0000             62   _CKCON1         DATA 0xa6
0000             63   _CLEN0          DATA 0xc6
0000             64   _CLIE0          DATA 0xc7
0000             65   _CLIF0          DATA 0xe8
0000             66   _CLKSEL         DATA 0xa9
0000             67   _CLOUT0         DATA 0xd1
0000             68   _CLU0CF         DATA 0xb1
0000             69   _CLU0FN         DATA 0xaf
0000             70   _CLU0MX         DATA 0x84
0000             71   _CLU1CF         DATA 0xb3
0000             72   _CLU1FN         DATA 0xb2
0000             73   _CLU1MX         DATA 0x85
0000             74   _CLU2CF         DATA 0xb6
0000             75   _CLU2FN         DATA 0xb5
0000             76   _CLU2MX         DATA 0x91
0000             77   _CLU3CF         DATA 0xbf
0000             78   _CLU3FN         DATA 0xbe
0000             79   _CLU3MX         DATA 0xae
0000             80   _CMP0CN0        DATA 0x9b
0000             81   _CMP0CN1        DATA 0x99
0000             82   _CMP0MD         DATA 0x9d
0000             83   _CMP0MX         DATA 0x9f
0000             84   _CMP1CN0        DATA 0xbf
0000             85   _CMP1CN1        DATA 0xac
0000             86   _CMP1MD         DATA 0xab
0000             87   _CMP1MX         DATA 0xaa
0000             88   _CRC0CN0        DATA 0xce
0000             89   _CRC0CN1        DATA 0x86
0000             90   _CRC0CNT        DATA 0xd3
0000             91   _CRC0DAT        DATA 0xcb
0000             92   _CRC0FLIP       DATA 0xcf
0000             93   _CRC0IN         DATA 0xca
0000             94   _CRC0ST         DATA 0xd2
0000             95   _DAC0CF0        DATA 0x91
0000             96   _DAC0CF1        DATA 0x92
0000             97   _DAC0H          DATA 0x85
0000             98   _DAC0L          DATA 0x84
0000             99   _DAC1CF0        DATA 0x93
0000            100   _DAC1CF1        DATA 0x94
0000            101   _DAC1H          DATA 0x8a
0000            102   _DAC1L          DATA 0x89
0000            103   _DAC2CF0        DATA 0x95
0000            104   _DAC2CF1        DATA 0x96
0000            105   _DAC2H          DATA 0x8c
0000            106   _DAC2L          DATA 0x8b
0000            107   _DAC3CF0        DATA 0x9a
0000            108   _DAC3CF1        DATA 0x9c
0000            109   _DAC3H          DATA 0x8e
0000            110   _DAC3L          DATA 0x8d
0000            111   _DACGCF0        DATA 0x88
0000            112   _DACGCF1        DATA 0x98
0000            113   _DACGCF2        DATA 0xa2
0000            114   _DERIVID        DATA 0xad
0000            115   _DEVICEID       DATA 0xb5
0000            116   _DPH            DATA 0x83
0000            117   _DPL            DATA 0x82
0000            118   _EIE1           DATA 0xe6
0000            119   _EIE2           DATA 0xf3
0000            120   _EIP1           DATA 0xbb
0000            121   _EIP1H          DATA 0xee
0000            122   _EIP2           DATA 0xed
0000            123   _EIP2H          DATA 0xf6
0000            124   _EMI0CN         DATA 0xe7
0000            125   _FLKEY          DATA 0xb7
0000            126   _HFO0CAL        DATA 0xc7
0000            127   _HFO1CAL        DATA 0xd6
0000            128   _HFOCN          DATA 0xef
0000            129   _I2C0ADM        DATA 0xff
0000            130   _I2C0CN0        DATA 0xba
0000            131   _I2C0DIN        DATA 0xbc
0000            132   _I2C0DOUT       DATA 0xbb
0000            133   _I2C0FCN0       DATA 0xad
0000            134   _I2C0FCN1       DATA 0xab
0000            135   _I2C0FCT        DATA 0xf5
0000            136   _I2C0SLAD       DATA 0xbd
0000            137   _I2C0STAT       DATA 0xb9
0000            138   _IE             DATA 0xa8
0000            139   _IP             DATA 0xb8
0000            140   _IPH            DATA 0xf2
0000            141   _IT01CF         DATA 0xe4
0000            142   _LFO0CN         DATA 0xb1
0000            143   _P0             DATA 0x80
0000            144   _P0MASK         DATA 0xfe
0000            145   _P0MAT          DATA 0xfd
0000            146   _P0MDIN         DATA 0xf1
0000            147   _P0MDOUT        DATA 0xa4
0000            148   _P0SKIP         DATA 0xd4
0000            149   _P1             DATA 0x90
0000            150   _P1MASK         DATA 0xee
0000            151   _P1MAT          DATA 0xed
0000            152   _P1MDIN         DATA 0xf2
0000            153   _P1MDOUT        DATA 0xa5
0000            154   _P1SKIP         DATA 0xd5
0000            155   _P2             DATA 0xa0
0000            156   _P2MASK         DATA 0xfc
0000            157   _P2MAT          DATA 0xfb
0000            158   _P2MDIN         DATA 0xf3
0000            159   _P2MDOUT        DATA 0xa6
0000            160   _P2SKIP         DATA 0xcc
0000            161   _P3             DATA 0xb0
0000            162   _P3MDIN         DATA 0xf4
0000            163   _P3MDOUT        DATA 0x9c
0000            164   _PCA0CENT       DATA 0x9e
0000            165   _PCA0CLR        DATA 0x9c
0000            166   _PCA0CN0        DATA 0xd8
0000            167   _PCA0CPH0       DATA 0xfc
0000            168   _PCA0CPH1       DATA 0xea
0000            169   _PCA0CPH2       DATA 0xec
0000            170   _PCA0CPH3       DATA 0xf5
0000            171   _PCA0CPH4       DATA 0x85
0000            172   _PCA0CPH5       DATA 0xde
0000            173   _PCA0CPL0       DATA 0xfb
0000            174   _PCA0CPL1       DATA 0xe9
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPL3       DATA 0xf4
0000            177   _PCA0CPL4       DATA 0x84
0000            178   _PCA0CPL5       DATA 0xdd
0000            179   _PCA0CPM0       DATA 0xda
0000            180   _PCA0CPM1       DATA 0xdb
0000            181   _PCA0CPM2       DATA 0xdc
0000            182   _PCA0CPM3       DATA 0xae
0000            183   _PCA0CPM4       DATA 0xaf
0000            184   _PCA0CPM5       DATA 0xcc
0000            185   _PCA0H          DATA 0xfa
0000            186   _PCA0L          DATA 0xf9
0000            187   _PCA0MD         DATA 0xd9
0000            188   _PCA0POL        DATA 0x96
0000            189   _PCA0PWM        DATA 0xf7
0000            190   _PCON0          DATA 0x87
0000            191   _PCON1          DATA 0xcd
0000            192   _PFE0CN         DATA 0xc1
0000            193   _PRTDRV         DATA 0xf6
0000            194   _PSCTL          DATA 0x8f
0000            195   _PSTAT0         DATA 0xaa
0000            196   _PSW            DATA 0xd0
0000            197   _REF0CN         DATA 0xd1
0000            198   _REG0CN         DATA 0xc9
0000            199   _REVID          DATA 0xb6
0000            200   _RSTSRC         DATA 0xef
0000            201   _SBCON1         DATA 0x94
0000            202   _SBRLH1         DATA 0x96
0000            203   _SBRLL1         DATA 0x95
0000            204   _SBUF           DATA 0x99
0000            205   _SBUF0          DATA 0x99
0000            206   _SBUF1          DATA 0x92
0000            207   _SCON           DATA 0x98
0000            208   _SCON0          DATA 0x98
0000            209   _SCON1          DATA 0xc8
0000            210   _SFRPAGE        DATA 0xa7
0000            211   _SFRPGCN        DATA 0xbc
0000            212   _SFRSTACK       DATA 0xd7
0000            213   _SMB0ADM        DATA 0xd6
0000            214   _SMB0ADR        DATA 0xd7
0000            215   _SMB0CF         DATA 0xc1
0000            216   _SMB0CN0        DATA 0xc0
0000            217   _SMB0DAT        DATA 0xc2
0000            218   _SMB0FCN0       DATA 0xc3
0000            219   _SMB0FCN1       DATA 0xc4
0000            220   _SMB0FCT        DATA 0xef
0000            221   _SMB0RXLN       DATA 0xc5
0000            222   _SMB0TC         DATA 0xac
0000            223   _SMOD1          DATA 0x93
0000            224   _SP             DATA 0x81
0000            225   _SPI0CFG        DATA 0xa1
0000            226   _SPI0CKR        DATA 0xa2
0000            227   _SPI0CN0        DATA 0xf8
0000            228   _SPI0DAT        DATA 0xa3
0000            229   _SPI0FCN0       DATA 0x9a
0000            230   _SPI0FCN1       DATA 0x9b
0000            231   _SPI0FCT        DATA 0xf7
0000            232   _SPI0PCF        DATA 0xdf
0000            233   _TCON           DATA 0x88
0000            234   _TH0            DATA 0x8c
0000            235   _TH1            DATA 0x8d
0000            236   _TL0            DATA 0x8a
0000            237   _TL1            DATA 0x8b
0000            238   _TMOD           DATA 0x89
0000            239   _TMR2CN0        DATA 0xc8
0000            240   _TMR2CN1        DATA 0xfd
0000            241   _TMR2H          DATA 0xcf
0000            242   _TMR2L          DATA 0xce
0000            243   _TMR2RLH        DATA 0xcb
0000            244   _TMR2RLL        DATA 0xca
0000            245   _TMR3CN0        DATA 0x91
0000            246   _TMR3CN1        DATA 0xfe
0000            247   _TMR3H          DATA 0x95
0000            248   _TMR3L          DATA 0x94
0000            249   _TMR3RLH        DATA 0x93
0000            250   _TMR3RLL        DATA 0x92
0000            251   _TMR4CN0        DATA 0x98
0000            252   _TMR4CN1        DATA 0xff
0000            253   _TMR4H          DATA 0xa5
0000            254   _TMR4L          DATA 0xa4
0000            255   _TMR4RLH        DATA 0xa3
0000            256   _TMR4RLL        DATA 0xa2
0000            257   _TMR5CN0        DATA 0xc0
0000            258   _TMR5CN1        DATA 0xf1
0000            259   _TMR5H          DATA 0xd5
0000            260   _TMR5L          DATA 0xd4
0000            261   _TMR5RLH        DATA 0xd3
0000            262   _TMR5RLL        DATA 0xd2
0000            263   _UART0PCF       DATA 0xd9
0000            264   _UART1FCN0      DATA 0x9d
0000            265   _UART1FCN1      DATA 0xd8
0000            266   _UART1FCT       DATA 0xfa
0000            267   _UART1LIN       DATA 0x9e
0000            268   _UART1PCF       DATA 0xda
0000            269   _VDM0CN         DATA 0xff
0000            270   _WDTCN          DATA 0x97
0000            271   _XBR0           DATA 0xe1
0000            272   _XBR1           DATA 0xe2
0000            273   _XBR2           DATA 0xe3
0000            274   _XOSC0CN        DATA 0x86
0000            275   _DPTR           DATA 0x8382
0000            276   _TMR2RL         DATA 0xcbca
0000            277   _TMR3RL         DATA 0x9392
0000            278   _TMR4RL         DATA 0xa3a2
0000            279   _TMR5RL         DATA 0xd3d2
0000            280   _TMR0           DATA 0x8c8a
0000            281   _TMR1           DATA 0x8d8b
0000            282   _TMR2           DATA 0xcfce
0000            283   _TMR3           DATA 0x9594
0000            284   _TMR4           DATA 0xa5a4
0000            285   _TMR5           DATA 0xd5d4
0000            286   _SBRL1          DATA 0x9695
0000            287   _PCA0           DATA 0xfaf9
0000            288   _PCA0CP0        DATA 0xfcfb
0000            289   _PCA0CP1        DATA 0xeae9
0000            290   _PCA0CP2        DATA 0xeceb
0000            291   _PCA0CP3        DATA 0xf5f4
0000            292   _PCA0CP4        DATA 0x8584
0000            293   _PCA0CP5        DATA 0xdedd
0000            294   _ADC0ASA        DATA 0xb6b5
0000            295   _ADC0GT         DATA 0xc4c3
0000            296   _ADC0           DATA 0xbebd
0000            297   _ADC0LT         DATA 0xc6c5
0000            298   _DAC0           DATA 0x8584
0000            299   _DAC1           DATA 0x8a89
0000            300   _DAC2           DATA 0x8c8b
0000            301   _DAC3           DATA 0x8e8d
0000            302   ;--------------------------------------------------------
0000            303   ; special function bits
0000            304   ;--------------------------------------------------------
0000            305   _ACC_0          BIT 0xe0
0000            306   _ACC_1          BIT 0xe1
0000            307   _ACC_2          BIT 0xe2
0000            308   _ACC_3          BIT 0xe3
0000            309   _ACC_4          BIT 0xe4
0000            310   _ACC_5          BIT 0xe5
0000            311   _ACC_6          BIT 0xe6
0000            312   _ACC_7          BIT 0xe7
0000            313   _TEMPE          BIT 0xe8
0000            314   _ADGN0          BIT 0xe9
0000            315   _ADGN1          BIT 0xea
0000            316   _ADWINT         BIT 0xeb
0000            317   _ADBUSY         BIT 0xec
0000            318   _ADINT          BIT 0xed
0000            319   _IPOEN          BIT 0xee
0000            320   _ADEN           BIT 0xef
0000            321   _B_0            BIT 0xf0
0000            322   _B_1            BIT 0xf1
0000            323   _B_2            BIT 0xf2
0000            324   _B_3            BIT 0xf3
0000            325   _B_4            BIT 0xf4
0000            326   _B_5            BIT 0xf5
0000            327   _B_6            BIT 0xf6
0000            328   _B_7            BIT 0xf7
0000            329   _C0FIF          BIT 0xe8
0000            330   _C0RIF          BIT 0xe9
0000            331   _C1FIF          BIT 0xea
0000            332   _C1RIF          BIT 0xeb
0000            333   _C2FIF          BIT 0xec
0000            334   _C2RIF          BIT 0xed
0000            335   _C3FIF          BIT 0xee
0000            336   _C3RIF          BIT 0xef
0000            337   _D1SRC0         BIT 0x88
0000            338   _D1SRC1         BIT 0x89
0000            339   _D1AMEN         BIT 0x8a
0000            340   _D01REFSL       BIT 0x8b
0000            341   _D3SRC0         BIT 0x8c
0000            342   _D3SRC1         BIT 0x8d
0000            343   _D3AMEN         BIT 0x8e
0000            344   _D23REFSL       BIT 0x8f
0000            345   _D0UDIS         BIT 0x98
0000            346   _D1UDIS         BIT 0x99
0000            347   _D2UDIS         BIT 0x9a
0000            348   _D3UDIS         BIT 0x9b
0000            349   _EX0            BIT 0xa8
0000            350   _ET0            BIT 0xa9
0000            351   _EX1            BIT 0xaa
0000            352   _ET1            BIT 0xab
0000            353   _ES0            BIT 0xac
0000            354   _ET2            BIT 0xad
0000            355   _ESPI0          BIT 0xae
0000            356   _EA             BIT 0xaf
0000            357   _PX0            BIT 0xb8
0000            358   _PT0            BIT 0xb9
0000            359   _PX1            BIT 0xba
0000            360   _PT1            BIT 0xbb
0000            361   _PS0            BIT 0xbc
0000            362   _PT2            BIT 0xbd
0000            363   _PSPI0          BIT 0xbe
0000            364   _P0_0           BIT 0x80
0000            365   _P0_1           BIT 0x81
0000            366   _P0_2           BIT 0x82
0000            367   _P0_3           BIT 0x83
0000            368   _P0_4           BIT 0x84
0000            369   _P0_5           BIT 0x85
0000            370   _P0_6           BIT 0x86
0000            371   _P0_7           BIT 0x87
0000            372   _P1_0           BIT 0x90
0000            373   _P1_1           BIT 0x91
0000            374   _P1_2           BIT 0x92
0000            375   _P1_3           BIT 0x93
0000            376   _P1_4           BIT 0x94
0000            377   _P1_5           BIT 0x95
0000            378   _P1_6           BIT 0x96
0000            379   _P1_7           BIT 0x97
0000            380   _P2_0           BIT 0xa0
0000            381   _P2_1           BIT 0xa1
0000            382   _P2_2           BIT 0xa2
0000            383   _P2_3           BIT 0xa3
0000            384   _P2_4           BIT 0xa4
0000            385   _P2_5           BIT 0xa5
0000            386   _P2_6           BIT 0xa6
0000            387   _P3_0           BIT 0xb0
0000            388   _P3_1           BIT 0xb1
0000            389   _P3_2           BIT 0xb2
0000            390   _P3_3           BIT 0xb3
0000            391   _P3_4           BIT 0xb4
0000            392   _P3_7           BIT 0xb7
0000            393   _CCF0           BIT 0xd8
0000            394   _CCF1           BIT 0xd9
0000            395   _CCF2           BIT 0xda
0000            396   _CCF3           BIT 0xdb
0000            397   _CCF4           BIT 0xdc
0000            398   _CCF5           BIT 0xdd
0000            399   _CR             BIT 0xde
0000            400   _CF             BIT 0xdf
0000            401   _PARITY         BIT 0xd0
0000            402   _F1             BIT 0xd1
0000            403   _OV             BIT 0xd2
0000            404   _RS0            BIT 0xd3
0000            405   _RS1            BIT 0xd4
0000            406   _F0             BIT 0xd5
0000            407   _AC             BIT 0xd6
0000            408   _CY             BIT 0xd7
0000            409   _RI             BIT 0x98
0000            410   _TI             BIT 0x99
0000            411   _RB8            BIT 0x9a
0000            412   _TB8            BIT 0x9b
0000            413   _REN            BIT 0x9c
0000            414   _CE             BIT 0x9d
0000            415   _SMODE          BIT 0x9e
0000            416   _RI1            BIT 0xc8
0000            417   _TI1            BIT 0xc9
0000            418   _RBX1           BIT 0xca
0000            419   _TBX1           BIT 0xcb
0000            420   _REN1           BIT 0xcc
0000            421   _PERR1          BIT 0xcd
0000            422   _OVR1           BIT 0xce
0000            423   _SI             BIT 0xc0
0000            424   _ACK            BIT 0xc1
0000            425   _ARBLOST        BIT 0xc2
0000            426   _ACKRQ          BIT 0xc3
0000            427   _STO            BIT 0xc4
0000            428   _STA            BIT 0xc5
0000            429   _TXMODE         BIT 0xc6
0000            430   _MASTER         BIT 0xc7
0000            431   _SPIEN          BIT 0xf8
0000            432   _TXNF           BIT 0xf9
0000            433   _NSSMD0         BIT 0xfa
0000            434   _NSSMD1         BIT 0xfb
0000            435   _RXOVRN         BIT 0xfc
0000            436   _MODF           BIT 0xfd
0000            437   _WCOL           BIT 0xfe
0000            438   _SPIF           BIT 0xff
0000            439   _IT0            BIT 0x88
0000            440   _IE0            BIT 0x89
0000            441   _IT1            BIT 0x8a
0000            442   _IE1            BIT 0x8b
0000            443   _TR0            BIT 0x8c
0000            444   _TF0            BIT 0x8d
0000            445   _TR1            BIT 0x8e
0000            446   _TF1            BIT 0x8f
0000            447   _T2XCLK0        BIT 0xc8
0000            448   _T2XCLK1        BIT 0xc9
0000            449   _TR2            BIT 0xca
0000            450   _T2SPLIT        BIT 0xcb
0000            451   _TF2CEN         BIT 0xcc
0000            452   _TF2LEN         BIT 0xcd
0000            453   _TF2L           BIT 0xce
0000            454   _TF2H           BIT 0xcf
0000            455   _T4XCLK0        BIT 0x98
0000            456   _T4XCLK1        BIT 0x99
0000            457   _TR4            BIT 0x9a
0000            458   _T4SPLIT        BIT 0x9b
0000            459   _TF4CEN         BIT 0x9c
0000            460   _TF4LEN         BIT 0x9d
0000            461   _TF4L           BIT 0x9e
0000            462   _TF4H           BIT 0x9f
0000            463   _T5XCLK0        BIT 0xc0
0000            464   _T5XCLK1        BIT 0xc1
0000            465   _TR5            BIT 0xc2
0000            466   _T5SPLIT        BIT 0xc3
0000            467   _TF5CEN         BIT 0xc4
0000            468   _TF5LEN         BIT 0xc5
0000            469   _TF5L           BIT 0xc6
0000            470   _TF5H           BIT 0xc7
0000            471   _RIE            BIT 0xd8
0000            472   _RXTO0          BIT 0xd9
0000            473   _RXTO1          BIT 0xda
0000            474   _RFRQ           BIT 0xdb
0000            475   _TIE            BIT 0xdc
0000            476   _TXHOLD         BIT 0xdd
0000            477   _TXNF1          BIT 0xde
0000            478   _TFRQ           BIT 0xdf
0000            479   ;--------------------------------------------------------
0000            480   ; overlayable register banks
0000            481   ;--------------------------------------------------------
0000            482            rbank0 segment data overlay
0000            483   ;--------------------------------------------------------
0000            484   ; internal ram data
0000            485   ;--------------------------------------------------------
0000            486            rseg R_DSEG
0000            487   _main_v_1_65:
0000            488            ds 8
0008            489   _main_hello_1_65:
0008            490            ds 4
000C            491   _main_peak_voltage_reference_1_65:
000C            492            ds 4
0010            493   _main_sloc0_1_0:
0010            494            ds 4
0014            495   ;--------------------------------------------------------
0014            496   ; overlayable items in internal ram 
0014            497   ;--------------------------------------------------------
0000            498            rseg    R_OSEG
0000            499            rseg    R_OSEG
0000            500   _InitPinADC_PARM_2:
0000            501            ds 1
0001            502            rseg    R_OSEG
0001            503   ;--------------------------------------------------------
0001            504   ; indirectly addressable internal ram data
0001            505   ;--------------------------------------------------------
0000            506            rseg R_ISEG
0000            507   ;--------------------------------------------------------
0000            508   ; absolute internal ram data
0000            509   ;--------------------------------------------------------
0000            510            DSEG
0000            511   ;--------------------------------------------------------
0000            512   ; bit data
0000            513   ;--------------------------------------------------------
0000            514            rseg R_BSEG
0000            515   ;--------------------------------------------------------
0000            516   ; paged external ram data
0000            517   ;--------------------------------------------------------
0000            518            rseg R_PSEG
0000            519   ;--------------------------------------------------------
0000            520   ; external ram data
0000            521   ;--------------------------------------------------------
0000            522            rseg R_XSEG
0000            523   ;--------------------------------------------------------
0000            524   ; absolute external ram data
0000            525   ;--------------------------------------------------------
0000            526            XSEG
0000            527   ;--------------------------------------------------------
0000            528   ; external initialized ram data
0000            529   ;--------------------------------------------------------
0000            530            rseg R_IXSEG
0000            531            rseg R_HOME
0000            532            rseg R_GSINIT
0000            533            rseg R_CSEG
0000            534   ;--------------------------------------------------------
0000            535   ; Reset entry point and interrupt vectors
0000            536   ;--------------------------------------------------------
0000            537            CSEG at 0x0000
0000 020000     538            ljmp    _crt0
0003            539   ;--------------------------------------------------------
0003            540   ; global & static initialisations
0003            541   ;--------------------------------------------------------
0000            542            rseg R_HOME
0000            543            rseg R_GSINIT
0000            544            rseg R_GSINIT
0000            545   ;--------------------------------------------------------
0000            546   ; data variables initialization
0000            547   ;--------------------------------------------------------
0000            548            rseg R_DINIT
0000            549            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            550   ;--------------------------------------------------------
0000            551   ; code
0000            552   ;--------------------------------------------------------
0000            553            rseg R_CSEG
0000            554   ;------------------------------------------------------------
0000            555   ;Allocation info for local variables in function '_c51_external_startup'
0000            556   ;------------------------------------------------------------
0000            557   ;------------------------------------------------------------
0000            558   ;        EFM8_ADC.c:20: char _c51_external_startup (void)
0000            559   ;        -----------------------------------------
0000            560   ;         function _c51_external_startup
0000            561   ;        -----------------------------------------
0000            562   __c51_external_startup:
0000            563            using   0
0000            564   ;        EFM8_ADC.c:23: SFRPAGE = 0x00;
0000 75A700     565            mov     _SFRPAGE,#0x00
0003            566   ;        EFM8_ADC.c:24: WDTCN = 0xDE; //First key
0003 7597DE     567            mov     _WDTCN,#0xDE
0006            568   ;        EFM8_ADC.c:25: WDTCN = 0xAD; //Second key
0006 7597AD     569            mov     _WDTCN,#0xAD
0009            570   ;        EFM8_ADC.c:27: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     571            mov     _VDM0CN,#0x80
000C            572   ;        EFM8_ADC.c:28: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     573            mov     _RSTSRC,#0x06
000F            574   ;        EFM8_ADC.c:35: SFRPAGE = 0x10;
000F 75A710     575            mov     _SFRPAGE,#0x10
0012            576   ;        EFM8_ADC.c:36: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     577            mov     _PFE0CN,#0x20
0015            578   ;        EFM8_ADC.c:37: SFRPAGE = 0x00;
0015 75A700     579            mov     _SFRPAGE,#0x00
0018            580   ;        EFM8_ADC.c:58: CLKSEL = 0x00;
0018 75A900     581            mov     _CLKSEL,#0x00
001B            582   ;        EFM8_ADC.c:59: CLKSEL = 0x00;
001B 75A900     583            mov     _CLKSEL,#0x00
001E            584   ;        EFM8_ADC.c:60: while ((CLKSEL & 0x80) == 0);
001E            585   L002001?:
001E E5A9       586            mov     a,_CLKSEL
0020 30E740     587            jnb     acc.7,L002001?
0023            588   ;        EFM8_ADC.c:61: CLKSEL = 0x03;
0023 75A903     589            mov     _CLKSEL,#0x03
0026            590   ;        EFM8_ADC.c:62: CLKSEL = 0x03;
0026 75A903     591            mov     _CLKSEL,#0x03
0029            592   ;        EFM8_ADC.c:63: while ((CLKSEL & 0x80) == 0);
0029            593   L002004?:
0029 E5A9       594            mov     a,_CLKSEL
002B 30E7C0     595            jnb     acc.7,L002004?
002E            596   ;        EFM8_ADC.c:68: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     597            orl     _P0MDOUT,#0x10
0031            598   ;        EFM8_ADC.c:69: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     599            mov     _XBR0,#0x01
0034            600   ;        EFM8_ADC.c:70: XBR1     = 0X00;
0034 75E200     601            mov     _XBR1,#0x00
0037            602   ;        EFM8_ADC.c:71: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     603            mov     _XBR2,#0x40
003A            604   ;        EFM8_ADC.c:77: SCON0 = 0x10;
003A 759810     605            mov     _SCON0,#0x10
003D            606   ;        EFM8_ADC.c:78: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     607            mov     _TH1,#0xE6
0040            608   ;        EFM8_ADC.c:79: TL1 = TH1;      // Init Timer1
0040 858D8B     609            mov     _TL1,_TH1
0043            610   ;        EFM8_ADC.c:80: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     611            anl     _TMOD,#0x0F
0046            612   ;        EFM8_ADC.c:81: TMOD |=  0x21;
0046 438921     613            orl     _TMOD,#0x21
0049            614   ;        EFM8_ADC.c:82: TR1 = 1; // START Timer1
0049 D28E       615            setb    _TR1
004B            616   ;        EFM8_ADC.c:83: TI = 1;  // Indicate TX0 ready
004B D299       617            setb    _TI
004D            618   ;        EFM8_ADC.c:85: return 0;
004D 758200     619            mov     dpl,#0x00
0050 22         620            ret
0051            621   ;------------------------------------------------------------
0051            622   ;Allocation info for local variables in function 'InitADC'
0051            623   ;------------------------------------------------------------
0051            624   ;------------------------------------------------------------
0051            625   ;        EFM8_ADC.c:90: void InitADC (void)
0051            626   ;        -----------------------------------------
0051            627   ;         function InitADC
0051            628   ;        -----------------------------------------
0051            629   _InitADC:
0051            630   ;        EFM8_ADC.c:92: SFRPAGE = 0x00;
0051 75A700     631            mov     _SFRPAGE,#0x00
0054            632   ;        EFM8_ADC.c:93: ADEN=0; // Disable ADC
0054 C2EF       633            clr     _ADEN
0056            634   ;        EFM8_ADC.c:98: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     635            mov     _ADC0CN1,#0x80
0059            636   ;        EFM8_ADC.c:102: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     637            mov     _ADC0CF0,#0x20
005C            638   ;        EFM8_ADC.c:106: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     639            mov     _ADC0CF1,#0x1E
005F            640   ;        EFM8_ADC.c:115: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     641            mov     _ADC0CN0,#0x00
0062            642   ;        EFM8_ADC.c:120: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     643            mov     _ADC0CF2,#0x3F
0065            644   ;        EFM8_ADC.c:124: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     645            mov     _ADC0CN2,#0x00
0068            646   ;        EFM8_ADC.c:126: ADEN=1; // Enable ADC
0068 D2EF       647            setb    _ADEN
006A 22         648            ret
006B            649   ;------------------------------------------------------------
006B            650   ;Allocation info for local variables in function 'Timer3us'
006B            651   ;------------------------------------------------------------
006B            652   ;us                        Allocated to registers r2 
006B            653   ;i                         Allocated to registers r3 
006B            654   ;------------------------------------------------------------
006B            655   ;        EFM8_ADC.c:130: void Timer3us(unsigned char us)
006B            656   ;        -----------------------------------------
006B            657   ;         function Timer3us
006B            658   ;        -----------------------------------------
006B            659   _Timer3us:
006B AA82       660            mov     r2,dpl
006D            661   ;        EFM8_ADC.c:135: CKCON0|=0b_0100_0000;
006D 438E40     662            orl     _CKCON0,#0x40
0070            663   ;        EFM8_ADC.c:137: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     664            mov     _TMR3RL,#0xB8
0073 7593FF     665            mov     (_TMR3RL >> 8),#0xFF
0076            666   ;        EFM8_ADC.c:138: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     667            mov     _TMR3,_TMR3RL
0079 859395     668            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            669   ;        EFM8_ADC.c:140: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     670            mov     _TMR3CN0,#0x04
007F            671   ;        EFM8_ADC.c:141: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       672            mov     r3,#0x00
0081            673   L004004?:
0081 C3         674            clr     c
0082 EB         675            mov     a,r3
0083 9A         676            subb    a,r2
0084 5000       677            jnc     L004007?
0086            678   ;        EFM8_ADC.c:143: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            679   L004001?:
0086 E591       680            mov     a,_TMR3CN0
0088 30E7C0     681            jnb     acc.7,L004001?
008B            682   ;        EFM8_ADC.c:144: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     683            anl     _TMR3CN0,#0x7F
008E            684   ;        EFM8_ADC.c:141: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         685            inc     r3
008F 8000       686            sjmp    L004004?
0091            687   L004007?:
0091            688   ;        EFM8_ADC.c:146: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     689            mov     _TMR3CN0,#0x00
0094 22         690            ret
0095            691   ;------------------------------------------------------------
0095            692   ;Allocation info for local variables in function 'waitms'
0095            693   ;------------------------------------------------------------
0095            694   ;ms                        Allocated to registers r2 r3 
0095            695   ;j                         Allocated to registers r4 r5 
0095            696   ;k                         Allocated to registers r6 
0095            697   ;------------------------------------------------------------
0095            698   ;        EFM8_ADC.c:149: void waitms (unsigned int ms)
0095            699   ;        -----------------------------------------
0095            700   ;         function waitms
0095            701   ;        -----------------------------------------
0095            702   _waitms:
0095 AA82       703            mov     r2,dpl
0097 AB83       704            mov     r3,dph
0099            705   ;        EFM8_ADC.c:153: for(j=0; j<ms; j++)
0099 7C00       706            mov     r4,#0x00
009B 7D00       707            mov     r5,#0x00
009D            708   L005005?:
009D C3         709            clr     c
009E EC         710            mov     a,r4
009F 9A         711            subb    a,r2
00A0 ED         712            mov     a,r5
00A1 9B         713            subb    a,r3
00A2 5000       714            jnc     L005009?
00A4            715   ;        EFM8_ADC.c:154: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       716            mov     r6,#0x00
00A6            717   L005001?:
00A6 BE0400     718            cjne    r6,#0x04,L005018?
00A9            719   L005018?:
00A9 5000       720            jnc     L005007?
00AB 7582FA     721            mov     dpl,#0xFA
00AE C002       722            push    ar2
00B0 C003       723            push    ar3
00B2 C004       724            push    ar4
00B4 C005       725            push    ar5
00B6 C006       726            push    ar6
00B8 120000     727            lcall   _Timer3us
00BB D006       728            pop     ar6
00BD D005       729            pop     ar5
00BF D004       730            pop     ar4
00C1 D003       731            pop     ar3
00C3 D002       732            pop     ar2
00C5 0E         733            inc     r6
00C6 8000       734            sjmp    L005001?
00C8            735   L005007?:
00C8            736   ;        EFM8_ADC.c:153: for(j=0; j<ms; j++)
00C8 0C         737            inc     r4
00C9 BC0040     738            cjne    r4,#0x00,L005005?
00CC 0D         739            inc     r5
00CD 8000       740            sjmp    L005005?
00CF            741   L005009?:
00CF 22         742            ret
00D0            743   ;------------------------------------------------------------
00D0            744   ;Allocation info for local variables in function 'InitPinADC'
00D0            745   ;------------------------------------------------------------
00D0            746   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            747   ;portno                    Allocated to registers r2 
00D0            748   ;mask                      Allocated to registers r3 
00D0            749   ;------------------------------------------------------------
00D0            750   ;        EFM8_ADC.c:159: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            751   ;        -----------------------------------------
00D0            752   ;         function InitPinADC
00D0            753   ;        -----------------------------------------
00D0            754   _InitPinADC:
00D0 AA82       755            mov     r2,dpl
00D2            756   ;        EFM8_ADC.c:163: mask=1<<pinno;
00D2 8500F0     757            mov     b,_InitPinADC_PARM_2
00D5 05F0       758            inc     b
00D7 7401       759            mov     a,#0x01
00D9 8000       760            sjmp    L006013?
00DB            761   L006011?:
00DB 25E0       762            add     a,acc
00DD            763   L006013?:
00DD D5F000     764            djnz    b,L006011?
00E0 FB         765            mov     r3,a
00E1            766   ;        EFM8_ADC.c:165: SFRPAGE = 0x20;
00E1 75A720     767            mov     _SFRPAGE,#0x20
00E4            768   ;        EFM8_ADC.c:166: switch (portno)
00E4 BA0040     769            cjne    r2,#0x00,L006014?
00E7 8000       770            sjmp    L006001?
00E9            771   L006014?:
00E9 BA01C0     772            cjne    r2,#0x01,L006015?
00EC 8000       773            sjmp    L006002?
00EE            774   L006015?:
00EE            775   ;        EFM8_ADC.c:168: case 0:
00EE BA0240     776            cjne    r2,#0x02,L006005?
00F1 8000       777            sjmp    L006003?
00F3            778   L006001?:
00F3            779   ;        EFM8_ADC.c:169: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         780            mov     a,r3
00F4 F4         781            cpl     a
00F5 FA         782            mov     r2,a
00F6 52F1       783            anl     _P0MDIN,a
00F8            784   ;        EFM8_ADC.c:170: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         785            mov     a,r3
00F9 42D4       786            orl     _P0SKIP,a
00FB            787   ;        EFM8_ADC.c:171: break;
00FB            788   ;        EFM8_ADC.c:172: case 1:
00FB 8000       789            sjmp    L006005?
00FD            790   L006002?:
00FD            791   ;        EFM8_ADC.c:173: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         792            mov     a,r3
00FE F4         793            cpl     a
00FF FA         794            mov     r2,a
0100 52F2       795            anl     _P1MDIN,a
0102            796   ;        EFM8_ADC.c:174: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         797            mov     a,r3
0103 42D5       798            orl     _P1SKIP,a
0105            799   ;        EFM8_ADC.c:175: break;
0105            800   ;        EFM8_ADC.c:176: case 2:
0105 8000       801            sjmp    L006005?
0107            802   L006003?:
0107            803   ;        EFM8_ADC.c:177: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         804            mov     a,r3
0108 F4         805            cpl     a
0109 FA         806            mov     r2,a
010A 52F3       807            anl     _P2MDIN,a
010C            808   ;        EFM8_ADC.c:178: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         809            mov     a,r3
010D 42CC       810            orl     _P2SKIP,a
010F            811   ;        EFM8_ADC.c:182: }
010F            812   L006005?:
010F            813   ;        EFM8_ADC.c:183: SFRPAGE = 0x00;
010F 75A700     814            mov     _SFRPAGE,#0x00
0112 22         815            ret
0113            816   ;------------------------------------------------------------
0113            817   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            818   ;------------------------------------------------------------
0113            819   ;pin                       Allocated to registers 
0113            820   ;------------------------------------------------------------
0113            821   ;        EFM8_ADC.c:186: unsigned int ADC_at_Pin(unsigned char pin)
0113            822   ;        -----------------------------------------
0113            823   ;         function ADC_at_Pin
0113            824   ;        -----------------------------------------
0113            825   _ADC_at_Pin:
0113 8582BB     826            mov     _ADC0MX,dpl
0116            827   ;        EFM8_ADC.c:189: ADINT = 0;
0116 C2ED       828            clr     _ADINT
0118            829   ;        EFM8_ADC.c:190: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       830            setb    _ADBUSY
011A            831   ;        EFM8_ADC.c:191: while (!ADINT); // Wait for conversion to complete
011A            832   L007001?:
011A 30EDC0     833            jnb     _ADINT,L007001?
011D            834   ;        EFM8_ADC.c:192: return (ADC0);
011D 85BD82     835            mov     dpl,_ADC0
0120 85BE83     836            mov     dph,(_ADC0 >> 8)
0123 22         837            ret
0124            838   ;------------------------------------------------------------
0124            839   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            840   ;------------------------------------------------------------
0124            841   ;pin                       Allocated to registers r2 
0124            842   ;------------------------------------------------------------
0124            843   ;        EFM8_ADC.c:195: float Volts_at_Pin(unsigned char pin)
0124            844   ;        -----------------------------------------
0124            845   ;         function Volts_at_Pin
0124            846   ;        -----------------------------------------
0124            847   _Volts_at_Pin:
0124            848   ;        EFM8_ADC.c:197: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     849            lcall   _ADC_at_Pin
0127 120000     850            lcall   ___uint2fs
012A AA82       851            mov     r2,dpl
012C AB83       852            mov     r3,dph
012E ACF0       853            mov     r4,b
0130 FD         854            mov     r5,a
0131 C002       855            push    ar2
0133 C003       856            push    ar3
0135 C004       857            push    ar4
0137 C005       858            push    ar5
0139 906C8B     859            mov     dptr,#0x6C8B
013C 75F053     860            mov     b,#0x53
013F 7440       861            mov     a,#0x40
0141 120000     862            lcall   ___fsmul
0144 AA82       863            mov     r2,dpl
0146 AB83       864            mov     r3,dph
0148 ACF0       865            mov     r4,b
014A FD         866            mov     r5,a
014B E581       867            mov     a,sp
014D 24FC       868            add     a,#0xfc
014F F581       869            mov     sp,a
0151 E4         870            clr     a
0152 C0E0       871            push    acc
0154 74FC       872            mov     a,#0xFC
0156 C0E0       873            push    acc
0158 747F       874            mov     a,#0x7F
015A C0E0       875            push    acc
015C 7446       876            mov     a,#0x46
015E C0E0       877            push    acc
0160 8A82       878            mov     dpl,r2
0162 8B83       879            mov     dph,r3
0164 8CF0       880            mov     b,r4
0166 ED         881            mov     a,r5
0167 120000     882            lcall   ___fsdiv
016A AA82       883            mov     r2,dpl
016C AB83       884            mov     r3,dph
016E ACF0       885            mov     r4,b
0170 FD         886            mov     r5,a
0171 E581       887            mov     a,sp
0173 24FC       888            add     a,#0xfc
0175 F581       889            mov     sp,a
0177 8A82       890            mov     dpl,r2
0179 8B83       891            mov     dph,r3
017B 8CF0       892            mov     b,r4
017D ED         893            mov     a,r5
017E 22         894            ret
017F            895   ;------------------------------------------------------------
017F            896   ;Allocation info for local variables in function 'Get_ADC'
017F            897   ;------------------------------------------------------------
017F            898   ;------------------------------------------------------------
017F            899   ;        EFM8_ADC.c:201: unsigned int Get_ADC (void)
017F            900   ;        -----------------------------------------
017F            901   ;         function Get_ADC
017F            902   ;        -----------------------------------------
017F            903   _Get_ADC:
017F            904   ;        EFM8_ADC.c:203: ADINT = 0;
017F C2ED       905            clr     _ADINT
0181            906   ;        EFM8_ADC.c:204: ADBUSY = 1;
0181 D2EC       907            setb    _ADBUSY
0183            908   ;        EFM8_ADC.c:205: while (!ADINT); // Wait for conversion to complete
0183            909   L009001?:
0183 30ED00     910            jnb     _ADINT,L009001?
0186            911   ;        EFM8_ADC.c:206: return (ADC0);
0186 85BD82     912            mov     dpl,_ADC0
0189 85BE83     913            mov     dph,(_ADC0 >> 8)
018C 22         914            ret
018D            915   ;------------------------------------------------------------
018D            916   ;Allocation info for local variables in function 'get_period'
018D            917   ;------------------------------------------------------------
018D            918   ;half_period               Allocated to registers r2 r3 r4 r5 
018D            919   ;overflow_count            Allocated to registers 
018D            920   ;------------------------------------------------------------
018D            921   ;        EFM8_ADC.c:209: float get_period(void)
018D            922   ;        -----------------------------------------
018D            923   ;         function get_period
018D            924   ;        -----------------------------------------
018D            925   _get_period:
018D            926   ;        EFM8_ADC.c:214: ADC0MX=QFP32_MUX_P2_4;
018D 75BB11     927            mov     _ADC0MX,#0x11
0190            928   ;        EFM8_ADC.c:215: ADINT = 0;
0190 C2ED       929            clr     _ADINT
0192            930   ;        EFM8_ADC.c:216: ADBUSY=1;
0192 D2EC       931            setb    _ADBUSY
0194            932   ;        EFM8_ADC.c:217: while (!ADINT); // Wait for conversion to complete
0194            933   L010001?:
0194 30ED40     934            jnb     _ADINT,L010001?
0197            935   ;        EFM8_ADC.c:219: TL0=0;
0197 758A00     936            mov     _TL0,#0x00
019A            937   ;        EFM8_ADC.c:220: TH0=0;
019A 758C00     938            mov     _TH0,#0x00
019D            939   ;        EFM8_ADC.c:221: while (Get_ADC()!=0); // Wait for the signal to be zero
019D            940   L010004?:
019D 120000     941            lcall   _Get_ADC
01A0 E582       942            mov     a,dpl
01A2 8583F0     943            mov     b,dph
01A5 45F0       944            orl     a,b
01A7 7000       945            jnz     L010004?
01A9            946   ;        EFM8_ADC.c:222: while (Get_ADC()==0); // Wait for the signal to be positive
01A9            947   L010007?:
01A9 120000     948            lcall   _Get_ADC
01AC E582       949            mov     a,dpl
01AE 8583F0     950            mov     b,dph
01B1 45F0       951            orl     a,b
01B3 6000       952            jz      L010007?
01B5            953   ;        EFM8_ADC.c:223: TR0=1; // Start the timer 0
01B5 D28C       954            setb    _TR0
01B7            955   ;        EFM8_ADC.c:224: while (Get_ADC()!=0); // Wait for the signal to be zero again
01B7            956   L010010?:
01B7 120000     957            lcall   _Get_ADC
01BA E582       958            mov     a,dpl
01BC 8583F0     959            mov     b,dph
01BF 45F0       960            orl     a,b
01C1 7000       961            jnz     L010010?
01C3            962   ;        EFM8_ADC.c:225: TR0=0; // Stop timer 0
01C3 C28C       963            clr     _TR0
01C5            964   ;        EFM8_ADC.c:227: half_period=TH0*256.0+TL0; // The 16-bit number [TH0-TL0]
01C5 858C82     965            mov     dpl,_TH0
01C8 120000     966            lcall   ___uchar2fs
01CB AA82       967            mov     r2,dpl
01CD AB83       968            mov     r3,dph
01CF ACF0       969            mov     r4,b
01D1 FD         970            mov     r5,a
01D2 C002       971            push    ar2
01D4 C003       972            push    ar3
01D6 C004       973            push    ar4
01D8 C005       974            push    ar5
01DA 900000     975            mov     dptr,#0x0000
01DD 75F080     976            mov     b,#0x80
01E0 7443       977            mov     a,#0x43
01E2 120000     978            lcall   ___fsmul
01E5 AA82       979            mov     r2,dpl
01E7 AB83       980            mov     r3,dph
01E9 ACF0       981            mov     r4,b
01EB FD         982            mov     r5,a
01EC E581       983            mov     a,sp
01EE 24FC       984            add     a,#0xfc
01F0 F581       985            mov     sp,a
01F2 AE8A       986            mov     r6,_TL0
01F4 7F00       987            mov     r7,#0x00
01F6 8E82       988            mov     dpl,r6
01F8 8F83       989            mov     dph,r7
01FA C002       990            push    ar2
01FC C003       991            push    ar3
01FE C004       992            push    ar4
0200 C005       993            push    ar5
0202 120000     994            lcall   ___sint2fs
0205 AE82       995            mov     r6,dpl
0207 AF83       996            mov     r7,dph
0209 A8F0       997            mov     r0,b
020B F9         998            mov     r1,a
020C D005       999            pop     ar5
020E D004      1000            pop     ar4
0210 D003      1001            pop     ar3
0212 D002      1002            pop     ar2
0214 C006      1003            push    ar6
0216 C007      1004            push    ar7
0218 C000      1005            push    ar0
021A C001      1006            push    ar1
021C 8A82      1007            mov     dpl,r2
021E 8B83      1008            mov     dph,r3
0220 8CF0      1009            mov     b,r4
0222 ED        1010            mov     a,r5
0223 120000    1011            lcall   ___fsadd
0226 AA82      1012            mov     r2,dpl
0228 AB83      1013            mov     r3,dph
022A ACF0      1014            mov     r4,b
022C FD        1015            mov     r5,a
022D E581      1016            mov     a,sp
022F 24FC      1017            add     a,#0xfc
0231 F581      1018            mov     sp,a
0233           1019   ;        EFM8_ADC.c:230: return half_period;
0233 8A82      1020            mov     dpl,r2
0235 8B83      1021            mov     dph,r3
0237 8CF0      1022            mov     b,r4
0239 ED        1023            mov     a,r5
023A 22        1024            ret
023B           1025   ;------------------------------------------------------------
023B           1026   ;Allocation info for local variables in function 'get_period_2'
023B           1027   ;------------------------------------------------------------
023B           1028   ;half_period               Allocated to registers r2 r3 r4 r5 
023B           1029   ;overflow_count            Allocated to registers 
023B           1030   ;------------------------------------------------------------
023B           1031   ;        EFM8_ADC.c:233: float get_period_2(void)
023B           1032   ;        -----------------------------------------
023B           1033   ;         function get_period_2
023B           1034   ;        -----------------------------------------
023B           1035   _get_period_2:
023B           1036   ;        EFM8_ADC.c:238: ADC0MX=QFP32_MUX_P2_4;
023B 75BB11    1037            mov     _ADC0MX,#0x11
023E           1038   ;        EFM8_ADC.c:239: ADINT = 0;
023E C2ED      1039            clr     _ADINT
0240           1040   ;        EFM8_ADC.c:240: ADBUSY=1;
0240 D2EC      1041            setb    _ADBUSY
0242           1042   ;        EFM8_ADC.c:241: while (!ADINT); // Wait for conversion to complete
0242           1043   L011001?:
0242 30ED00    1044            jnb     _ADINT,L011001?
0245           1045   ;        EFM8_ADC.c:243: TL0=0;
0245 758A00    1046            mov     _TL0,#0x00
0248           1047   ;        EFM8_ADC.c:244: TH0=0;
0248 758C00    1048            mov     _TH0,#0x00
024B           1049   ;        EFM8_ADC.c:245: while (Get_ADC()!=0); // Wait for the signal to be zero
024B           1050   L011004?:
024B 120000    1051            lcall   _Get_ADC
024E E582      1052            mov     a,dpl
0250 8583F0    1053            mov     b,dph
0253 45F0      1054            orl     a,b
0255 7000      1055            jnz     L011004?
0257           1056   ;        EFM8_ADC.c:246: while (Get_ADC()==0); // Wait for the signal to be positive
0257           1057   L011007?:
0257 120000    1058            lcall   _Get_ADC
025A E582      1059            mov     a,dpl
025C 8583F0    1060            mov     b,dph
025F 45F0      1061            orl     a,b
0261 6000      1062            jz      L011007?
0263           1063   ;        EFM8_ADC.c:247: TR0=1; // Start the timer 0
0263 D28C      1064            setb    _TR0
0265           1065   ;        EFM8_ADC.c:248: ADC0MX=QFP32_MUX_P2_5;
0265 75BB12    1066            mov     _ADC0MX,#0x12
0268           1067   ;        EFM8_ADC.c:249: while (Get_ADC()!=0); // Wait for the signal to be zero again
0268           1068   L011010?:
0268 120000    1069            lcall   _Get_ADC
026B E582      1070            mov     a,dpl
026D 8583F0    1071            mov     b,dph
0270 45F0      1072            orl     a,b
0272 7000      1073            jnz     L011010?
0274           1074   ;        EFM8_ADC.c:250: TR0=0; // Stop timer 0
0274 C28C      1075            clr     _TR0
0276           1076   ;        EFM8_ADC.c:252: half_period=TH0*256.0+TL0; // The 16-bit number [TH0-TL0]
0276 858C82    1077            mov     dpl,_TH0
0279 120000    1078            lcall   ___uchar2fs
027C AA82      1079            mov     r2,dpl
027E AB83      1080            mov     r3,dph
0280 ACF0      1081            mov     r4,b
0282 FD        1082            mov     r5,a
0283 C002      1083            push    ar2
0285 C003      1084            push    ar3
0287 C004      1085            push    ar4
0289 C005      1086            push    ar5
028B 900000    1087            mov     dptr,#0x0000
028E 75F080    1088            mov     b,#0x80
0291 7443      1089            mov     a,#0x43
0293 120000    1090            lcall   ___fsmul
0296 AA82      1091            mov     r2,dpl
0298 AB83      1092            mov     r3,dph
029A ACF0      1093            mov     r4,b
029C FD        1094            mov     r5,a
029D E581      1095            mov     a,sp
029F 24FC      1096            add     a,#0xfc
02A1 F581      1097            mov     sp,a
02A3 AE8A      1098            mov     r6,_TL0
02A5 7F00      1099            mov     r7,#0x00
02A7 8E82      1100            mov     dpl,r6
02A9 8F83      1101            mov     dph,r7
02AB C002      1102            push    ar2
02AD C003      1103            push    ar3
02AF C004      1104            push    ar4
02B1 C005      1105            push    ar5
02B3 120000    1106            lcall   ___sint2fs
02B6 AE82      1107            mov     r6,dpl
02B8 AF83      1108            mov     r7,dph
02BA A8F0      1109            mov     r0,b
02BC F9        1110            mov     r1,a
02BD D005      1111            pop     ar5
02BF D004      1112            pop     ar4
02C1 D003      1113            pop     ar3
02C3 D002      1114            pop     ar2
02C5 C006      1115            push    ar6
02C7 C007      1116            push    ar7
02C9 C000      1117            push    ar0
02CB C001      1118            push    ar1
02CD 8A82      1119            mov     dpl,r2
02CF 8B83      1120            mov     dph,r3
02D1 8CF0      1121            mov     b,r4
02D3 ED        1122            mov     a,r5
02D4 120000    1123            lcall   ___fsadd
02D7 AA82      1124            mov     r2,dpl
02D9 AB83      1125            mov     r3,dph
02DB ACF0      1126            mov     r4,b
02DD FD        1127            mov     r5,a
02DE E581      1128            mov     a,sp
02E0 24FC      1129            add     a,#0xfc
02E2 F581      1130            mov     sp,a
02E4           1131   ;        EFM8_ADC.c:255: return half_period;
02E4 8A82      1132            mov     dpl,r2
02E6 8B83      1133            mov     dph,r3
02E8 8CF0      1134            mov     b,r4
02EA ED        1135            mov     a,r5
02EB 22        1136            ret
02EC           1137   ;------------------------------------------------------------
02EC           1138   ;Allocation info for local variables in function 'main'
02EC           1139   ;------------------------------------------------------------
02EC           1140   ;v                         Allocated with name '_main_v_1_65'
02EC           1141   ;hello                     Allocated with name '_main_hello_1_65'
02EC           1142   ;hello2                    Allocated to registers r2 r3 r4 r5 
02EC           1143   ;peak_voltage_reference    Allocated with name '_main_peak_voltage_reference_1_65'
02EC           1144   ;peak_voltage_other        Allocated to registers r2 r3 r4 r5 
02EC           1145   ;y                         Allocated to registers r2 r3 r4 r5 
02EC           1146   ;sloc0                     Allocated with name '_main_sloc0_1_0'
02EC           1147   ;------------------------------------------------------------
02EC           1148   ;        EFM8_ADC.c:259: void main (void)
02EC           1149   ;        -----------------------------------------
02EC           1150   ;         function main
02EC           1151   ;        -----------------------------------------
02EC           1152   _main:
02EC           1153   ;        EFM8_ADC.c:269: waitms(500); // Give PuTTy a chance to start before sending
02EC 9001F4    1154            mov     dptr,#0x01F4
02EF 120000    1155            lcall   _waitms
02F2           1156   ;        EFM8_ADC.c:270: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
02F2 7400      1157            mov     a,#__str_0
02F4 C0E0      1158            push    acc
02F6 74C0      1159            mov     a,#(__str_0 >> 8)
02F8 C0E0      1160            push    acc
02FA 7480      1161            mov     a,#0x80
02FC C0E0      1162            push    acc
02FE 120000    1163            lcall   _printf
0301 1581      1164            dec     sp
0303 1581      1165            dec     sp
0305 1581      1166            dec     sp
0307           1167   ;        EFM8_ADC.c:275: __FILE__, __DATE__, __TIME__);
0307           1168   ;        EFM8_ADC.c:274: "Compiled: %s, %s\n\n",
0307 7480      1169            mov     a,#__str_4
0309 C0E0      1170            push    acc
030B 74C0      1171            mov     a,#(__str_4 >> 8)
030D C0E0      1172            push    acc
030F 7480      1173            mov     a,#0x80
0311 C0E0      1174            push    acc
0313 74C0      1175            mov     a,#__str_3
0315 C0E0      1176            push    acc
0317 74C0      1177            mov     a,#(__str_3 >> 8)
0319 C0E0      1178            push    acc
031B 7480      1179            mov     a,#0x80
031D C0E0      1180            push    acc
031F 7400      1181            mov     a,#__str_2
0321 C0E0      1182            push    acc
0323 74C1      1183            mov     a,#(__str_2 >> 8)
0325 C0E0      1184            push    acc
0327 7480      1185            mov     a,#0x80
0329 C0E0      1186            push    acc
032B 7440      1187            mov     a,#__str_1
032D C0E0      1188            push    acc
032F 74C1      1189            mov     a,#(__str_1 >> 8)
0331 C0E0      1190            push    acc
0333 7480      1191            mov     a,#0x80
0335 C0E0      1192            push    acc
0337 120000    1193            lcall   _printf
033A E581      1194            mov     a,sp
033C 24F4      1195            add     a,#0xf4
033E F581      1196            mov     sp,a
0340           1197   ;        EFM8_ADC.c:277: InitPinADC(2, 4); // Configure P2.4 as analog input
0340 750004    1198            mov     _InitPinADC_PARM_2,#0x04
0343 758202    1199            mov     dpl,#0x02
0346 120000    1200            lcall   _InitPinADC
0349           1201   ;        EFM8_ADC.c:278: InitPinADC(2, 5); // Configure P2.5 as analog input
0349 750005    1202            mov     _InitPinADC_PARM_2,#0x05
034C 758202    1203            mov     dpl,#0x02
034F 120000    1204            lcall   _InitPinADC
0352           1205   ;        EFM8_ADC.c:279: InitADC();
0352 120000    1206            lcall   _InitADC
0355           1207   ;        EFM8_ADC.c:281: while(1)
0355           1208   L012008?:
0355           1209   ;        EFM8_ADC.c:284: v[0] = Volts_at_Pin(QFP32_MUX_P2_4);
0355 758211    1210            mov     dpl,#0x11
0358 120000    1211            lcall   _Volts_at_Pin
035B AA82      1212            mov     r2,dpl
035D AB83      1213            mov     r3,dph
035F ACF0      1214            mov     r4,b
0361 FD        1215            mov     r5,a
0362 8AD0      1216            mov     _main_v_1_65,r2
0364 8BD1      1217            mov     (_main_v_1_65 + 1),r3
0366 8CD2      1218            mov     (_main_v_1_65 + 2),r4
0368 8DD3      1219            mov     (_main_v_1_65 + 3),r5
036A           1220   ;        EFM8_ADC.c:285: v[1] = Volts_at_Pin(QFP32_MUX_P2_5);
036A 758212    1221            mov     dpl,#0x12
036D 120000    1222            lcall   _Volts_at_Pin
0370 AA82      1223            mov     r2,dpl
0372 AB83      1224            mov     r3,dph
0374 ACF0      1225            mov     r4,b
0376 FD        1226            mov     r5,a
0377 8AD4      1227            mov     (_main_v_1_65 + 0x0004),r2
0379 8BD5      1228            mov     ((_main_v_1_65 + 0x0004) + 1),r3
037B 8CD6      1229            mov     ((_main_v_1_65 + 0x0004) + 2),r4
037D 8DD7      1230            mov     ((_main_v_1_65 + 0x0004) + 3),r5
037F           1231   ;        EFM8_ADC.c:289: hello = get_period();
037F 120000    1232            lcall   _get_period
0382 858220    1233            mov     _main_hello_1_65,dpl
0385 858321    1234            mov     (_main_hello_1_65 + 1),dph
0388 85F022    1235            mov     (_main_hello_1_65 + 2),b
038B F523      1236            mov     (_main_hello_1_65 + 3),a
038D           1237   ;        EFM8_ADC.c:290: hello = hello*2*12*1000/SYSCLK;
038D C020      1238            push    _main_hello_1_65
038F C021      1239            push    (_main_hello_1_65 + 1)
0391 C022      1240            push    (_main_hello_1_65 + 2)
0393 C023      1241            push    (_main_hello_1_65 + 3)
0395 908000    1242            mov     dptr,#0x8000
0398 75F0BB    1243            mov     b,#0xBB
039B 7446      1244            mov     a,#0x46
039D 120000    1245            lcall   ___fsmul
03A0 8582C0    1246            mov     _main_sloc0_1_0,dpl
03A3 8583C1    1247            mov     (_main_sloc0_1_0 + 1),dph
03A6 85F0C2    1248            mov     (_main_sloc0_1_0 + 2),b
03A9 F5C3      1249            mov     (_main_sloc0_1_0 + 3),a
03AB E581      1250            mov     a,sp
03AD 24FC      1251            add     a,#0xfc
03AF F581      1252            mov     sp,a
03B1 7440      1253            mov     a,#0x40
03B3 C0E0      1254            push    acc
03B5 7454      1255            mov     a,#0x54
03B7 C0E0      1256            push    acc
03B9 7489      1257            mov     a,#0x89
03BB C0E0      1258            push    acc
03BD 744C      1259            mov     a,#0x4C
03BF C0E0      1260            push    acc
03C1 85C082    1261            mov     dpl,_main_sloc0_1_0
03C4 85C183    1262            mov     dph,(_main_sloc0_1_0 + 1)
03C7 85C2F0    1263            mov     b,(_main_sloc0_1_0 + 2)
03CA E5C3      1264            mov     a,(_main_sloc0_1_0 + 3)
03CC 120000    1265            lcall   ___fsdiv
03CF 858220    1266            mov     _main_hello_1_65,dpl
03D2 858321    1267            mov     (_main_hello_1_65 + 1),dph
03D5 85F022    1268            mov     (_main_hello_1_65 + 2),b
03D8 F523      1269            mov     (_main_hello_1_65 + 3),a
03DA E581      1270            mov     a,sp
03DC 24FC      1271            add     a,#0xfc
03DE F581      1272            mov     sp,a
03E0           1273   ;        EFM8_ADC.c:291: printf("Period: %f\r", hello);
03E0 C020      1274            push    _main_hello_1_65
03E2 C021      1275            push    (_main_hello_1_65 + 1)
03E4 C022      1276            push    (_main_hello_1_65 + 2)
03E6 C023      1277            push    (_main_hello_1_65 + 3)
03E8 74C0      1278            mov     a,#__str_5
03EA C0E0      1279            push    acc
03EC 74C1      1280            mov     a,#(__str_5 >> 8)
03EE C0E0      1281            push    acc
03F0 7480      1282            mov     a,#0x80
03F2 C0E0      1283            push    acc
03F4 120000    1284            lcall   _printf
03F7 E581      1285            mov     a,sp
03F9 24F9      1286            add     a,#0xf9
03FB F581      1287            mov     sp,a
03FD           1288   ;        EFM8_ADC.c:295: while (Get_ADC()!=0); // Wait for the signal to be zero
03FD           1289   L012001?:
03FD 120000    1290            lcall   _Get_ADC
0400 E582      1291            mov     a,dpl
0402 8583F0    1292            mov     b,dph
0405 45F0      1293            orl     a,b
0407 7000      1294            jnz     L012001?
0409           1295   ;        EFM8_ADC.c:299: peak_voltage_reference=Volts_at_Pin(QFP32_MUX_P2_4);
0409 758211    1296            mov     dpl,#0x11
040C 120000    1297            lcall   _Volts_at_Pin
040F 858280    1298            mov     _main_peak_voltage_reference_1_65,dpl
0412 858381    1299            mov     (_main_peak_voltage_reference_1_65 + 1),dph
0415 85F082    1300            mov     (_main_peak_voltage_reference_1_65 + 2),b
0418 F583      1301            mov     (_main_peak_voltage_reference_1_65 + 3),a
041A           1302   ;        EFM8_ADC.c:300: printf("Peak Voltage Reference: %f\r", peak_voltage_reference);
041A C080      1303            push    _main_peak_voltage_reference_1_65
041C C081      1304            push    (_main_peak_voltage_reference_1_65 + 1)
041E C082      1305            push    (_main_peak_voltage_reference_1_65 + 2)
0420 C083      1306            push    (_main_peak_voltage_reference_1_65 + 3)
0422 7440      1307            mov     a,#__str_6
0424 C0E0      1308            push    acc
0426 74C2      1309            mov     a,#(__str_6 >> 8)
0428 C0E0      1310            push    acc
042A 7480      1311            mov     a,#0x80
042C C0E0      1312            push    acc
042E 120000    1313            lcall   _printf
0431 E581      1314            mov     a,sp
0433 24F9      1315            add     a,#0xf9
0435 F581      1316            mov     sp,a
0437           1317   ;        EFM8_ADC.c:303: while (Get_ADC()!=0); // Wait for the signal to be zero
0437           1318   L012004?:
0437 120000    1319            lcall   _Get_ADC
043A E582      1320            mov     a,dpl
043C 8583F0    1321            mov     b,dph
043F 45F0      1322            orl     a,b
0441           1323   ;        EFM8_ADC.c:307: waitms(hello/4.0);
0441 7000      1324            jnz     L012004?
0443 C0E0      1325            push    acc
0445 C0E0      1326            push    acc
0447 7480      1327            mov     a,#0x80
0449 C0E0      1328            push    acc
044B 7440      1329            mov     a,#0x40
044D C0E0      1330            push    acc
044F 852082    1331            mov     dpl,_main_hello_1_65
0452 852183    1332            mov     dph,(_main_hello_1_65 + 1)
0455 8522F0    1333            mov     b,(_main_hello_1_65 + 2)
0458 E523      1334            mov     a,(_main_hello_1_65 + 3)
045A 120000    1335            lcall   ___fsdiv
045D AE82      1336            mov     r6,dpl
045F AF83      1337            mov     r7,dph
0461 AAF0      1338            mov     r2,b
0463 FB        1339            mov     r3,a
0464 E581      1340            mov     a,sp
0466 24FC      1341            add     a,#0xfc
0468 F581      1342            mov     sp,a
046A 8E82      1343            mov     dpl,r6
046C 8F83      1344            mov     dph,r7
046E 8AF0      1345            mov     b,r2
0470 EB        1346            mov     a,r3
0471 120000    1347            lcall   ___fs2uint
0474 120000    1348            lcall   _waitms
0477           1349   ;        EFM8_ADC.c:308: P2_1=1;
0477 D2A1      1350            setb    _P2_1
0479           1351   ;        EFM8_ADC.c:309: peak_voltage_other=Volts_at_Pin(QFP32_MUX_P2_5);
0479 758212    1352            mov     dpl,#0x12
047C 120000    1353            lcall   _Volts_at_Pin
047F AA82      1354            mov     r2,dpl
0481 AB83      1355            mov     r3,dph
0483 ACF0      1356            mov     r4,b
0485 FD        1357            mov     r5,a
0486           1358   ;        EFM8_ADC.c:310: P2_1=0;
0486 C2A1      1359            clr     _P2_1
0488           1360   ;        EFM8_ADC.c:311: printf("Peak Voltage Other: %f\r", peak_voltage_other);
0488 C002      1361            push    ar2
048A C003      1362            push    ar3
048C C004      1363            push    ar4
048E C005      1364            push    ar5
0490 7400      1365            mov     a,#__str_7
0492 C0E0      1366            push    acc
0494 74C3      1367            mov     a,#(__str_7 >> 8)
0496 C0E0      1368            push    acc
0498 7480      1369            mov     a,#0x80
049A C0E0      1370            push    acc
049C 120000    1371            lcall   _printf
049F E581      1372            mov     a,sp
04A1 24F9      1373            add     a,#0xf9
04A3 F581      1374            mov     sp,a
04A5           1375   ;        EFM8_ADC.c:313: hello2 = get_period_2();
04A5 120000    1376            lcall   _get_period_2
04A8 AA82      1377            mov     r2,dpl
04AA AB83      1378            mov     r3,dph
04AC ACF0      1379            mov     r4,b
04AE FD        1380            mov     r5,a
04AF           1381   ;        EFM8_ADC.c:314: hello2=(hello2*12*1000)/SYSCLK;
04AF C002      1382            push    ar2
04B1 C003      1383            push    ar3
04B3 C004      1384            push    ar4
04B5 C005      1385            push    ar5
04B7 908000    1386            mov     dptr,#0x8000
04BA 75F03B    1387            mov     b,#0x3B
04BD 7446      1388            mov     a,#0x46
04BF 120000    1389            lcall   ___fsmul
04C2 8582C0    1390            mov     _main_sloc0_1_0,dpl
04C5 8583C1    1391            mov     (_main_sloc0_1_0 + 1),dph
04C8 85F0C2    1392            mov     (_main_sloc0_1_0 + 2),b
04CB F5C3      1393            mov     (_main_sloc0_1_0 + 3),a
04CD E581      1394            mov     a,sp
04CF 24FC      1395            add     a,#0xfc
04D1 F581      1396            mov     sp,a
04D3 7440      1397            mov     a,#0x40
04D5 C0E0      1398            push    acc
04D7 7454      1399            mov     a,#0x54
04D9 C0E0      1400            push    acc
04DB 7489      1401            mov     a,#0x89
04DD C0E0      1402            push    acc
04DF 744C      1403            mov     a,#0x4C
04E1 C0E0      1404            push    acc
04E3 85C082    1405            mov     dpl,_main_sloc0_1_0
04E6 85C183    1406            mov     dph,(_main_sloc0_1_0 + 1)
04E9 85C2F0    1407            mov     b,(_main_sloc0_1_0 + 2)
04EC E5C3      1408            mov     a,(_main_sloc0_1_0 + 3)
04EE 120000    1409            lcall   ___fsdiv
04F1 AA82      1410            mov     r2,dpl
04F3 AB83      1411            mov     r3,dph
04F5 ACF0      1412            mov     r4,b
04F7 FD        1413            mov     r5,a
04F8 E581      1414            mov     a,sp
04FA 24FC      1415            add     a,#0xfc
04FC F581      1416            mov     sp,a
04FE           1417   ;        EFM8_ADC.c:315: printf("Phase difference in ms: %f\r", hello2);
04FE C002      1418            push    ar2
0500 C003      1419            push    ar3
0502 C004      1420            push    ar4
0504 C005      1421            push    ar5
0506 C002      1422            push    ar2
0508 C003      1423            push    ar3
050A C004      1424            push    ar4
050C C005      1425            push    ar5
050E 7440      1426            mov     a,#__str_8
0510 C0E0      1427            push    acc
0512 74C3      1428            mov     a,#(__str_8 >> 8)
0514 C0E0      1429            push    acc
0516 7480      1430            mov     a,#0x80
0518 C0E0      1431            push    acc
051A 120000    1432            lcall   _printf
051D E581      1433            mov     a,sp
051F 24F9      1434            add     a,#0xf9
0521 F581      1435            mov     sp,a
0523           1436   ;        EFM8_ADC.c:316: hello2=hello2*20.0/hello;
0523 900000    1437            mov     dptr,#0x0000
0526 75F0A0    1438            mov     b,#0xA0
0529 7441      1439            mov     a,#0x41
052B 120000    1440            lcall   ___fsmul
052E 8582C0    1441            mov     _main_sloc0_1_0,dpl
0531 8583C1    1442            mov     (_main_sloc0_1_0 + 1),dph
0534 85F0C2    1443            mov     (_main_sloc0_1_0 + 2),b
0537 F5C3      1444            mov     (_main_sloc0_1_0 + 3),a
0539 E581      1445            mov     a,sp
053B 24FC      1446            add     a,#0xfc
053D F581      1447            mov     sp,a
053F C020      1448            push    _main_hello_1_65
0541 C021      1449            push    (_main_hello_1_65 + 1)
0543 C022      1450            push    (_main_hello_1_65 + 2)
0545 C023      1451            push    (_main_hello_1_65 + 3)
0547 85C082    1452            mov     dpl,_main_sloc0_1_0
054A 85C183    1453            mov     dph,(_main_sloc0_1_0 + 1)
054D 85C2F0    1454            mov     b,(_main_sloc0_1_0 + 2)
0550 E5C3      1455            mov     a,(_main_sloc0_1_0 + 3)
0552 120000    1456            lcall   ___fsdiv
0555 AA82      1457            mov     r2,dpl
0557 AB83      1458            mov     r3,dph
0559 ACF0      1459            mov     r4,b
055B FD        1460            mov     r5,a
055C E581      1461            mov     a,sp
055E 24FC      1462            add     a,#0xfc
0560 F581      1463            mov     sp,a
0562           1464   ;        EFM8_ADC.c:317: y=179.0+hello2*1/(-0.056);
0562 7442      1465            mov     a,#0x42
0564 C0E0      1466            push    acc
0566 7460      1467            mov     a,#0x60
0568 C0E0      1468            push    acc
056A 7465      1469            mov     a,#0x65
056C C0E0      1470            push    acc
056E 74BD      1471            mov     a,#0xBD
0570 C0E0      1472            push    acc
0572 8A82      1473            mov     dpl,r2
0574 8B83      1474            mov     dph,r3
0576 8CF0      1475            mov     b,r4
0578 ED        1476            mov     a,r5
0579 120000    1477            lcall   ___fsdiv
057C AA82      1478            mov     r2,dpl
057E AB83      1479            mov     r3,dph
0580 ACF0      1480            mov     r4,b
0582 FD        1481            mov     r5,a
0583 E581      1482            mov     a,sp
0585 24FC      1483            add     a,#0xfc
0587 F581      1484            mov     sp,a
0589 E4        1485            clr     a
058A C0E0      1486            push    acc
058C C0E0      1487            push    acc
058E 7433      1488            mov     a,#0x33
0590 C0E0      1489            push    acc
0592 7443      1490            mov     a,#0x43
0594 C0E0      1491            push    acc
0596 8A82      1492            mov     dpl,r2
0598 8B83      1493            mov     dph,r3
059A 8CF0      1494            mov     b,r4
059C ED        1495            mov     a,r5
059D 120000    1496            lcall   ___fsadd
05A0 AA82      1497            mov     r2,dpl
05A2 AB83      1498            mov     r3,dph
05A4 ACF0      1499            mov     r4,b
05A6 FD        1500            mov     r5,a
05A7 E581      1501            mov     a,sp
05A9 24FC      1502            add     a,#0xfc
05AB F581      1503            mov     sp,a
05AD           1504   ;        EFM8_ADC.c:318: printf("Phase degrees: %f\r", y);
05AD C002      1505            push    ar2
05AF C003      1506            push    ar3
05B1 C004      1507            push    ar4
05B3 C005      1508            push    ar5
05B5 7480      1509            mov     a,#__str_9
05B7 C0E0      1510            push    acc
05B9 74C3      1511            mov     a,#(__str_9 >> 8)
05BB C0E0      1512            push    acc
05BD 7480      1513            mov     a,#0x80
05BF C0E0      1514            push    acc
05C1 120000    1515            lcall   _printf
05C4 E581      1516            mov     a,sp
05C6 24F9      1517            add     a,#0xf9
05C8 F581      1518            mov     sp,a
05CA           1519   ;        EFM8_ADC.c:321: waitms(500);
05CA 9001F4    1520            mov     dptr,#0x01F4
05CD 120000    1521            lcall   _waitms
05D0 020000    1522            ljmp    L012008?
05D3           1523            rseg R_CSEG
05D3           1524   
0000           1525            rseg R_XINIT
0000           1526   
0000           1527            rseg R_CONST
0000           1528   __str_0:
0000 1B        1529            db 0x1B
0001 5B324A    1530            db '[2J'
0004 00        1531            db 0x00
0005           1532   __str_1:
0005 41444320  1533            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1534            db 0x0A
0016 46696C65  1535            db 'File: %s'
     3A202573
001E 0A        1536            db 0x0A
001F 436F6D70  1537            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1538            db 0x0A
0030 0A        1539            db 0x0A
0031 00        1540            db 0x00
0032           1541   __str_2:
0032 45464D38  1542            db 'EFM8_ADC.c'
     5F414443
     2E63
003C 00        1543            db 0x00
003D           1544   __str_3:
003D 4D617220  1545            db 'Mar  7 2024'
     20372032
     303234
0048 00        1546            db 0x00
0049           1547   __str_4:
0049 31313A30  1548            db '11:04:09'
     343A3039
0051 00        1549            db 0x00
0052           1550   __str_5:
0052 50657269  1551            db 'Period: %f'
     6F643A20
     2566
005C 0D        1552            db 0x0D
005D 00        1553            db 0x00
005E           1554   __str_6:
005E 5065616B  1555            db 'Peak Voltage Reference: %f'
     20566F6C
     74616765
     20526566
     6572656E
     63653A20
     2566
0078 0D        1556            db 0x0D
0079 00        1557            db 0x00
007A           1558   __str_7:
007A 5065616B  1559            db 'Peak Voltage Other: %f'
     20566F6C
     74616765
     204F7468
     65723A20
     2566
0090 0D        1560            db 0x0D
0091 00        1561            db 0x00
0092           1562   __str_8:
0092 50686173  1563            db 'Phase difference in ms: %f'
     65206469
     66666572
     656E6365
     20696E20
     6D733A20
     2566
00AC 0D        1564            db 0x0D
00AD 00        1565            db 0x00
00AE           1566   __str_9:
00AE 50686173  1567            db 'Phase degrees: %f'
     65206465
     67726565
     733A2025
     66
00BF 0D        1568            db 0x0D
00C0 00        1569            db 0x00
00C1           1570   
0003           1571            CSEG
0003           1572   
0003           1573   end
